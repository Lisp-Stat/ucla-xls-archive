(XLISP::CHECK-FSL-VERSION 1 3)
#K(#(80 1 1 0 0 25 1 0 1 1) #(0) #("blin-mpp" PROVIDE) 0 NIL)
#K(#(80 1 3 0 1 2 4 38 3 4 39 4 5 23 5 6 1 4 21 0 1 2 6 0 4 6 1 3 23 6 6 1 4 23 7 4 2 5 6 0 3 5 16 5 6 21 1 4 5 5 38 8 7 23 9 0 3 4 7 6 17 5 5 16 5 6 21 1 4 5 5 38 10 7 23 9 0 4 4 7 2 1 23 11 0 2 2 4 11 0 2) #(0 23 28 33 50 71) #((NODES REAL-SIZE RADIUS DIAGNOSTICS NODE-LABELS OUTLINES) MORAL-PLOT-PROTO NIL GRAPH-WINDOW-PROTO MAKE-OBJECT LISTP LIST APPLY :ADD-SLOT SEND :MAKE-PROTOTYPE SET) 0 NIL)
#K(#(80 1 1 0 0 25 1 0 1 1) #(0) #((PROGN #K(#(80 1 3 0 1 2 2 38 3 4 23 4 5 1 3 25 5 0 4 4 2 5 1) #(0) #("Method args: nil
Resets real-size and radius slot-values." :RESIZE #K(#(80 2 4 0 1 2 3 2 38 4 6 23 5 6 2 1 6 23 6 6 1 6 63 5 6 0 62 5 6 38 7 7 23 5 7 3 1 7 4 23 8 7 1 7 23 9 7 1 7 2 42 3 7 7 2 47 6 7 6 23 10 6 1 6 63 2 6 0 57 0) #(0) #(RADIUS 4 NODES REAL-SIZE :SIZE SEND MIN :SLOT-VALUE LENGTH SQRT ROUND) 0 NIL) MORAL-PLOT-PROTO BYTE-CODE-CLOSE XLISP::ADD-METHOD) 0 NIL) #K(#(80 1 1 0 0 11 0 1) #(0) #(:RESIZE) 0 NIL)) EVAL) 0 NIL)
#K(#(80 1 1 0 0 25 1 0 1 1) #(0) #((PROGN #K(#(80 1 3 0 1 2 2 38 3 4 23 4 5 1 3 25 5 0 4 4 2 5 1) #(0) #("Method args: (coords)
Takes zero-one coords to integer coords for plotting." :S-TO-R #K(#(80 3 1 0 1 62 3 4 2 42 2 4 4 25 1 0 1 4) #(0) #(REAL-SIZE ROUND) 0 NIL) MORAL-PLOT-PROTO BYTE-CODE-CLOSE XLISP::ADD-METHOD) 0 NIL) #K(#(80 1 1 0 0 11 0 1) #(0) #(:S-TO-R) 0 NIL)) EVAL) 0 NIL)
#K(#(80 1 1 0 0 25 1 0 1 1) #(0) #((PROGN #K(#(80 1 3 0 1 2 2 38 3 4 23 4 5 1 3 25 5 0 4 4 2 5 1) #(0) #("Method args: (coords)
Takes integer plotting coords to zero-one coords." :R-TO-S #K(#(80 3 1 0 1 62 3 4 2 47 2 4 0 57 0) #(0) #(REAL-SIZE) 0 NIL) MORAL-PLOT-PROTO BYTE-CODE-CLOSE XLISP::ADD-METHOD) 0 NIL) #K(#(80 1 1 0 0 11 0 1) #(0) #(:R-TO-S) 0 NIL)) EVAL) 0 NIL)
#K(#(80 1 1 0 0 25 1 0 1 1) #(0) #((PROGN #K(#(80 1 3 0 1 2 2 38 3 4 23 4 5 1 3 25 5 0 4 4 2 5 1) #(0) #("Method args: nil
Redraws the moral graph plot." :REDRAW #K(#(80 2 7 0 1 2 3 4 5 6 8 23 7 0 1 8 38 8 9 38 9 10 23 10 9 3 7 9 10 69 6 5 1 2 70 57 0 49 6 9 0 56 6 3 11 11 1 1 38 6 12 21 0 4 5 12 38 6 12 25 11 11 1 12 11 11 4 38 12 12 23 13 0 2 1 12 62 3 12 16 12 13 21 1 7 8 12 38 14 14 23 13 0 3 1 14 13 17 12 12 16 12 13 21 1 7 8 12 62 3 14 16 14 15 21 1 9 10 14 38 15 16 23 13 0 3 1 16 15 17 14 14 16 14 15 21 1 9 10 14 38 6 16 25 16 11 2 16 2) #(0 34 37 48 56 64 67 87 108 119 140) #("
$BlinEnd
rs
" NODES NIL T (*EPS-STREAM*) "mpw.eps" *EPS-STREAM* MARK-AS-SPECIAL :DIRECTION :OUTPUT OPEN CLOSE :ERASE-WINDOW SEND :PLOT-ARCS :PLOT-NODE FORMAT) 0 NIL) MORAL-PLOT-PROTO BYTE-CODE-CLOSE XLISP::ADD-METHOD) 0 NIL) #K(#(80 1 1 0 0 11 0 1) #(0) #(:REDRAW) 0 NIL)) EVAL) 0 NIL)
#K(#(80 1 1 0 0 25 1 0 1 1) #(0) #((PROGN #K(#(80 1 3 0 1 2 2 38 3 4 23 4 5 1 3 25 5 0 4 4 2 5 1) #(0) #("Method args: (node)
Draws the arcs for the given node." :PLOT-ARCS #K(#(80 3 4 0 1 2 3 9 38 4 7 23 5 0 3 1 7 6 38 6 7 23 5 0 3 1 7 5 23 7 7 1 2 38 8 8 23 5 7 2 7 8 38 9 8 23 5 7 3 1 8 7 23 7 8 1 2 38 10 9 23 5 8 3 8 9 4 16 8 9 21 1 1 2 8 23 7 10 1 9 38 8 11 23 5 10 2 10 11 38 9 11 23 5 10 3 1 11 10 38 11 11 16 7 12 71 2 2 7 13 16 10 14 71 2 2 10 15 23 5 0 6 1 11 12 13 14 15 17 8 8 16 8 9 21 1 1 2 8 11 0 3) #(0 75 139) #(NIL NEIGHBOURS 2 ARC :DRAW-COLOR SEND :LINE-WIDTH SYMBOL-VALUE :LOCATION :S-TO-R :SLOT-VALUE :DRAW-LINE) 0 NIL) MORAL-PLOT-PROTO BYTE-CODE-CLOSE XLISP::ADD-METHOD) 0 NIL) #K(#(80 1 1 0 0 11 0 1) #(0) #(:PLOT-ARCS) 0 NIL)) EVAL) 0 NIL)
#K(#(80 1 1 0 0 25 1 0 1 1) #(0) #((PROGN #K(#(80 1 3 0 1 2 2 38 3 4 23 4 5 1 3 25 5 0 4 4 2 5 1) #(0) #("Method args: (&optional (d nil))
Sets or returns node diagnostics status." :DIAGNOSTICS #K(#(77 1 2 1 2 2 0 1 1 50 0 1 2 2 4 62 3 0 57 0 63 3 2 0 38 3 5 25 4 0 2 1 5) #(0 15 20) #(DIAGNOSTICS -1 #(-1) :REDRAW SEND) 0 NIL) MORAL-PLOT-PROTO BYTE-CODE-CLOSE XLISP::ADD-METHOD) 0 NIL) #K(#(80 1 1 0 0 11 0 1) #(0) #(:DIAGNOSTICS) 0 NIL)) EVAL) 0 NIL)
#K(#(80 1 1 0 0 25 1 0 1 1) #(0) #((PROGN #K(#(80 1 3 0 1 2 2 38 3 4 23 4 5 1 3 25 5 0 4 4 2 5 1) #(0) #("Method args: (&optional (n nil))
Sets or returns node label status." :NODE-LABELS #K(#(77 1 2 1 2 2 0 1 1 50 0 1 2 2 4 62 3 0 57 0 63 3 2 0 38 3 5 25 4 0 2 1 5) #(0 15 20) #(NODE-LABELS -1 #(-1) :REDRAW SEND) 0 NIL) MORAL-PLOT-PROTO BYTE-CODE-CLOSE XLISP::ADD-METHOD) 0 NIL) #K(#(80 1 1 0 0 11 0 1) #(0) #(:NODE-LABELS) 0 NIL)) EVAL) 0 NIL)
#K(#(80 1 1 0 0 25 1 0 1 1) #(0) #((PROGN #K(#(80 1 3 0 1 2 2 38 3 4 23 4 5 1 3 25 5 0 4 4 2 5 1) #(0) #("Method args: (&optional (n nil))
Sets or returns node outline status." :OUTLINES #K(#(77 1 2 1 2 2 0 1 1 50 0 1 2 2 4 62 3 0 57 0 63 3 2 0 38 3 5 25 4 0 2 1 5) #(0 15 20) #(OUTLINES -1 #(-1) :REDRAW SEND) 0 NIL) MORAL-PLOT-PROTO BYTE-CODE-CLOSE XLISP::ADD-METHOD) 0 NIL) #K(#(80 1 1 0 0 11 0 1) #(0) #(:OUTLINES) 0 NIL)) EVAL) 0 NIL)
#K(#(80 1 1 0 0 25 1 0 1 1) #(0) #((PROGN #K(#(80 1 3 0 1 2 2 38 3 4 23 4 5 1 3 25 5 0 4 4 2 5 1) #(0) #("Method args: (node)
Draws the given node." :PLOT-NODE #K(#(80 3 14 0 1 2 3 4 5 6 7 8 9 10 11 12 13 16 23 14 17 1 2 38 15 18 23 16 17 2 17 18 38 17 18 23 16 17 3 1 18 17 16 17 18 71 2 2 17 19 38 18 20 23 16 20 3 1 20 16 39 19 21 23 14 22 1 2 38 18 23 23 16 22 3 22 23 15 23 20 22 1 22 23 21 22 1 22 2 45 14 22 22 23 22 21 3 21 22 13 23 23 21 1 21 23 14 22 1 2 38 18 23 23 16 22 3 22 23 12 23 20 22 1 22 38 24 23 23 25 24 3 11 10 13 23 26 24 1 24 23 16 0 3 1 23 24 38 27 23 2 45 18 20 24 2 45 19 20 25 2 42 9 20 26 2 42 9 20 27 23 16 0 6 1 23 24 25 26 27 38 28 23 23 16 23 2 1 23 21 0 1 5 23 38 29 24 16 22 25 23 16 24 3 1 24 25 2 42 6 24 24 23 30 24 1 24 37 62 2 3 24 13 38 24 25 23 16 0 3 1 25 3 38 31 25 2 45 18 20 26 2 45 19 20 27 2 42 9 20 28 2 42 9 20 29 23 16 0 8 1 25 26 27 28 29 4 24 37 76 4 5 24 13 38 24 25 23 16 0 3 1 25 5 38 31 25 2 45 18 20 26 2 45 19 20 27 2 42 9 20 28 2 42 9 20 29 23 16 0 8 1 25 26 27 28 29 4 24 38 32 23 23 16 23 2 1 23 21 0 6 7 23 38 33 24 23 16 24 3 1 24 14 38 24 25 23 16 25 3 1 25 7 38 34 26 2 45 18 20 27 2 45 19 20 28 2 42 9 20 29 2 42 9 20 30 23 16 26 6 1 26 27 28 29 30 23 35 0 3 24 25 26 23 36 23 1 21 2 45 23 14 23 0 13 24 37 60 8 16 24 23 23 37 25 2 21 24 2 42 20 25 25 23 30 25 1 25 38 29 26 2 43 24 14 27 23 37 27 2 22 27 23 16 26 3 1 26 27 2 42 6 26 26 23 30 26 1 26 38 24 27 2 43 24 14 28 23 25 28 3 11 10 28 23 26 28 1 28 23 16 0 3 1 27 28 38 27 27 2 45 18 25 28 2 45 19 25 29 2 42 9 25 30 2 42 9 25 31 23 16 0 6 1 27 28 29 30 31 38 28 27 23 16 27 2 1 27 21 0 9 13 27 37 62 10 11 26 13 38 24 28 23 16 0 3 1 28 3 38 31 28 2 45 18 25 29 2 45 19 25 30 2 42 9 25 31 2 42 9 25 32 23 16 0 8 1 28 29 30 31 32 4 26 37 76 12 13 26 13 38 24 28 23 16 0 3 1 28 5 38 31 28 2 45 18 25 29 2 45 19 25 30 2 42 9 25 31 2 42 9 25 32 23 16 0 8 1 28 29 30 31 32 4 26 38 32 26 23 16 26 2 1 26 21 0 14 15 26 38 24 27 23 16 27 3 1 27 7 38 34 28 2 45 18 25 29 2 45 19 25 30 2 42 9 25 31 2 42 9 25 32 23 16 28 6 1 28 29 30 31 32 23 35 0 2 27 28 61 112 24 24 37 60 8 16 24 23 23 20 25 1 21 16 25 25 2 42 20 25 25 23 30 25 1 25 38 24 26 23 16 0 3 1 26 8 38 27 26 2 45 18 25 27 2 45 19 25 28 2 42 9 25 29 2 42 9 25 30 23 16 0 6 1 26 27 28 29 30 38 24 25 23 16 0 3 1 25 7 38 38 25 23 16 25 2 1 25 21 0 17 18 25 38 39 25 23 14 26 1 2 38 40 27 23 16 26 2 26 27 2 43 19 20 27 25 16 0 7 1 25 26 18 27 14 14 11 0 11) #(0 194 223 268 274 319 333 393 412 533 539 584 590 635 649 698 708 793 826) #(RED 90 BLUE 180 OUTLINE NODE 2 "~a" NIL SIZE-RATIOS 0 1 RESOLUTIONS RADIUS SYMBOL-VALUE :LOCATION SEND :S-TO-R :SLOT-VALUE MAX REVERSE CUMSUM MAP-ELEMENTS SQRT :DRAW-COLOR FORMAT INTERN :PAINT-OVAL :DIAGNOSTICS :SR-MAP ROUND :PAINT-ARC :OUTLINES :LINE-WIDTH :FRAME-OVAL LIST LENGTH SELECT :NODE-LABELS :DRAW-TEXT :PRINT-NAME) 0 NIL) MORAL-PLOT-PROTO BYTE-CODE-CLOSE XLISP::ADD-METHOD) 0 NIL) #K(#(80 1 1 0 0 11 0 1) #(0) #(:PLOT-NODE) 0 NIL)) EVAL) 0 NIL)
#K(#(80 1 1 0 0 25 1 0 1 1) #(0) #((PROGN #K(#(80 1 3 0 1 2 2 38 3 4 23 4 5 1 3 25 5 0 4 4 2 5 1) #(0) #("Method args: (sr)
Method which maps a size-ratio (0,Infinity) onto (-1,1) for use
with diagnostic shadings. It is monotonic and maps 1 to 0.
You should feel free to re-define this method as long as it
retains those properties." :SR-MAP #K(#(80 3 2 0 1 1 23 2 5 2 2 4 2 42 3 5 5 2 45 5 4 0 57 0) #(0) #(2 1 CHISQ-CDF) 0 NIL) MORAL-PLOT-PROTO BYTE-CODE-CLOSE XLISP::ADD-METHOD) 0 NIL) #K(#(80 1 1 0 0 11 0 1) #(0) #(:SR-MAP) 0 NIL)) EVAL) 0 NIL)
#K(#(80 1 1 0 0 25 1 0 1 1) #(0) #((PROGN #K(#(80 1 3 0 1 2 2 38 3 4 23 4 5 1 3 25 5 0 4 4 2 5 1) #(0) #("Method args: ()
Send this message to the plot after an :OBSERVE and before an
:ABSORB in order to have resolution and size-ratio information
stored in the moral graph nodes to be used by the plot.
Returns nil." :RECORD #K(#(80 2 5 0 1 2 3 4 7 38 5 7 23 6 7 3 1 7 6 16 7 8 21 1 1 2 7 23 7 9 1 8 38 5 10 23 7 11 1 8 38 8 12 23 6 11 2 11 12 23 7 12 1 8 38 5 13 23 6 12 3 12 13 4 20 11 12 11 23 6 0 4 9 10 4 11 23 7 9 1 8 38 5 10 23 7 11 1 8 38 9 12 23 6 11 2 11 12 23 7 12 1 8 38 5 13 23 6 12 3 12 13 3 20 11 12 11 23 6 0 4 9 10 3 11 23 7 9 1 8 38 5 10 23 7 11 1 8 38 10 12 23 6 11 2 11 12 23 7 12 1 8 38 5 13 23 6 12 3 12 13 2 20 11 12 11 23 6 0 4 9 10 2 11 17 7 7 16 7 8 21 1 1 2 7 38 11 9 23 6 0 2 1 9 38 12 9 23 6 0 2 1 9 11 0 5) #(0 27 185) #(GLOBAL-SIZE-RATIOS SIZE-RATIOS RESOLUTIONS NIL NODES :SLOT-VALUE SEND SYMBOL-VALUE :RESOLUTION :SIZE-RATIO :GLOBAL-SIZE-RATIO :RESIZE :REDRAW) 0 NIL) MORAL-PLOT-PROTO BYTE-CODE-CLOSE XLISP::ADD-METHOD) 0 NIL) #K(#(80 1 1 0 0 11 0 1) #(0) #(:RECORD) 0 NIL)) EVAL) 0 NIL)
#K(#(80 1 2 0 1 4 38 2 3 39 3 4 23 4 5 1 3 21 0 1 2 5 0 3 5 1 3 23 5 5 1 3 23 6 3 2 4 5 0 2 4 16 4 5 21 1 4 5 4 38 7 6 23 8 0 3 3 6 5 17 4 4 16 4 5 21 1 4 5 4 38 9 6 23 8 0 4 3 6 1 2 23 10 0 2 1 3 11 0 1) #(0 22 27 32 49 70) #(GLOBAL-MORAL-PLOT-PROTO NIL MORAL-PLOT-PROTO MAKE-OBJECT LISTP LIST APPLY :ADD-SLOT SEND :MAKE-PROTOTYPE SET) 0 NIL)
#K(#(80 1 1 0 0 25 1 0 1 1) #(0) #((PROGN #K(#(80 1 3 0 1 2 2 38 3 4 23 4 5 1 3 25 5 0 4 4 2 5 1) #(0) #("Method args: nil
Redraws the moral graph plot." :REDRAW #K(#(80 2 7 0 1 2 3 4 5 6 8 23 7 0 1 8 38 8 9 38 9 10 23 10 9 3 7 9 10 69 6 5 1 2 70 57 0 49 6 9 0 56 6 3 11 11 1 1 38 6 12 21 0 4 5 12 38 6 12 25 11 11 1 12 11 11 4 38 12 12 23 13 0 2 1 12 62 3 12 16 12 13 21 1 7 8 12 38 14 14 23 13 0 3 1 14 13 17 12 12 16 12 13 21 1 7 8 12 62 3 14 16 14 15 21 1 9 10 14 38 15 16 23 13 0 3 1 16 15 17 14 14 16 14 15 21 1 9 10 14 38 6 16 25 16 11 2 16 2) #(0 34 37 48 56 64 67 87 108 119 140) #("
$BlinEnd
rs
" NODES NIL T (*EPS-STREAM*) "gmpw.eps" *EPS-STREAM* MARK-AS-SPECIAL :DIRECTION :OUTPUT OPEN CLOSE :ERASE-WINDOW SEND :PLOT-ARCS :PLOT-NODE FORMAT) 0 NIL) GLOBAL-MORAL-PLOT-PROTO BYTE-CODE-CLOSE XLISP::ADD-METHOD) 0 NIL) #K(#(80 1 1 0 0 11 0 1) #(0) #(:REDRAW) 0 NIL)) EVAL) 0 NIL)
#K(#(80 1 1 0 0 25 1 0 1 1) #(0) #((PROGN #K(#(80 1 3 0 1 2 2 38 3 4 23 4 5 1 3 25 5 0 4 4 2 5 1) #(0) #("Method args: (node)
Draws the given node." :PLOT-NODE #K(#(80 3 14 0 1 2 3 4 5 6 7 8 9 10 11 12 13 12 23 14 17 1 2 38 15 18 23 16 17 2 17 18 38 17 18 23 16 17 3 1 18 17 16 17 18 71 2 2 17 19 38 18 20 23 16 20 3 1 20 16 39 19 21 23 14 22 1 2 38 18 23 23 16 22 3 22 23 15 23 20 22 1 22 23 21 22 1 22 2 45 14 22 22 23 22 21 3 21 22 13 23 23 21 1 21 38 24 22 23 16 0 3 1 22 12 38 25 22 2 45 18 20 23 2 45 19 20 24 2 42 11 20 25 2 42 11 20 26 23 16 0 6 1 22 23 24 25 26 38 26 22 23 16 22 2 1 22 21 0 1 5 22 38 27 23 23 14 24 1 2 38 18 25 23 16 24 3 24 25 7 16 24 24 23 16 23 3 1 23 24 2 42 6 23 23 23 28 23 1 23 37 62 2 3 23 13 38 24 24 23 16 0 3 1 24 3 38 29 24 2 45 18 20 25 2 45 19 20 26 2 42 11 20 27 2 42 11 20 28 23 16 0 8 1 24 25 26 27 28 4 23 37 76 4 5 23 13 38 24 24 23 16 0 3 1 24 5 38 29 24 2 45 18 20 25 2 45 19 20 26 2 42 11 20 27 2 42 11 20 28 23 16 0 8 1 24 25 26 27 28 4 23 23 20 21 1 21 16 21 21 2 42 20 21 21 23 28 21 1 21 38 24 22 23 16 0 3 1 22 10 38 25 22 2 45 18 21 23 2 45 19 21 24 2 42 11 21 25 2 42 11 21 26 23 16 0 6 1 22 23 24 25 26 38 24 21 23 16 0 3 1 21 9 38 30 21 23 16 21 2 1 21 21 0 6 7 21 38 31 21 23 14 22 1 2 38 32 23 23 16 22 2 22 23 2 43 19 20 23 25 16 0 7 1 21 22 18 23 14 14 11 0 8) #(0 162 206 251 257 302 387 420) #(RED 90 BLUE 180 GLOBAL-SIZE-RATIOS NIL OUTLINE NODE 2 NODE-BACK 0 1 RESOLUTIONS RADIUS SYMBOL-VALUE :LOCATION SEND :S-TO-R :SLOT-VALUE MAX REVERSE CUMSUM MAP-ELEMENTS SQRT :DRAW-COLOR :PAINT-OVAL :DIAGNOSTICS :SR-MAP ROUND :PAINT-ARC :NODE-LABELS :DRAW-TEXT :PRINT-NAME) 0 NIL) GLOBAL-MORAL-PLOT-PROTO BYTE-CODE-CLOSE XLISP::ADD-METHOD) 0 NIL) #K(#(80 1 1 0 0 11 0 1) #(0) #(:PLOT-NODE) 0 NIL)) EVAL) 0 NIL)
#K(#(80 1 1 0 0 25 1 0 1 1) #(0) #((PROGN #K(#(80 1 3 0 1 2 2 38 3 4 23 4 5 1 3 25 5 0 4 4 2 5 1) #(0) #(NIL :ERASE-WINDOW #K(#(80 2 6 0 1 2 3 4 5 3 38 6 8 23 7 0 2 8 7 38 6 8 38 8 9 23 9 9 3 1 9 6 38 8 10 23 9 10 3 1 10 6 23 7 0 4 8 5 9 10 38 6 8 23 7 0 2 8 4 38 6 8 38 8 9 23 9 9 3 1 9 6 23 7 0 3 8 3 9 38 6 8 23 7 0 2 8 2 25 10 0 0) #(0) #("
1 -1 scale

/cp {closepath} bind def
/ef {eofill} bind def
/gr {grestore} bind def
/gs {gsave} bind def
/sa {save} bind def
/rs {restore} bind def
/l {lineto} bind def
/m {moveto} bind def
/rm {rmoveto} bind def
/n {newpath} bind def
/s {stroke} bind def
/sh {show} bind def
/slc {setlinecap} bind def
/slj {setlinejoin} bind def
/slw {setlinewidth} bind def
/srgb {setrgbcolor} bind def
/rot {rotate} bind def
/sc {scale} bind def
/sd {setdash} bind def
/ff {findfont} bind def
/sf {setfont} bind def
/scf {scalefont} bind def
/sw {stringwidth} bind def
/tr {translate} bind def
/tnt {dup dup currentrgbcolor
  4 -2 roll dup 1 exch sub 3 -1 roll mul add
  4 -2 roll dup 1 exch sub 3 -1 roll mul add
  4 -2 roll dup 1 exch sub 3 -1 roll mul add srgb}
  bind def
/shd {dup dup currentrgbcolor 4 -2 roll mul 4 -2 roll mul
  4 -2 roll mul srgb} bind def
 /DrawEllipse {
        /endangle exch def
        /startangle exch def
        /yrad exch def
        /xrad exch def
        /y exch def
        /x exch def
        /savematrix mtrx currentmatrix def
        x y tr xrad yrad sc 0 0 1 startangle endangle arc
        closepath
        savematrix setmatrix
        } def

/$BlinBegin {$BlinDict begin /$BlinEnteredState save def} def
/$BlinEnd {$BlinEnteredState restore end} def
%%EndProlog

$BlinBegin

/dl {n m l s} bind def
/sg {setgray} bind def
/f {fill} bind def

% /ArialMT findfont 14 scalefont setfont
/Helvetica-Bold findfont 16 scalefont setfont

" "~&0 ~a translate" "~&%%Creator: BAYES-LIN
%%Orientation: Portrait
%%Pages: 0
%%EndComments

/$BlinDict 200 dict def
$BlinDict begin
$BlinDict /mtrx matrix put

end
save" "~&%%BoundingBox: 0 0 ~a ~a" REAL-SIZE "~&%!PS-Adobe-3.0 EPSF-3.0" *EPS-STREAM* FORMAT :SLOT-VALUE SEND CALL-NEXT-METHOD) 0 NIL) MORAL-PLOT-PROTO BYTE-CODE-CLOSE XLISP::ADD-METHOD) 0 NIL) #K(#(80 1 1 0 0 11 0 1) #(0) #(:ERASE-WINDOW) 0 NIL)) EVAL) 0 NIL)
#K(#(80 1 1 0 0 25 1 0 1 1) #(0) #((PROGN #K(#(80 1 3 0 1 2 2 38 3 4 23 4 5 1 3 25 5 0 4 4 2 5 1) #(0) #(NIL :DRAW-LINE #K(#(80 6 2 0 1 1 38 2 8 23 3 0 6 8 7 2 3 4 5 38 2 8 23 3 0 6 8 6 2 3 4 5 25 4 0 4 2 3 4 5) #(0) #("~&~a ~a ~a ~a dl" "~&% :draw-line ~a ~a ~a ~a" *EPS-STREAM* FORMAT CALL-NEXT-METHOD) 0 NIL) MORAL-PLOT-PROTO BYTE-CODE-CLOSE XLISP::ADD-METHOD) 0 NIL) #K(#(80 1 1 0 0 11 0 1) #(0) #(:DRAW-LINE) 0 NIL)) EVAL) 0 NIL)
#K(#(80 1 1 0 0 25 1 0 1 1) #(0) #((PROGN #K(#(80 1 3 0 1 2 2 38 3 4 23 4 5 1 3 25 5 0 4 4 2 5 1) #(0) #(NIL :PAINT-OVAL #K(#(80 6 5 0 1 2 3 4 5 38 5 11 23 6 0 6 11 10 2 3 4 5 38 5 11 2 47 4 9 12 23 7 12 1 12 2 43 2 12 12 2 47 5 9 13 23 7 13 1 13 2 43 3 13 13 2 47 4 9 14 23 7 14 1 14 2 47 5 9 15 23 7 15 1 15 23 6 0 8 11 8 12 13 14 15 7 6 25 8 0 4 2 3 4 5) #(0) #(360 0 "~&n ~a ~a ~a ~a ~a ~a DrawEllipse f" 2 "~&% :paint-oval ~a ~a ~a ~a" *EPS-STREAM* FORMAT ROUND CALL-NEXT-METHOD) 0 NIL) MORAL-PLOT-PROTO BYTE-CODE-CLOSE XLISP::ADD-METHOD) 0 NIL) #K(#(80 1 1 0 0 11 0 1) #(0) #(:PAINT-OVAL) 0 NIL)) EVAL) 0 NIL)
#K(#(80 1 1 0 0 25 1 0 1 1) #(0) #((PROGN #K(#(80 1 3 0 1 2 2 38 3 4 23 4 5 1 3 25 5 0 4 4 2 5 1) #(0) #(NIL :PAINT-ARC #K(#(80 8 6 0 1 2 3 4 5 7 38 6 14 23 7 0 8 14 13 2 3 4 5 6 7 38 6 14 2 47 4 12 15 23 8 15 1 15 2 43 2 15 15 2 47 5 12 16 23 8 16 1 16 2 43 3 16 16 23 7 0 4 14 11 15 16 37 62 1 2 7 10 38 6 14 2 47 4 12 15 23 8 15 1 15 2 43 2 15 15 2 47 5 12 16 23 8 16 1 16 2 43 3 16 16 2 47 4 12 17 23 8 17 1 17 2 47 5 12 18 23 8 18 1 18 2 45 6 7 19 2 43 9 19 19 2 43 9 6 20 23 7 0 8 14 8 15 16 17 18 19 20 1 3 38 6 14 2 47 4 12 15 23 8 15 1 15 2 43 2 15 15 2 47 5 12 16 23 8 16 1 16 2 43 3 16 16 2 47 4 12 17 23 8 17 1 17 2 47 5 12 18 23 8 18 1 18 2 43 9 6 19 2 45 6 7 20 2 43 9 20 20 23 7 0 8 14 8 15 16 17 18 19 20 25 9 0 6 2 3 4 5 6 7) #(0 72 154 234) #("~&~a ~a ~a ~a ~a ~a DrawEllipse f" 180 0 "~&n ~a ~a m" 2 "~&% :paint-arc ~a ~a ~a ~a ~a ~a" *EPS-STREAM* FORMAT ROUND CALL-NEXT-METHOD) 0 NIL) MORAL-PLOT-PROTO BYTE-CODE-CLOSE XLISP::ADD-METHOD) 0 NIL) #K(#(80 1 1 0 0 11 0 1) #(0) #(:PAINT-ARC) 0 NIL)) EVAL) 0 NIL)
#K(#(80 1 1 0 0 25 1 0 1 1) #(0) #((PROGN #K(#(80 1 3 0 1 2 2 38 3 4 23 4 5 1 3 25 5 0 4 4 2 5 1) #(0) #(NIL :FRAME-OVAL #K(#(80 6 5 0 1 2 3 4 5 38 5 11 23 6 0 6 11 10 2 3 4 5 38 5 11 2 47 4 9 12 23 7 12 1 12 2 43 2 12 12 2 47 5 9 13 23 7 13 1 13 2 43 3 13 13 2 47 4 9 14 23 7 14 1 14 2 47 5 9 15 23 7 15 1 15 23 6 0 8 11 8 12 13 14 15 7 6 25 8 0 4 2 3 4 5) #(0) #(360 0 "~&n ~a ~a ~a ~a ~a ~a DrawEllipse s" 2 "~&% :frame-oval ~a ~a ~a ~a" *EPS-STREAM* FORMAT ROUND CALL-NEXT-METHOD) 0 NIL) MORAL-PLOT-PROTO BYTE-CODE-CLOSE XLISP::ADD-METHOD) 0 NIL) #K(#(80 1 1 0 0 11 0 1) #(0) #(:FRAME-OVAL) 0 NIL)) EVAL) 0 NIL)
#K(#(80 1 1 0 0 25 1 0 1 1) #(0) #((PROGN #K(#(80 1 3 0 1 2 2 38 3 4 23 4 5 1 3 25 5 0 4 4 2 5 1) #(0) #(NIL :DRAW-STRING #K(#(80 5 2 0 1 1 38 2 7 23 3 0 5 7 6 2 3 4 38 2 7 23 3 0 5 7 5 3 4 2 25 4 0 3 2 3 4) #(0) #("~&n ~a ~a m (~a) show" "~&% :draw-string ~a ~a ~a" *EPS-STREAM* FORMAT CALL-NEXT-METHOD) 0 NIL) MORAL-PLOT-PROTO BYTE-CODE-CLOSE XLISP::ADD-METHOD) 0 NIL) #K(#(80 1 1 0 0 11 0 1) #(0) #(:DRAW-STRING) 0 NIL)) EVAL) 0 NIL)
#K(#(80 1 1 0 0 25 1 0 1 1) #(0) #((PROGN #K(#(80 1 3 0 1 2 2 38 3 4 23 4 5 1 3 25 5 0 4 4 2 5 1) #(0) #(NIL :DRAW-TEXT #K(#(80 7 6 0 1 2 3 4 5 3 38 6 13 23 7 0 5 13 12 2 3 4 0 4 13 0 3 14 60 5 8 3 2 1 1 4 38 8 15 23 9 15 3 1 15 2 2 45 3 15 14 1 4 38 8 15 23 9 15 3 1 15 2 2 47 15 7 15 23 10 15 1 15 2 45 3 15 14 37 61 5 6 6 10 38 11 15 23 9 15 2 1 15 2 43 4 15 13 38 6 15 23 7 0 5 15 11 14 13 2 25 12 0 5 2 3 4 5 6) #(0 34 36 53 78 84 98) #(2 #(1 2) NIL 1 "~&n ~a ~a m gs 1 -1 sc (~a) sh gr" "~&% :draw-string ~a ~a ~a" *EPS-STREAM* FORMAT :TEXT-WIDTH SEND ROUND :TEXT-ASCENT CALL-NEXT-METHOD) 0 NIL) MORAL-PLOT-PROTO BYTE-CODE-CLOSE XLISP::ADD-METHOD) 0 NIL) #K(#(80 1 1 0 0 11 0 1) #(0) #(:DRAW-TEXT) 0 NIL)) EVAL) 0 NIL)
#K(#(80 1 1 0 0 25 1 0 1 1) #(0) #((PROGN #K(#(80 1 3 0 1 2 2 38 3 4 23 4 5 1 3 25 5 0 4 4 2 5 1) #(0) #(NIL :LINE-WIDTH #K(#(77 1 2 1 3 3 0 1 2 2 21 0 1 2 2 38 4 6 23 5 6 3 6 4 2 38 4 7 23 5 7 3 7 3 2 23 6 0 2 6 7 21 0 3 4 2 25 7 0 1 2 25 7 0 0) #(0 15 41 46 51) #("~&~a slw" "~&% :line-width ~a" NIL #(NIL) *EPS-STREAM* FORMAT LIST CALL-NEXT-METHOD) 0 NIL) MORAL-PLOT-PROTO BYTE-CODE-CLOSE XLISP::ADD-METHOD) 0 NIL) #K(#(80 1 1 0 0 11 0 1) #(0) #(:LINE-WIDTH) 0 NIL)) EVAL) 0 NIL)
#K(#(80 1 1 0 0 25 1 0 1 1) #(0) #((PROGN #K(#(80 1 3 0 1 2 2 38 3 4 23 4 5 1 3 25 5 0 4 4 2 5 1) #(0) #(NIL :GRAY-DRAW-COLOR #K(#(77 1 2 1 20 20 0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 2 21 0 1 20 2 38 21 23 23 22 23 3 23 21 2 60 2 20 18 17 16 15 14 13 12 11 10 9 8 7 6 5 4 3 2 0 22 24 1 19 38 21 24 23 22 24 3 24 19 18 1 19 38 21 24 23 22 24 3 24 19 17 1 19 38 21 24 23 22 24 3 24 19 16 1 19 38 21 24 23 22 24 3 24 19 15 1 19 38 21 24 23 22 24 3 24 19 14 1 19 38 21 24 23 22 24 3 24 19 13 1 19 38 21 24 23 22 24 3 24 19 12 1 19 38 21 24 23 22 24 3 24 19 11 1 19 38 21 24 23 22 24 3 24 19 10 1 19 38 21 24 23 22 24 3 24 19 9 1 19 38 21 24 23 22 24 2 24 8 1 19 38 21 24 23 22 24 2 24 7 1 19 38 21 24 23 22 24 2 24 6 1 19 38 21 24 23 22 24 2 24 5 1 19 38 21 24 23 22 24 2 24 4 1 19 38 21 24 23 22 24 2 24 3 23 23 0 2 23 24 21 0 21 22 2 25 24 0 1 2 25 24 0 0) #(0 32 62 67 79 91 103 115 127 139 151 163 175 187 198 209 220 231 242 251 257 262 267) #("~&0.8 sg" "~&0.1 sg" "~&0.9 sg" "~&0.0 sg" "~&0.2 sg" "~&0.5 sg" 0.8125 0.875 0.78125 0.9375 0.84375 0.96875 0.90625 0.75 0.890625 0.796875 "~&~a sg" #(ARC NODE NODE-BACK OUTLINE RED BLUE \0 \1 \2 \3 \4 \5 \6 \7 \8 \9) "~&% :draw-color ~a" NIL #(NIL) *EPS-STREAM* FORMAT LIST CALL-NEXT-METHOD) 0 NIL) MORAL-PLOT-PROTO BYTE-CODE-CLOSE XLISP::ADD-METHOD) 0 NIL) #K(#(80 1 1 0 0 11 0 1) #(0) #(:GRAY-DRAW-COLOR) 0 NIL)) EVAL) 0 NIL)
#K(#(80 1 1 0 0 25 1 0 1 1) #(0) #((PROGN #K(#(80 1 3 0 1 2 2 38 3 4 23 4 5 1 3 25 5 0 4 4 2 5 1) #(0) #(NIL :DRAW-COLOR #K(#(77 1 2 1 16 16 0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 2 21 0 1 20 2 38 17 19 23 18 19 3 19 17 2 60 2 16 18 17 16 15 14 13 12 11 10 9 8 7 6 5 4 3 2 38 17 20 23 18 20 2 20 15 1 19 38 17 20 23 18 20 2 20 14 1 19 38 17 20 23 18 20 2 20 14 1 19 38 17 20 23 18 20 2 20 14 1 19 38 17 20 23 18 20 2 20 14 1 19 38 17 20 23 18 20 2 20 13 1 19 38 17 20 23 18 20 2 20 12 1 19 38 17 20 23 18 20 2 20 11 1 19 38 17 20 23 18 20 2 20 10 1 19 38 17 20 23 18 20 2 20 14 1 19 38 17 20 23 18 20 2 20 9 1 19 38 17 20 23 18 20 2 20 8 1 19 38 17 20 23 18 20 2 20 7 1 19 38 17 20 23 18 20 2 20 6 1 19 38 17 20 23 18 20 2 20 5 1 19 38 17 20 23 18 20 2 20 4 1 19 38 17 20 23 18 20 2 20 3 23 19 0 2 19 20 21 0 21 22 2 25 20 0 1 2 25 20 0 0) #(0 28 58 69 80 91 102 113 124 135 146 157 168 179 190 201 212 223 234 243 249 254 259) #("~&0.8 sg" "~&0.1 sg" "~&0.9 0.9 0.9 srgb" "~&0 0 0 srgb" "~&1 0 0 srgb" "~&0 0 1 srgb" "~&0.8 0.8 1 srgb" "~&0.8 1 0.8 srgb" "~&1 1 0.7 srgb" "~&1 0.7 1 srgb" "~&0.7 1 1 srgb" "~&1 0.8 0.8 srgb" "~&0.6 0.6 0.6 srgb" #(ARC NODE NODE-BACK OUTLINE RED BLUE \0 \1 \2 \3 \4 \5 \6 \7 \8 \9) "~&% :draw-color ~a" NIL #(NIL) *EPS-STREAM* FORMAT LIST CALL-NEXT-METHOD) 0 NIL) MORAL-PLOT-PROTO BYTE-CODE-CLOSE XLISP::ADD-METHOD) 0 NIL) #K(#(80 1 1 0 0 11 0 1) #(0) #(:DRAW-COLOR) 0 NIL)) EVAL) 0 NIL)
