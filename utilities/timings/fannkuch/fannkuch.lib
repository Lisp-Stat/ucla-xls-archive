
(PROGN (SYSTEM::C-DEFUN 'FANNKUCH-0))
(PROGN (SYSTEM::C-DEFUN 'FANNKUCH-1))
(PROGN (SYSTEM::C-DEFUN 'FANNKUCH-2))
(PROGN (SYSTEM::C-PROCLAIM '(SPECIAL COUNTERS)))
(PROGN (DEFPARAMETER N-COUNTERS 0.)
 (DEFMACRO COUNTER NIL
  (LET
   ((RESULT
     `(SETF (SVREF COUNTERS ,N-COUNTERS)
       (THE FIXNUM (1+ (THE FIXNUM (SVREF COUNTERS ,N-COUNTERS))))
   )) )
   (INCF N-COUNTERS) RESULT
)))
(PROGN (SYSTEM::C-DEFUN 'ZERO-COUNTERS))
(PROGN (SYSTEM::C-DEFUN 'COUNTER-REPORT))
(PROGN (DEFTYPE SMALL NIL '(INTEGER 0. 101.)))
(PROGN
 (LET NIL
  (SYSTEM::%PUT 'SMALL 'SYSTEM::DEFTYPE-EXPANDER
   (FUNCTION #:DEFTYPE-SMALL
    (LAMBDA (SYSTEM::<DEFTYPE-FORM>)
     (BLOCK SMALL
      (IF (> (LENGTH SYSTEM::<DEFTYPE-FORM>) 1.)
       (SYSTEM::TYPE-CALL-ERROR SYSTEM::<DEFTYPE-FORM>)
       (LET* NIL '(INTEGER 0. 101.))
  )))))
  (SETF (DOCUMENTATION 'SMALL 'TYPE) 'NIL) 'SMALL
))
(PROGN (SYSTEM::REMOVE-OLD-DEFINITIONS 'SMALL)
 (SYSTEM::%PUTD 'SMALL
  (CONS 'SYSTEM::MACRO
   (FUNCTION SMALL
    (LAMBDA (SYSTEM::<MACRO-FORM> &OPTIONAL SYSTEM::<ENV-ARG>)
     (DECLARE (CONS SYSTEM::<MACRO-FORM>)) (DECLARE (IGNORE SYSTEM::<ENV-ARG>))
     (BLOCK SMALL
      (IF (/= (LENGTH SYSTEM::<MACRO-FORM>) 2.)
       (SYSTEM::MACRO-CALL-ERROR SYSTEM::<MACRO-FORM>)
       (LET* ((A (CADR SYSTEM::<MACRO-FORM>))) `(THE SMALL ,A))
)))))))
(PROGN (SYSTEM::REMOVE-OLD-DEFINITIONS 'S+)
 (SYSTEM::%PUTD 'S+
  (CONS 'SYSTEM::MACRO
   (FUNCTION S+
    (LAMBDA (SYSTEM::<MACRO-FORM> &OPTIONAL SYSTEM::<ENV-ARG>)
     (DECLARE (CONS SYSTEM::<MACRO-FORM>)) (DECLARE (IGNORE SYSTEM::<ENV-ARG>))
     (BLOCK S+
      (IF (/= (LENGTH SYSTEM::<MACRO-FORM>) 3.)
       (SYSTEM::MACRO-CALL-ERROR SYSTEM::<MACRO-FORM>)
       (LET* ((A (CADR . #1=(SYSTEM::<MACRO-FORM>))) (B (CADDR . #1#)))
        `(SMALL (+ (SMALL ,A) (SMALL ,B)))
))))))))
(PROGN (SYSTEM::REMOVE-OLD-DEFINITIONS 'S-)
 (SYSTEM::%PUTD 'S-
  (CONS 'SYSTEM::MACRO
   (FUNCTION S-
    (LAMBDA (SYSTEM::<MACRO-FORM> &OPTIONAL SYSTEM::<ENV-ARG>)
     (DECLARE (CONS SYSTEM::<MACRO-FORM>)) (DECLARE (IGNORE SYSTEM::<ENV-ARG>))
     (BLOCK S-
      (IF (/= (LENGTH SYSTEM::<MACRO-FORM>) 3.)
       (SYSTEM::MACRO-CALL-ERROR SYSTEM::<MACRO-FORM>)
       (LET* ((A (CADR . #1=(SYSTEM::<MACRO-FORM>))) (B (CADDR . #1#)))
        `(SMALL (- (SMALL ,A) (SMALL ,B)))
))))))))
(PROGN (SYSTEM::REMOVE-OLD-DEFINITIONS 'S>)
 (SYSTEM::%PUTD 'S>
  (CONS 'SYSTEM::MACRO
   (FUNCTION S>
    (LAMBDA (SYSTEM::<MACRO-FORM> &OPTIONAL SYSTEM::<ENV-ARG>)
     (DECLARE (CONS SYSTEM::<MACRO-FORM>)) (DECLARE (IGNORE SYSTEM::<ENV-ARG>))
     (BLOCK S>
      (IF (/= (LENGTH SYSTEM::<MACRO-FORM>) 3.)
       (SYSTEM::MACRO-CALL-ERROR SYSTEM::<MACRO-FORM>)
       (LET* ((A (CADR . #1=(SYSTEM::<MACRO-FORM>))) (B (CADDR . #1#)))
        `(> (SMALL ,A) (SMALL ,B))
))))))))
(PROGN (SYSTEM::REMOVE-OLD-DEFINITIONS 'S=)
 (SYSTEM::%PUTD 'S=
  (CONS 'SYSTEM::MACRO
   (FUNCTION S=
    (LAMBDA (SYSTEM::<MACRO-FORM> &OPTIONAL SYSTEM::<ENV-ARG>)
     (DECLARE (CONS SYSTEM::<MACRO-FORM>)) (DECLARE (IGNORE SYSTEM::<ENV-ARG>))
     (BLOCK S=
      (IF (/= (LENGTH SYSTEM::<MACRO-FORM>) 3.)
       (SYSTEM::MACRO-CALL-ERROR SYSTEM::<MACRO-FORM>)
       (LET* ((A (CADR . #1=(SYSTEM::<MACRO-FORM>))) (B (CADDR . #1#)))
        `(= (SMALL ,A) (SMALL ,B))
))))))))
(PROGN (SYSTEM::REMOVE-OLD-DEFINITIONS 'SREF)
 (SYSTEM::%PUTD 'SREF
  (CONS 'SYSTEM::MACRO
   (FUNCTION SREF
    (LAMBDA (SYSTEM::<MACRO-FORM> &OPTIONAL SYSTEM::<ENV-ARG>)
     (DECLARE (CONS SYSTEM::<MACRO-FORM>)) (DECLARE (IGNORE SYSTEM::<ENV-ARG>))
     (BLOCK SREF
      (IF (/= (LENGTH SYSTEM::<MACRO-FORM>) 3.)
       (SYSTEM::MACRO-CALL-ERROR SYSTEM::<MACRO-FORM>)
       (LET* ((A (CADR . #1=(SYSTEM::<MACRO-FORM>))) (I (CADDR . #1#)))
        `(SMALL (SVREF ,A ,I))
))))))))
(PROGN (SYSTEM::REMOVE-OLD-DEFINITIONS 'SETFS)
 (SYSTEM::%PUTD 'SETFS
  (CONS 'SYSTEM::MACRO
   (FUNCTION SETFS
    (LAMBDA (SYSTEM::<MACRO-FORM> &OPTIONAL SYSTEM::<ENV-ARG>)
     (DECLARE (CONS SYSTEM::<MACRO-FORM>)) (DECLARE (IGNORE SYSTEM::<ENV-ARG>))
     (BLOCK SETFS
      (IF (/= (LENGTH SYSTEM::<MACRO-FORM>) 3.)
       (SYSTEM::MACRO-CALL-ERROR SYSTEM::<MACRO-FORM>)
       (LET* ((A (CADR . #1=(SYSTEM::<MACRO-FORM>))) (B (CADDR . #1#)))
        `(SETF ,A (SMALL ,B))
))))))))
(PROGN (SYSTEM::REMOVE-OLD-DEFINITIONS 'DOTIMESS)
 (SYSTEM::%PUTD 'DOTIMESS
  (CONS 'SYSTEM::MACRO
   (FUNCTION DOTIMESS
    (LAMBDA (SYSTEM::<MACRO-FORM> &OPTIONAL SYSTEM::<ENV-ARG>)
     (DECLARE (CONS SYSTEM::<MACRO-FORM>)) (DECLARE (IGNORE SYSTEM::<ENV-ARG>))
     (BLOCK DOTIMESS
      (IF (< (LENGTH SYSTEM::<MACRO-FORM>) 2.)
       (SYSTEM::MACRO-CALL-ERROR SYSTEM::<MACRO-FORM>)
       (LET*
        ((I (CAADR . #1=(SYSTEM::<MACRO-FORM>))) (N (CADADR . #1#))
         (BODY (CDDR . #1#))
        )
        `(DOTIMES (,I ,N) (DECLARE (TYPE SMALL ,I)) ,@BODY)
))))))))
(PROGN (SYSTEM::C-DEFUN 'FANNKUCH-10))
(PROGN (SYSTEM::C-DEFUN 'COUNT-FLIPS))
(PROGN (SYSTEM::C-DEFUN 'NEXT-PERMUTATION))
(PROGN (SYSTEM::C-DEFUN 'FANNKUCH-11))
(PROGN (SYSTEM::C-DEFUN 'F))
(PROGN (SYSTEM::C-DEFUN 'FANNKUCH-BENCHMARK))
(PROGN (SYSTEM::C-DEFUN 'FILL-I))
(PROGN (SYSTEM::C-DEFUN 'SHIFT))
(PROGN (SYSTEM::C-DEFUN 'KREUZ-LOOP))
(PROGN (SYSTEM::C-DEFUN 'SVCOPY))
(PROGN (SYSTEM::C-DEFUN 'FLIP))