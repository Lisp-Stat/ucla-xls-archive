These files demonstrate how to load functions written in C into Lisp-Statand then call them.  A simple example (poisson.lsp) illustrates how to usethe code.  The example invokes two functions from C which are in the samecode fragment.On the Lisp side, things are handled by the *code-manager* defined incoderes.lsp.  It uses a simple association list to connect various codefiles with symbolic names.  You'll have to set the file names for your systemappropriately.  The various C functions are called using call-cfun.  The code included in sharedlib.c and macdynload.c alter the internal lisp functionload-code-resource that is in the standard version of Lisp-Stat so that it willload a code fragment instead of a code resource.  Code fragments are allowed to have multiple entry points, just as done with unix link modules.  I have donethis with version 3.44 of LS, but was not able (did not try too hard) to do itwith 3.47.On the C side, you need to make sure that Code Warrior (or whatever) knowsto export the desired symbols when it builds the shared library.  This stuffrequires the code fragment manager. As to programming style, I tend to do most messy things in Lisp.  One can,however, do malloc's and such on the C side.  Make sure that you clean thingsup as you can spawn a killer memory leak by not being careful.  I have notexperimented with the C-type arrays in lisp.  Use of these should make callingC faster since then data will not be copied back and forth, and a pointerwould be all that would need to be moved.