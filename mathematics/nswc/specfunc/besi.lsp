(defun besi (x alpha kode n y nz) (declare (type float x))
 (declare (type float alpha)) (declare (type fixnum kode))
 (declare (type fixnum n)) (declare (type (simple-array double-float (*)) y))
 (declare (type fixnum nz))
 (prog
  ((gamln 0.0d0) (spmpar 0.0d0) (ain 0.0d0) (ak 0.0d0) (akm 0.0d0) (ans 0.0d0)
   (ap 0.0d0) (arg 0.0d0) (atol 0.0d0) (tolln 0.0d0) (dfn 0.0d0) (dtm 0.0d0)
   (dx 0.0d0) (earg 0.0d0) (elim 0.0d0) (etx 0.0d0) (flgik 0.0d0) (fn 0.0d0)
   (fnf 0.0d0) (fni 0.0d0) (fnp1 0.0d0) (fnu 0.0d0) (gln 0.0d0) (ra 0.0d0)
   (rttpi 0.0d0) (s 0.0d0) (sx 0.0d0) (sxo2 0.0d0) (s1 0.0d0) (s2 0.0d0)
   (t_ 0.0d0) (ta 0.0d0) (tb 0.0d0)
   (temp (make-array '(3) :element-type 'double-float)) (tfn 0.0d0) (tm 0.0d0)
   (tol 0.0d0) (trx 0.0d0) (t2 0.0d0) (xo2 0.0d0) (xo2l 0.0d0) (z 0.0d0)
   (ipmpar 0) (i 0) (ialp 0) (in 0) (inlim 0) (is 0) (i1 0) (i2 0) (k 0) (kk 0)
   (km 0) (kt 0) (nn 0) (ns 0) (e 0.0d0)
  )
  (declare (type float gamln)) (declare (type float spmpar))
  (declare (type float ain)) (declare (type float ak))
  (declare (type float akm)) (declare (type float ans))
  (declare (type float ap)) (declare (type float arg))
  (declare (type float atol)) (declare (type float tolln))
  (declare (type float dfn)) (declare (type float dtm))
  (declare (type float dx)) (declare (type float earg))
  (declare (type float elim)) (declare (type float etx))
  (declare (type float flgik)) (declare (type float fn))
  (declare (type float fnf)) (declare (type float fni))
  (declare (type float fnp1)) (declare (type float fnu))
  (declare (type float gln)) (declare (type float ra))
  (declare (type float rttpi)) (declare (type float s))
  (declare (type float sx)) (declare (type float sxo2))
  (declare (type float s1)) (declare (type float s2)) (declare (type float t_))
  (declare (type float ta)) (declare (type float tb))
  (declare (type (simple-array double-float (*)) temp))
  (declare (type float tfn)) (declare (type float tm))
  (declare (type float tol)) (declare (type float trx))
  (declare (type float t2)) (declare (type float xo2))
  (declare (type float xo2l)) (declare (type float z))
  (declare (type fixnum ipmpar)) (declare (type fixnum i))
  (declare (type fixnum ialp)) (declare (type fixnum in))
  (declare (type fixnum inlim)) (declare (type fixnum is))
  (declare (type fixnum i1)) (declare (type fixnum i2))
  (declare (type fixnum k)) (declare (type fixnum kk))
  (declare (type fixnum km)) (declare (type fixnum kt))
  (declare (type fixnum nn)) (declare (type fixnum ns))
  (declare (type double-float e)) (setq rttpi 0.3989423) (setq inlim 80)
  (setf tb (ipmpar 4)) (setf ta (/ (spmpar 1) tb)) (if (= tb 2.0) (go label1))
  (if (= tb 8.0) (go label2)) (if (= tb 16.0) (go label3)) (setf tb (alog tb))
  (go label5) label1 (setf tb 0.69315) (go label5) label2 (setf tb 2.07944)
  (go label5) label3 (setf tb 2.77259) label5 (setf tol (amax1 ta 1.0E-15))
  (setf i1 (ipmpar 5)) (setf i2 (ipmpar 6))
  (setf elim (+ (* (float (- i2)) tb) (- 6.90776)))
  (setf tolln (* (float i1) tb)) (setf tolln (amin1 tolln 34.5388)) (setf nz 0)
  (setf kt 1)
  (arithmetic-if (+ n (- 1)) (go label590) (go label10) (go label20)) label10
  (setf kt 2) label20 (setf nn n) (if (or (< kode 1) (> kode 2)) (go label570))
  (arithmetic-if x (go label600) (go label30) (go label80)) label30
  (arithmetic-if alpha (go label580) (go label40) (go label50)) label40
  (fset (fref y 1) 1.0) (if (= n 1) (go end_label)) (setf i1 2) (go label60)
  label50 (setf i1 1) label60
  (fdo ((i i1 (+ i 1))) ((> i n) nil) (tagbody (fset (fref y i) 0.0)))
  (go end_label) label80 (if (< alpha 0.0) (go label580))
  (setf ialp (int alpha)) (setf fni (float (+ (+ ialp n) (- 1))))
  (setf fnf (+ alpha (- (float ialp)))) (setf dfn (+ fni fnf)) (setf fnu dfn)
  (setf in 0) (setf xo2 (* x 0.5)) (setf sxo2 (* xo2 xo2))
  (setf etx (float (+ kode (- 1)))) (setf sx (* etx x))
  (if (<= sxo2 (+ fnu 1.0)) (go label90)) (if (<= x 12.0) (go label110))
  (setf fn (* (* 0.55 fnu) fnu)) (setf fn (amax1 17.0 fn))
  (if (>= x fn) (go label430)) (setf ans (amax1 (+ 36.0 (- fnu)) 0.0))
  (setf ns (int ans)) (setf fni (+ fni (float ns))) (setf dfn (+ fni fnf))
  (setf fn dfn) (setf is kt) (setf km (+ (+ n (- 1)) ns))
  (if (> km 0) (setf is 3)) (go label120) label90 (setf fn fnu)
  (setf fnp1 (+ fn 1.0)) (setf xo2l (alog xo2)) (setf is kt)
  (if (<= x 0.5) (go label230)) (setf ns 0) label100
  (setf fni (+ fni (float ns))) (setf dfn (+ fni fnf)) (setf fn dfn)
  (setf fnp1 (+ fn 1.0)) (setf is kt) (if (> (+ (+ n (- 1)) ns) 0) (setf is 3))
  (go label230) label110 (setf xo2l (alog xo2))
  (setf ns (int (+ sxo2 (- fnu)))) (go label100) label120
  (if (= kode 2) (go label130)) (if (< alpha 1.0) (go label150))
  (setf z (/ x alpha)) (setf ra (sqrt (+ 1.0 (* z z))))
  (setf gln (alog (/ (+ 1.0 ra) z)))
  (setf t_ (+ (* ra (+ 1.0 (- (e tx)))) (/ etx (+ z ra))))
  (setf arg (* alpha (+ t_ (- gln)))) (if (> arg elim) (go label610))
  (if (= km 0) (go label140)) label130 (setf z (/ x fn))
  (setf ra (sqrt (+ 1.0 (* z z)))) (setf gln (alog (/ (+ 1.0 ra) z)))
  (setf t_ (+ (* ra (+ 1.0 (- (e tx)))) (/ etx (+ z ra))))
  (setf arg (* fn (+ t_ (- gln)))) label140 (if (< arg (- elim)) (go label280))
  (go label190) label150 (if (> x elim) (go label610)) (go label130) label160
  (if (/= km 0) (go label170)) (fset (fref y 1) (fref temp 3)) (go end_label)
  label170 (fset (fref temp 1) (fref temp 3)) (setf in ns) (setf kt 1)
  (setf i1 0) (setf is 2) (setf fni (+ fni (- 1.0))) (setf dfn (+ fni fnf))
  (setf fn dfn) (if (= i1 2) (go label350)) (setf z (/ x fn))
  (setf ra (sqrt (+ 1.0 (* z z)))) (setf gln (alog (/ (+ 1.0 ra) z)))
  (setf t_ (+ (* ra (+ 1.0 (- (e tx)))) (/ etx (+ z ra))))
  (setf arg (* fn (+ t_ (- gln)))) label190 (setf i1 (iabs (+ 3 (- is))))
  (setf i1 (max0 i1 1)) (setf flgik 1.0)
  (multiple-value-setq (x fn kode flgik ra arg i1 tol dummy_var)
   (asik x fn kode flgik ra arg i1 tol (fref temp is))
  )
  (case is (1) (2 label350) (3)) label230 (setf gln (gamln fnp1))
  (setf arg (+ (+ (* fn xo2l) (- gln)) (- sx)))
  (if (< arg (- elim)) (go label300)) (setf earg (exp arg)) label240
  (setf s 1.0) (if (< x tol) (go label260)) (setf ak 3.0) (setf t2 1.0)
  (setf t_ 1.0) (setf s1 fn)
  (fdo ((k 1 (+ k 1))) ((> k 17) nil)
   (tagbody (setf s2 (+ t2 s1)) (setf t_ (/ (* t_ sxo2) s2)) (setf s (+ s t_))
    (if (< (abs t_) tol) (go label260)) (setf t2 (+ t2 ak))
    (setf ak (+ ak 2.0)) (setf s1 (+ s1 fn))
  ))
  label260 (fset (fref temp is) (* s earg)) (case is (1) (2 label350) (3))
  (setf earg (/ (* earg fn) xo2)) (setf fni (+ fni (- 1.0)))
  (setf dfn (+ fni fnf)) (setf fn dfn) (setf is 2) (go label240) label280
  (fset (fref y nn) 0.0) (setf nn (+ nn (- 1))) (setf fni (+ fni (- 1.0)))
  (setf dfn (+ fni fnf)) (setf fn dfn)
  (arithmetic-if (+ nn (- 1)) (go label340) (go label290) (go label130))
  label290 (setf kt 2) (setf is 2) (go label130) label300
  (fset (fref y nn) 0.0) (setf nn (+ nn (- 1))) (setf fnp1 fn)
  (setf fni (+ fni (- 1.0))) (setf dfn (+ fni fnf)) (setf fn dfn)
  (arithmetic-if (+ nn (- 1)) (go label340) (go label310) (go label320))
  label310 (setf kt 2) (setf is 2) label320 (if (<= sxo2 fnp1) (go label330))
  (go label130) label330 (setf arg (+ (+ arg (- xo2l)) (alog fnp1)))
  (if (< arg (- elim)) (go label300)) (go label230) label340
  (setf nz (+ n (- nn))) (go end_label) label350 (setf nz (+ n (- nn)))
  label360 (if (= kt 2) (go label420)) (setf s1 (fref temp 1))
  (setf s2 (fref temp 2)) (setf trx (/ 2.0 x)) (setf dtm fni)
  (setf tm (* (+ dtm fnf) trx)) (if (= in 0) (go label390))
  (fdo ((i 1 (+ i 1))) ((> i in) nil)
   (tagbody (setf s s2) (setf s2 (+ (* tm s2) s1)) (setf s1 s)
    (setf dtm (+ dtm (- 1.0))) (setf tm (* (+ dtm fnf) trx))
  ))
  (fset (fref y nn) s1) (if (= nn 1) (go end_label))
  (fset (fref y (+ nn (- 1))) s2) (if (= nn 2) (go end_label)) (go label400)
  label390 (fset (fref y nn) s1) (fset (fref y (+ nn (- 1))) s2)
  (if (= nn 2) (go end_label)) label400 (setf k (+ nn 1))
  (fdo ((i 3 (+ i 1))) ((> i nn) nil)
   (tagbody (setf k (+ k (- 1)))
    (fset (fref y (+ k (- 2))) (+ (* tm (fref y (+ k (- 1)))) (fref y k)))
    (setf dtm (+ dtm (- 1.0))) (setf tm (* (+ dtm fnf) trx))
  ))
  (go end_label) label420 (fset (fref y 1) (fref temp 2)) (go end_label)
  label430 (setf earg (/ rttpi (sqrt x))) (if (= kode 2) (go label440))
  (if (> x elim) (go label610)) (setf earg (* earg (exp x))) label440
  (setf etx (* 8.0 x)) (setf is kt) (setf in 0) (setf fn fnu) label450
  (setf dx (+ fni fni)) (setf tm 0.0)
  (if (and (= fni 0.0) (< (abs fnf) tol)) (go label460))
  (setf tm (* (* 4.0 fnf) (+ (+ fni fni) fnf))) label460 (setf dtm (* dx dx))
  (setf s1 etx) (setf trx (+ dtm (- 1.0))) (setf dx (/ (* -1 (+ trx tm)) etx))
  (setf t_ dx) (setf s (+ 1.0 dx)) (setf atol (* tol (abs s))) (setf s2 1.0)
  (setf ak 8.0)
  (fdo ((k 1 (+ k 1))) ((> k 25) nil)
   (tagbody (setf s1 (+ s1 etx)) (setf s2 (+ s2 ak)) (setf dx (+ dtm (- s2)))
    (setf ap (+ dx tm)) (setf t_ (/ (* (* -1 t_) ap) s1)) (setf s (+ s t_))
    (if (<= (abs t_) atol) (go label480)) (setf ak (+ ak 8.0))
  ))
  label480 (fset (fref temp is) (* s earg)) (if (= is 2) (go label360))
  (setf is 2) (setf fni (+ fni (- 1.0))) (setf dfn (+ fni fnf)) (setf fn dfn)
  (go label450) (setf akm (amax1 (+ 3.0 (- fn)) 0.0)) (setf km (int akm))
  (setf tfn (+ fn (float km)))
  (setf ta
   (/ (+ (+ (+ gln tfn) (- 0.9189385)) (/ (* -1 0.083333336) tfn)) (+ tfn 0.5))
  )
  (setf ta (+ xo2l (- ta))) (setf tb (/ (* -1 (+ 1.0 (/ (* -1 1.0) tfn))) tfn))
  (setf ain
   (+ (/ tolln (+ (- ta) (sqrt (+ (* ta ta) (* (* -1 tolln) tb))))) 1.5)
  )
  (setf in (int ain)) (setf in (+ in km)) (go label520)
  (setf t_ (/ 1.0 (* fn ra)))
  (setf ain (+ (/ tolln (+ gln (sqrt (+ (* gln gln) (* t_ tolln))))) 1.5))
  (setf in (int ain)) (if (> in inlim) (go label160)) label520
  (setf trx (/ 2.0 x)) (setf dtm (+ fni (float in)))
  (setf tm (* (+ dtm fnf) trx)) (setf ta 0.0) (setf tb tol) (setf kk 1)
  label530
  (fdo ((i 1 (+ i 1))) ((> i in) nil)
   (tagbody (setf s tb) (setf tb (+ (* tm tb) ta)) (setf ta s)
    (setf dtm (+ dtm (- 1.0))) (setf tm (* (+ dtm fnf) trx))
  ))
  (if (/= kk 1) (go label550)) (setf ta (* (/ ta tb) (fref temp 3)))
  (setf tb (fref temp 3)) (setf kk 2) (setf in ns) (if (/= ns 0) (go label530))
  label550 (fset (fref y nn) tb) (setf nz (+ n (- nn)))
  (if (= nn 1) (go end_label)) (setf tb (+ (* tm tb) ta)) (setf k (+ nn (- 1)))
  (fset (fref y k) tb) (if (= nn 2) (go end_label)) (setf dtm (+ dtm (- 1.0)))
  (setf tm (* (+ dtm fnf) trx)) (setf km (+ k (- 1)))
  (fdo ((i 1 (+ i 1))) ((> i km) nil)
   (tagbody (fset (fref y (+ k (- 1))) (+ (* tm (fref y k)) (fref y (+ k 1))))
    (setf dtm (+ dtm (- 1.0))) (setf tm (* (+ dtm fnf) trx))
    (setf k (+ k (- 1)))
  ))
  (go end_label) label570 (setf nz (- 4)) (go end_label) label580
  (setf nz (- 2)) (go end_label) label590 (setf nz (- 3)) (go end_label)
  label600 (setf nz (- 1)) (go end_label) label610 (setf nz (- 5))
  (go end_label) end_label (return (values x alpha kode n y nz))
))

