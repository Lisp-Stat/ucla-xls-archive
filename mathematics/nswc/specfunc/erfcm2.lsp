(defun erfcm2 (mo z w) (declare (type fixnum mo))
 (declare (type (simple-array double-float (*)) z))
 (declare (type (simple-array double-float (*)) w))
 (prog
  ((anorm 0.0d0) (dpmpar 0.0d0)
   (a (make-array '(63) :element-type 'double-float)) (c 0.0d0) (e 0.0d0)
   (eps 0.0d0) (h (make-array '(2) :element-type 'double-float))
   (t_ (make-array '(2) :element-type 'double-float)) (tol 0.0d0) (x 0.0d0)
   (y 0.0d0) (j 0) (n 0) (|1.0D| 0.0d0)
  )
  (declare (type double-float anorm)) (declare (type double-float dpmpar))
  (declare (type (simple-array double-float (*)) a))
  (declare (type double-float c)) (declare (type double-float e))
  (declare (type double-float eps))
  (declare (type (simple-array double-float (*)) h))
  (declare (type (simple-array double-float (*)) t_))
  (declare (type double-float tol)) (declare (type double-float x))
  (declare (type double-float y)) (declare (type fixnum j))
  (declare (type fixnum n)) (declare (type double-float |1.0D|))
  (fset (anorm x y) (dmax1 (dabs x) (dabs y)))
  (setq c (+ |0.20666985354092053857068941306585476D| (- 1)))
  (setq e (+ |0.46777349810472658379307436327470714D| (- 2)))
  (replace a '((+ |0.50208433541766875100208433541766875D| (- 2))) :end 0)
  (replace a '((+ |0.12716049382716049382716049382716049D| (- 1))) :end 0)
  (replace a '((+ (- |0.24250440917107583774250440917107584D|) (- 2))) :end 0)
  (replace a '((+ (- |0.76984126984126984126984126984126984D|) (- 1))) :end 0)
  (replace a '((+ (- |0.16349206349206349206349206349206349D|) 0)) :end 0)
  (replace a '((+ (- |0.22222222222222222222222222222222222D|) (- 1))) :end 0)
  (replace a '((+ |0.63333333333333333333333333333333333D| 0)) :end 0)
  (replace a '((+ |0.16666666666666666666666666666666667D| 1)) :end 0)
  (replace a '((+ |0.23333333333333333333333333333333333D| 1)) :end 0)
  (replace a '((+ |0.20000000000000000000000000000000000D| 1)) :end 0)
  (replace a '((+ |0.99432863129093191401848891268744113D| (- 7))) :end 0)
  (replace a '((+ |0.96069103941908684338469767911200105D| (- 7))) :end 0)
  (replace a '((+ (- |0.89674405786490646425523560263096103D|) (- 6))) :end 0)
  (replace a '((+ (- |0.29071891082127275370004560446169188D|) (- 5))) :end 0)
  (replace a '((+ |0.28637897646612243562134629672756034D| (- 5))) :end 0)
  (replace a '((+ |0.33885549097189308829520469732109944D| (- 4))) :end 0)
  (replace a '((+ |0.46324144207742091339974937858535742D| (- 4))) :end 0)
  (replace a '((+ (- |0.19118154038788959423880058800693721D|) (- 3))) :end 0)
  (replace a '((+ (- |0.78593217482106370995259884148773038D|) (- 3))) :end 0)
  (replace a '((+ (- |0.25305969750414194858639303083747528D|) (- 3))) :end 0)
  (replace a '((+ |0.17921843632701679986488128324051002D| (- 12))) :end 0)
  (replace a '((+ |0.37186985840699828780916522245407087D| (- 12))) :end 0)
  (replace a '((+ (- |0.21042890133669970575386166675721692D|) (- 11))) :end 0)
  (replace a '((+ (- |0.10136148256511788733365237088810952D|) (- 10))) :end 0)
  (replace a '((+ |0.10619149520827430973786114446699534D| (- 10))) :end 0)
  (replace a '((+ |0.16941915827254374668448114614201210D| (- 9))) :end 0)
  (replace a '((+ |0.20329898993447386223176373714372370D| (- 9))) :end 0)
  (replace a '((+ (- |0.18706782059105426900361744016236561D|) (- 8))) :end 0)
  (replace a '((+ (- |0.65557500375673133822289344530892436D|) (- 8))) :end 0)
  (replace a '((+ |0.97610310501460621303387795457283579D| (- 8))) :end 0)
  (replace a '((+ |0.40654116689599228385911733319215613D| (- 19))) :end 0)
  (replace a '((+ |0.32549879318817103966053527398133297D| (- 18))) :end 0)
  (replace a '((+ (- |0.18708903154917138727191793341667090D|) (- 18))) :end 0)
  (replace a '((+ (- |0.70653158723054941879586082239984222D|) (- 17))) :end 0)
  (replace a '((+ (- |0.10765703619385988116658460442219647D|) (- 16))) :end 0)
  (replace a '((+ |0.11584041639989442481950487524296214D| (- 15))) :end 0)
  (replace a '((+ |0.44315624546581333350568244777175883D| (- 15))) :end 0)
  (replace a '((+ (- |0.12340742690978398320850088252659714D|) (- 14))) :end 0)
  (replace a '((+ (- |0.10533182313660970970232171410372199D|) (- 13))) :end 0)
  (replace a '((+ (- |0.89823991804248069863542565948598397D|) (- 16))) :end 0)
  (replace a '((+ (- |0.41342210492630142578080062451711039D|) (- 26))) :end 0)
  (replace a '((+ |0.38364131854692721721867481914852428D| (- 25))) :end 0)
  (replace a '((+ |0.18586826578121663981412155416486531D| (- 24))) :end 0)
  (replace a '((+ (- |0.59960357240498652932299485494869633D|) (- 24))) :end 0)
  (replace a '((+ (- |0.58753834789274356433279671015522650D|) (- 23))) :end 0)
  (replace a '((+ |0.26971039707314316218154193225264469D| (- 23))) :end 0)
  (replace a '((+ |0.14665384680061888088099002254334292D| (- 21))) :end 0)
  (replace a '((+ |0.23653053641701517160704870522922706D| (- 21))) :end 0)
  (replace a '((+ (- |0.28923865378584966737386008432031980D|) (- 20))) :end 0)
  (replace a '((+ (- |0.11250074516817311101947327325293424D|) (- 19))) :end 0)
  (replace a '((+ (- |0.45760473722605993842481669806804415D|) (- 33))) :end 0)
  (replace a '((+ (- |0.75168312488894341862391776330113688D|) (- 33))) :end 0)
  (replace a '((+ |0.12664655832830787747161769929972617D| (- 31))) :end 0)
  (replace a '((+ |0.48705319298749358709127987806547949D| (- 31))) :end 0)
  (replace a '((+ (- |0.28104226475997460044096389060743131D|) (- 30))) :end 0)
  (replace a '((+ (- |0.20097984104191034713653294173834095D|) (- 29))) :end 0)
  (replace a '((+ |0.40626551379996340638338449938639730D| (- 29))) :end 0)
  (replace a '((+ |0.65592252170840353572672782446212733D| (- 28))) :end 0)
  (replace a '((+ |0.19828685934364181151988692232131608D| (- 28))) :end 0)
  (replace a '((+ (- |0.17646283105274988992381528904600860D|) (- 26))) :end 0)
  (replace a '((+ |0.10452448992516358449586503951463322D| (- 35))) :end 0)
  (replace a '((+ |0.13932664042920082608489441616061541D| (- 34))) :end 0)
  (replace a '((+ (- |0.56725491529575395930156379514718000D|) (- 35))) :end 0)
  (setf eps (dpmpar 1)) (setf tol (+ (* eps |1.0D|) 12))
  (fset (fref h 1) (+ 1.0d0 (+ 1.0d0 (- (fref z 1)))))
  (fset (fref h 2) (- (fref z 2))) (setf x 1.0d0) (setf y 0.0d0)
  (fset (fref w 1) (fref a 30)) (fset (fref w 2) 0.0d0)
  (fdo ((n 31 (+ n 1))) ((> n 63) nil)
   (tagbody (fset (fref t 1) (+ (* x (fref h 1)) (* (* -1 y) (fref h 2))))
    (fset (fref t 2) (+ (* x (fref h 2)) (* y (fref h 1)))) (setf x (fref t 1))
    (setf y (fref t 2)) (fset (fref t 1) (* (fref a n) x))
    (fset (fref t 2) (* (fref a n) y))
    (fset (fref w 1) (+ (fref w 1) (fref t 1)))
    (fset (fref w 2) (+ (fref w 2) (fref t 2)))
    (if
     (<= (anorm (fref t 1) (fref t 2)) (* tol (anorm (fref w 1) (fref w 2))))
     (go label20)
  )))
  label20
  (fdo ((j 1 (+ j 1))) ((> j 29) nil)
   (tagbody (setf n (+ 30 (- j)))
    (setf x (+ (* (fref h 1) (fref w 1)) (* (* -1 (fref h 2)) (fref w 2))))
    (fset (fref w 2) (+ (* (fref h 1) (fref w 2)) (* (fref h 2) (fref w 1))))
    (fset (fref w 1) (+ (fref a n) x))
  ))
  (setf x (+ (* (fref h 1) (fref w 1)) (* (* -1 (fref h 2)) (fref w 2))))
  (fset (fref w 2) (+ (* (fref h 1) (fref w 2)) (* (fref h 2) (fref w 1))))
  (fset (fref w 1) (+ 1.0d0 x))
  (setf x (* c (+ (* (fref h 1) (fref w 1)) (* (* -1 (fref h 2)) (fref w 2)))))
  (fset (fref w 2)
   (* c (+ (* (fref h 1) (fref w 2)) (* (fref h 2) (fref w 1))))
  )
  (fset (fref w 1) (+ e x)) (if (= mo 0) (go end_label))
  (setf x (+ (* (fref z 1) (fref z 1)) (* (* -1 (fref z 2)) (fref z 2))))
  (setf y (* (* 2.0d0 (fref z 1)) (fref z 2))) (setf x (dexp x))
  (fset (fref t 1) (* x (dcos y))) (fset (fref t 2) (* x (dsin y)))
  (setf x (+ (* (fref t 1) (fref w 1)) (* (* -1 (fref t 2)) (fref w 2))))
  (setf y (+ (* (fref t 1) (fref w 2)) (* (fref t 2) (fref w 1))))
  (fset (fref w 1) x) (fset (fref w 2) y) (go end_label) end_label
  (return (values mo z w))
))

