(defun cfrnli (mo z w) (declare (type fixnum mo)) (declare (type complex z))
 (declare (type complex w))
 (prog
  ((cd (make-array '(18) :element-type 'float))
   (ce (make-array '(18) :element-type 'float))
   (qf (make-array '(2) :element-type 'float))
   (sm (make-array '(2) :element-type 'float))
   (tm (make-array '(2) :element-type 'float))
   (ts (make-array '(2) :element-type 'float))
   (zr (make-array '(2) :element-type 'float)) (ss 0.0d0) (i 0) (qm 0.0d0)
   (c0 0.0d0) (dm 0.0d0) (pm 0.0d0) (c 0.0d0) (r 0.0d0) (y 0.0d0) (x 0.0d0)
  )
  (declare (type (simple-array float (*)) cd))
  (declare (type (simple-array float (*)) ce))
  (declare (type (simple-array float (*)) qf))
  (declare (type (simple-array float (*)) sm))
  (declare (type (simple-array float (*)) tm))
  (declare (type (simple-array float (*)) ts))
  (declare (type (simple-array float (*)) zr)) (declare (type double-float ss))
  (declare (type fixnum i)) (declare (type double-float qm))
  (declare (type double-float c0)) (declare (type double-float dm))
  (declare (type double-float pm)) (declare (type double-float c))
  (declare (type double-float r)) (declare (type double-float y))
  (declare (type double-float x)) (setq c 0.5641896) (setq c0 (- 0.70710677))
  (replace cd '(17.248354) :end 0) (replace cd '(12.571072) :end 0)
  (replace cd '(9.451702) :end 0) (replace cd '(7.1925898) :end 0)
  (replace cd '(5.5017886) :end 0) (replace cd '(4.2153435) :end 0)
  (replace cd '(3.2271938) :end 0) (replace cd '(2.4631484) :end 0)
  (replace cd '(1.8689166) :end 0) (replace cd '(1.4037806) :end 0)
  (replace cd '(1.0369507) :end 0) (replace cd '(0.74541295) :end 0)
  (replace cd '(0.5126753) :end 0) (replace cd '(0.32796347) :end 0)
  (replace cd '(0.18542166) :end 0) (replace cd '(0.08298069) :end 0)
  (replace cd '(0.020860586) :end 0) (replace cd '(0.0) :end 0)
  (replace ce '(2.6356483E-8) :end 0) (replace ce '(2.051735E-6) :end 0)
  (replace ce '(3.7815655E-5) :end 0) (replace ce '(3.0705615E-4) :end 0)
  (replace ce '(0.0014398446) :end 0) (replace ce '(0.004556349) :end 0)
  (replace ce '(0.010784741) :end 0) (replace ce '(0.02055481) :end 0)
  (replace ce '(0.033354066) :end 0) (replace ce '(0.048144523) :end 0)
  (replace ce '(0.064020455) :end 0) (replace ce '(0.08059088) :end 0)
  (replace ce '(0.09785809) :end 0) (replace ce '(0.115690395) :end 0)
  (replace ce '(0.13321967) :end 0) (replace ce '(0.14858162) :end 0)
  (replace ce '(0.15928529) :end 0) (replace ce '(0.08157231) :end 0)
  (setf x (real z)) (setf y (aimag z)) (setf r (cpabs x y))
  (if (= r 0.0) (go label200)) (if (>= x 0.0) (go label10))
  (fset (fref zr 2) (sqrt (+ r (- x)))) (fset (fref zr 1) (/ y (fref zr 2)))
  (go label11) label10 (fset (fref zr 1) (sqrt (+ r x)))
  (if (< y 0.0) (fset (fref zr 1) (- (fref zr 1))))
  (fset (fref zr 2) (/ y (fref zr 1))) label11
  (fset (fref zr 1) (* c (fref zr 1))) (fset (fref zr 2) (* c (fref zr 2)))
  (if (<= r 1.0) (go label20)) (if (>= r 38.0) (go label60))
  (if (< x (* (* 0.016 y) y)) (go label50)) label20 (fset (fref sm 1) 0.0)
  (fset (fref sm 2) 0.0) (fset (fref tm 1) (fref zr 1))
  (fset (fref tm 2) (fref zr 2)) (setf pm 0.0) label30 (setf pm (+ pm 1.0))
  (setf dm (+ (* 2.0 pm) 1.0))
  (fset (fref ts 1) (+ (* (fref tm 1) x) (* (* -1 (fref tm 2)) y)))
  (fset (fref ts 2) (+ (* (fref tm 1) y) (* (fref tm 2) x)))
  (fset (fref tm 1) (/ (fref ts 1) pm)) (fset (fref tm 2) (/ (fref ts 2) pm))
  (fset (fref ts 1) (/ (fref tm 1) dm)) (fset (fref ts 2) (/ (fref tm 2) dm))
  (if (/= (+ (abs (fref sm 1)) (abs (fref ts 1))) (abs (fref sm 1)))
   (go label31)
  )
  (if (= (+ (abs (fref sm 2)) (abs (fref ts 2))) (abs (fref sm 2)))
   (go label40)
  )
  label31 (fset (fref sm 1) (+ (fref sm 1) (fref ts 1)))
  (fset (fref sm 2) (+ (fref sm 2) (fref ts 2))) (go label30) label40
  (fset (fref sm 1) (+ (fref zr 1) (fref sm 1)))
  (fset (fref sm 2) (+ (+ c0 (fref zr 2)) (fref sm 2)))
  (if (= mo 0) (go label120)) (setf qm (exp (- x)))
  (fset (fref qf 1) (* qm (cos (- y)))) (fset (fref qf 2) (* qm (sin (- y))))
  (go label110) label50 (fset (fref sm 1) 0.0) (fset (fref sm 2) 0.0)
  (fdo ((i 1 (+ i 1))) ((> i 18) nil)
   (tagbody (fset (fref ts 1) (+ x (- (fref cd i)))) (fset (fref ts 2) y)
    (setf ss (+ (* (fref ts 1) (fref ts 1)) (* (fref ts 2) (fref ts 2))))
    (fset (fref tm 1) (/ (* (fref ce i) (fref ts 1)) ss))
    (fset (fref tm 2) (/ (* (* -1 (fref ce i)) (fref ts 2)) ss))
    (fset (fref sm 1) (+ (fref sm 1) (fref tm 1)))
    (fset (fref sm 2) (+ (fref sm 2) (fref tm 2)))
  ))
  (fset (fref ts 1)
   (+ (* (fref zr 1) (fref sm 1)) (* (* -1 (fref zr 2)) (fref sm 2)))
  )
  (fset (fref ts 2) (+ (* (fref zr 1) (fref sm 2)) (* (fref zr 2) (fref sm 1)))
  )
  (fset (fref sm 1) (* 0.5 (fref ts 1))) (fset (fref sm 2) (* 0.5 (fref ts 2)))
  (go label100) label60 (fset (fref qf 1) (/ (/ x r) r))
  (fset (fref qf 2) (/ (* -1 (/ y r)) r)) (fset (fref tm 1) (fref qf 1))
  (fset (fref tm 2) (fref qf 2)) (fset (fref sm 1) (fref tm 1))
  (fset (fref sm 2) (fref tm 2)) (setf pm (- 0.5)) label70 (setf pm (+ pm 1.0))
  (fset (fref ts 1)
   (+ (* (fref tm 1) (fref qf 1)) (* (* -1 (fref tm 2)) (fref qf 2)))
  )
  (fset (fref ts 2) (+ (* (fref tm 1) (fref qf 2)) (* (fref tm 2) (fref qf 1)))
  )
  (fset (fref tm 1) (* pm (fref ts 1))) (fset (fref tm 2) (* pm (fref ts 2)))
  (if (/= (+ (abs (fref sm 1)) (abs (fref tm 1))) (abs (fref sm 1)))
   (go label71)
  )
  (if (= (+ (abs (fref sm 2)) (abs (fref tm 2))) (abs (fref sm 2)))
   (go label80)
  )
  label71 (fset (fref sm 1) (+ (fref sm 1) (fref tm 1)))
  (fset (fref sm 2) (+ (fref sm 2) (fref tm 2))) (if (< pm 25.5) (go label70))
  label80
  (fset (fref ts 1)
   (+ (* (fref zr 1) (fref sm 1)) (* (* -1 (fref zr 2)) (fref sm 2)))
  )
  (fset (fref ts 2) (+ (* (fref zr 1) (fref sm 2)) (* (fref zr 2) (fref sm 1)))
  )
  (fset (fref sm 1) (* 0.5 (fref ts 1))) (fset (fref sm 2) (* 0.5 (fref ts 2)))
  (if (< (fref zr 2) 0.008) (go label210)) label100
  (if (/= mo 0) (go label120)) (setf qm (exp x))
  (fset (fref qf 1) (* qm (cos y))) (fset (fref qf 2) (* qm (sin y))) label110
  (fset (fref ts 1)
   (+ (* (fref qf 1) (fref sm 1)) (* (* -1 (fref qf 2)) (fref sm 2)))
  )
  (fset (fref ts 2) (+ (* (fref qf 1) (fref sm 2)) (* (fref qf 2) (fref sm 1)))
  )
  (fset (fref sm 1) (fref ts 1)) (fset (fref sm 2) (fref ts 2)) label120
  (setf w (cmplx (fref sm 1) (fref sm 2))) (go end_label) label200
  (setf w (cmplx 0.0 c0)) (go end_label) label210 (if (/= mo 0) (go label220))
  (setf qm (exp x)) (fset (fref qf 1) (* qm (cos y)))
  (fset (fref qf 2) (* qm (sin y)))
  (fset (fref ts 1)
   (+ (* (fref qf 1) (fref sm 1)) (* (* -1 (fref qf 2)) (fref sm 2)))
  )
  (fset (fref ts 2) (+ (* (fref qf 1) (fref sm 2)) (* (fref qf 2) (fref sm 1)))
  )
  (setf w (cmplx (fref ts 1) (+ c0 (fref ts 2)))) (go end_label) label220
  (if (<= (- x) (exparg 1)) (go label120)) (setf qm (* c0 (exp (- x))))
  (fset (fref sm 1) (+ (fref sm 1) (* qm (sin y))))
  (fset (fref sm 2) (+ (fref sm 2) (* qm (cos y))))
  (setf w (cmplx (fref sm 1) (fref sm 2))) (go end_label) end_label
  (return (values mo z w))
))

