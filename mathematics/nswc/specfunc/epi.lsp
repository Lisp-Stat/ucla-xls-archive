(defun epi (phi cphi k2 l2 n m p ierr) (declare (type float phi))
 (declare (type float cphi)) (declare (type float k2))
 (declare (type float l2)) (declare (type float n)) (declare (type float m))
 (declare (type float p)) (declare (type fixnum ierr))
 (prog
  ((spmpar 0.0d0) (a 0.0d0) (b 0.0d0) (c 0.0d0) (eps 0.0d0) (pihalf 0.0d0)
   (r 0.0d0) (rf 0.0d0) (s 0.0d0) (s2 0.0d0) (tol 0.0d0)
  )
  (declare (type float spmpar)) (declare (type float a))
  (declare (type float b)) (declare (type float c)) (declare (type float eps))
  (declare (type float pihalf)) (declare (type float r))
  (declare (type float rf)) (declare (type float s)) (declare (type float s2))
  (declare (type float tol)) (setq pihalf 1.5707964) (setf eps (spmpar 1))
  (setf tol (* 4.0 eps)) (if (< (amin1 phi cphi) 0.0) (go label100))
  (if (> (abs (+ (+ phi cphi) (- pihalf))) (* tol pihalf)) (go label100))
  (if (> (abs n) 1.0) (go label110))
  (if (or (< k2 0.0) (< l2 0.0)) (go label120))
  (if (> (abs (+ (+ k2 l2) (- 1.0))) tol) (go label120))
  (if (< phi 0.79) (go label10)) (setf s (cos cphi)) (setf c (sin cphi))
  (go label11) label10 (setf s (sin phi)) (setf c (cos phi)) label11
  (setf a (* c c)) (setf b (+ l2 (* k2 a))) (setf s2 (* s s))
  (if (> n 0.0) (go label20)) (setf r (+ 1.0 (* (* -1 n) s2))) (go label30)
  label20 (if (or (< m 0.0) (> m 1.0)) (go label110))
  (if (> (abs (+ (+ m n) (- 1.0))) tol) (go label110)) (setf r (+ m (* n a)))
  label30
  (multiple-value-setq (a b dummy_var r p ierr) (rjval a b 1.0 r p ierr))
  (if (/= ierr 0) (go label130)) (setf p (/ (* (* p (* s s2)) n) 3.0))
  (multiple-value-setq (a b dummy_var rf ierr) (rfval a b 1.0 rf ierr))
  (setf p (+ p (* s rf))) (go end_label) label100 (setf ierr 1) (go end_label)
  label110 (setf ierr 2) (go end_label) label120 (setf ierr 3) (go end_label)
  label130 (setf ierr 4) (go end_label) end_label
  (return (values phi cphi k2 l2 n m p ierr))
))

