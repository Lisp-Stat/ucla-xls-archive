(defun betaln (a0 b0) (declare (type double-float a0))
 (declare (type double-float b0))
 (prog
  ((betaln 0.0d0) (v 0.0d0) (u 0.0d0) (c 0.0d0) (z 0.0d0) (h 0.0d0) (i 0) (n 0)
   (w 0.0d0) (b 0.0d0) (a 0.0d0)
  )
  (declare (type real betaln)) (declare (type double-float v))
  (declare (type double-float u)) (declare (type double-float c))
  (declare (type double-float z)) (declare (type double-float h))
  (declare (type fixnum i)) (declare (type fixnum n))
  (declare (type double-float w)) (declare (type double-float b))
  (declare (type double-float a)) (setq e 0.9189385) (setf a (amin1 a0 b0))
  (setf b (amax1 a0 b0)) (if (>= a 8.0) (go label60))
  (if (>= a 1.0) (go label20)) (if (>= b 8.0) (go label10))
  (setf betaln (+ (gamln a) (+ (gamln b) (- (gamln (+ a b)))))) (go end_label)
  label10 (setf betaln (+ (gamln a) (algdiv a b))) (go end_label) label20
  (if (> a 2.0) (go label30)) (if (> b 2.0) (go label21))
  (setf betaln (+ (+ (gamln a) (gamln b)) (- (gsumln a b)))) (go end_label)
  label21 (setf w 0.0) (if (< b 8.0) (go label40))
  (setf betaln (+ (gamln a) (algdiv a b))) (go end_label) label30
  (if (> b 1000.0) (go label50)) (setf n (+ a (- 1.0))) (setf w 1.0)
  (fdo ((i 1 (+ i 1))) ((> i n) nil)
   (tagbody (setf a (+ a (- 1.0))) (setf h (/ a b))
    (setf w (* w (/ h (+ 1.0 h))))
  ))
  (setf w (alog w)) (if (< b 8.0) (go label40))
  (setf betaln (+ (+ w (gamln a)) (algdiv a b))) (go end_label) label40
  (setf n (+ b (- 1.0))) (setf z 1.0)
  (fdo ((i 1 (+ i 1))) ((> i n) nil)
   (tagbody (setf b (+ b (- 1.0))) (setf z (* z (/ b (+ a b)))))
  )
  (setf betaln (+ (+ w (alog z)) (+ (gamln a) (+ (gamln b) (- (gsumln a b))))))
  (go end_label) label50 (setf n (+ a (- 1.0))) (setf w 1.0)
  (fdo ((i 1 (+ i 1))) ((> i n) nil)
   (tagbody (setf a (+ a (- 1.0))) (setf w (* w (/ a (+ 1.0 (/ a b))))))
  )
  (setf betaln
   (+ (+ (alog w) (* (* -1 n) (alog b))) (+ (gamln a) (algdiv a b)))
  )
  (go end_label) label60 (setf w (bcorr a b)) (setf h (/ a b))
  (setf c (/ h (+ 1.0 h))) (setf u (* (* -1 (+ a (- 0.5))) (alog c)))
  (setf v (* b (alnrel h))) (if (<= u v) (go label61))
  (setf betaln (+ (+ (+ (+ (* (* -1 0.5) (alog b)) e) w) (- v)) (- u)))
  (go end_label) label61
  (setf betaln (+ (+ (+ (+ (* (* -1 0.5) (alog b)) e) w) (- u)) (- v)))
  (go end_label) end_label (return betaln)
))

