(defun kurvp1 (n x y xp yp temp s sigma ierr) (declare (type fixnum n))
 (declare (type (simple-array float (*)) x))
 (declare (type (simple-array float (*)) y))
 (declare (type (simple-array float (*)) xp))
 (declare (type (simple-array float (*)) yp))
 (declare (type (simple-array float (*)) temp))
 (declare (type (simple-array float (*)) s)) (declare (type float sigma))
 (declare (type fixnum ierr))
 (prog
  ((ypn 0.0d0) (xpn 0.0d0) (npibak 0) (ibak 0) (diag2 0.0d0) (npi 0)
   (sdiag2 0.0d0) (sdiag1 0.0d0) (diagin 0.0d0) (diag1 0.0d0) (diag 0.0d0)
   (dy2 0.0d0) (dx2 0.0d0) (dels2 0.0d0) (dy1 0.0d0) (dx1 0.0d0) (dels1 0.0d0)
   (sigmap 0.0d0) (im1 0) (i 0) (np1 0) (nm1 0)
  )
  (declare (type double-float ypn)) (declare (type double-float xpn))
  (declare (type fixnum npibak)) (declare (type fixnum ibak))
  (declare (type double-float diag2)) (declare (type fixnum npi))
  (declare (type double-float sdiag2)) (declare (type double-float sdiag1))
  (declare (type double-float diagin)) (declare (type double-float diag1))
  (declare (type double-float diag)) (declare (type double-float dy2))
  (declare (type double-float dx2)) (declare (type double-float dels2))
  (declare (type double-float dy1)) (declare (type double-float dx1))
  (declare (type double-float dels1)) (declare (type double-float sigmap))
  (declare (type fixnum im1)) (declare (type fixnum i))
  (declare (type fixnum np1)) (declare (type fixnum nm1))
  (setf nm1 (+ n (- 1))) (setf np1 (+ n 1)) (setf ierr 0)
  (if (<= n 1) (go label7))
  (fset (fref s 1)
   (sqrt
    (+ (expt (+ (fref x n) (- (fref x 1))) 2)
     (expt (+ (fref y n) (- (fref y 1))) 2)
  )))
  (fdo ((i 2 (+ i 1))) ((> i n) nil)
   (tagbody (setf im1 (+ i (- 1)))
    (fset (fref s i)
     (+ (fref s im1)
      (sqrt
       (+ (expt (+ (fref x i) (- (fref x im1))) 2)
        (expt (+ (fref y i) (- (fref y im1))) 2)
  ))))))
  (setf sigmap (/ (* (abs sigma) (float n)) (fref s n)))
  (setf dels1 (fref s 1)) (if (= dels1 0.0) (go label8))
  (setf dx1 (/ (+ (fref x 1) (- (fref x n))) dels1))
  (setf dy1 (/ (+ (fref y 1) (- (fref y n))) dels1))
  (multiple-value-setq (diag1 sdiag1 sigmap dels1)
   (terms diag1 sdiag1 sigmap dels1)
  )
  (setf dels2 (+ (fref s 2) (- (fref s 1)))) (if (= dels2 0.0) (go label8))
  (setf dx2 (/ (+ (fref x 2) (- (fref x 1))) dels2))
  (setf dy2 (/ (+ (fref y 2) (- (fref y 1))) dels2))
  (multiple-value-setq (diag2 sdiag2 sigmap dels2)
   (terms diag2 sdiag2 sigmap dels2)
  )
  (setf diag (+ diag1 diag2)) (setf diagin (/ 1.0 diag))
  (fset (fref xp 1) (* (+ dx2 (- dx1)) diagin))
  (fset (fref yp 1) (* (+ dy2 (- dy1)) diagin))
  (fset (fref temp np1) (* (* -1 sdiag1) diagin))
  (fset (fref temp 1) (* sdiag2 diagin)) (setf dx1 dx2) (setf dy1 dy2)
  (setf diag1 diag2) (setf sdiag1 sdiag2) (if (= n 2) (go label3))
  (fdo ((i 2 (+ i 1))) ((> i nm1) nil)
   (tagbody (setf npi (+ n i)) (setf dels2 (+ (fref s (+ i 1)) (- (fref s i))))
    (if (= dels2 0.0) (go label8))
    (setf dx2 (/ (+ (fref x (+ i 1)) (- (fref x i))) dels2))
    (setf dy2 (/ (+ (fref y (+ i 1)) (- (fref y i))) dels2))
    (multiple-value-setq (diag2 sdiag2 sigmap dels2)
     (terms diag2 sdiag2 sigmap dels2)
    )
    (setf diag (+ (+ diag1 diag2) (* (* -1 sdiag1) (fref temp (+ i (- 1))))))
    (setf diagin (/ 1.0 diag))
    (fset (fref xp i)
     (* (+ (+ dx2 (- dx1)) (* (* -1 sdiag1) (fref xp (+ i (- 1))))) diagin)
    )
    (fset (fref yp i)
     (* (+ (+ dy2 (- dy1)) (* (* -1 sdiag1) (fref yp (+ i (- 1))))) diagin)
    )
    (fset (fref temp npi)
     (* (* (* -1 (fref temp (+ npi (- 1)))) sdiag1) diagin)
    )
    (fset (fref temp i) (* sdiag2 diagin)) (setf dx1 dx2) (setf dy1 dy2)
    (setf diag1 diag2) (setf sdiag1 sdiag2)
  ))
  label3 (setf dels2 (fref s 1))
  (setf dx2 (/ (+ (fref x 1) (- (fref x n))) dels2))
  (setf dy2 (/ (+ (fref y 1) (- (fref y n))) dels2))
  (multiple-value-setq (diag2 sdiag2 sigmap dels2)
   (terms diag2 sdiag2 sigmap dels2)
  )
  (fset (fref xp n) (+ dx2 (- dx1))) (fset (fref yp n) (+ dy2 (- dy1)))
  (fset (fref temp nm1) (+ (fref temp (+ (* 2 n) (- 1))) (- (fref temp nm1))))
  (if (= n 2) (go label5))
  (fdo ((i 3 (+ i 1))) ((> i n) nil)
   (tagbody (setf ibak (+ np1 (- i))) (setf npibak (+ n ibak))
    (fset (fref xp ibak)
     (+ (fref xp ibak) (* (* -1 (fref temp ibak)) (fref xp (+ ibak 1))))
    )
    (fset (fref yp ibak)
     (+ (fref yp ibak) (* (* -1 (fref temp ibak)) (fref yp (+ ibak 1))))
    )
    (fset (fref temp ibak)
     (+ (fref temp npibak) (* (* -1 (fref temp ibak)) (fref temp (+ ibak 1))))
  )))
  label5
  (fset (fref xp n)
   (/
    (+ (+ (fref xp n) (* (* -1 sdiag2) (fref xp 1)))
     (* (* -1 sdiag1) (fref xp nm1))
    )
    (+ (+ (+ diag1 diag2) (* sdiag2 (fref temp 1))) (* sdiag1 (fref temp nm1)))
  ))
  (fset (fref yp n)
   (/
    (+ (+ (fref yp n) (* (* -1 sdiag2) (fref yp 1)))
     (* (* -1 sdiag1) (fref yp nm1))
    )
    (+ (+ (+ diag1 diag2) (* sdiag2 (fref temp 1))) (* sdiag1 (fref temp nm1)))
  ))
  (setf xpn (fref xp n)) (setf ypn (fref yp n))
  (fdo ((i 1 (+ i 1))) ((> i nm1) nil)
   (tagbody (fset (fref xp i) (+ (fref xp i) (* (fref temp i) xpn)))
    (fset (fref yp i) (+ (fref yp i) (* (fref temp i) ypn)))
  ))
  (go end_label) label7 (setf ierr 1) (go end_label) label8 (setf ierr 2)
  (go end_label) end_label (return (values n x y xp yp temp s sigma ierr))
))

