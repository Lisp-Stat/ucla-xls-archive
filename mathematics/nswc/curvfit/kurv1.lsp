(defun kurv1 (n x y slp1 slpn islpsw xp yp temp s sigma ierr)
 (declare (type fixnum n)) (declare (type (simple-array float (*)) x))
 (declare (type (simple-array float (*)) y)) (declare (type float slp1))
 (declare (type float slpn)) (declare (type fixnum islpsw))
 (declare (type (simple-array float (*)) xp))
 (declare (type (simple-array float (*)) yp))
 (declare (type (simple-array float (*)) temp))
 (declare (type (simple-array float (*)) s)) (declare (type float sigma))
 (declare (type fixnum ierr))
 (prog
  ((ibak 0) (sdiag2 0.0d0) (diagin 0.0d0) (diag2 0.0d0) (diag1 0.0d0)
   (diag 0.0d0) (dy2 0.0d0) (dx2 0.0d0) (sdiag1 0.0d0) (dy1 0.0d0) (dx1 0.0d0)
   (delsnm 0.0d0) (delsn 0.0d0) (slppny 0.0d0) (slppnx 0.0d0) (delt 0.0d0)
   (c3 0.0d0) (sy 0.0d0) (c2 0.0d0) (c1 0.0d0) (sx 0.0d0) (dels2 0.0d0)
   (dels1 0.0d0) (slpp1y 0.0d0) (slpp1x 0.0d0) (sigmap 0.0d0) (im1 0) (i 0)
   (np1 0) (nm1 0)
  )
  (declare (type fixnum ibak)) (declare (type double-float sdiag2))
  (declare (type double-float diagin)) (declare (type double-float diag2))
  (declare (type double-float diag1)) (declare (type double-float diag))
  (declare (type double-float dy2)) (declare (type double-float dx2))
  (declare (type double-float sdiag1)) (declare (type double-float dy1))
  (declare (type double-float dx1)) (declare (type double-float delsnm))
  (declare (type double-float delsn)) (declare (type double-float slppny))
  (declare (type double-float slppnx)) (declare (type double-float delt))
  (declare (type double-float c3)) (declare (type double-float sy))
  (declare (type double-float c2)) (declare (type double-float c1))
  (declare (type double-float sx)) (declare (type double-float dels2))
  (declare (type double-float dels1)) (declare (type double-float slpp1y))
  (declare (type double-float slpp1x)) (declare (type double-float sigmap))
  (declare (type fixnum im1)) (declare (type fixnum i))
  (declare (type fixnum np1)) (declare (type fixnum nm1))
  (setf nm1 (+ n (- 1))) (setf np1 (+ n 1)) (setf ierr 0)
  (if (<= n 1) (go label11)) (fset (fref s 1) 0.0)
  (fdo ((i 2 (+ i 1))) ((> i n) nil)
   (tagbody (setf im1 (+ i (- 1)))
    (fset (fref s i)
     (+ (fref s im1)
      (sqrt
       (+ (expt (+ (fref x i) (- (fref x im1))) 2)
        (expt (+ (fref y i) (- (fref y im1))) 2)
  ))))))
  (setf sigmap (/ (* (abs sigma) (float (+ n (- 1)))) (fref s n)))
  (if (>= islpsw 2) (go label2)) (setf slpp1x (cos slp1))
  (setf slpp1y (sin slp1)) (go label4) label2
  (setf dels1 (+ (fref s 2) (- (fref s 1)))) (setf dels2 (+ dels1 dels1))
  (if (> n 2) (setf dels2 (+ (fref s 3) (- (fref s 1)))))
  (if (or (= dels1 0.0) (= dels2 0.0)) (go label12))
  (multiple-value-setq (dels1 dels2 sigmap c1 c2 c3 n)
   (ceez dels1 dels2 sigmap c1 c2 c3 n)
  )
  (setf sx (+ (* c1 (fref x 1)) (* c2 (fref x 2))))
  (setf sy (+ (* c1 (fref y 1)) (* c2 (fref y 2)))) (if (= n 2) (go label3))
  (setf sx (+ sx (* c3 (fref x 3)))) (setf sy (+ sy (* c3 (fref y 3)))) label3
  (setf delt (sqrt (+ (* sx sx) (* sy sy)))) (setf slpp1x (/ sx delt))
  (setf slpp1y (/ sy delt)) label4
  (if (or (= islpsw 1) (= islpsw 3)) (go label5)) (setf slppnx (cos slpn))
  (setf slppny (sin slpn)) (go label7) label5
  (setf delsn (+ (fref s n) (- (fref s nm1)))) (setf delsnm (+ delsn delsn))
  (if (> n 2) (setf delsnm (+ (fref s n) (- (fref s (+ n (- 2)))))))
  (if (or (= delsn 0.0) (= delsnm 0.0)) (go label12))
  (multiple-value-setq (dummy_var dummy_var sigmap c1 c2 c3 n)
   (ceez (- delsn) (- delsnm) sigmap c1 c2 c3 n)
  )
  (setf sx (+ (* c1 (fref x n)) (* c2 (fref x nm1))))
  (setf sy (+ (* c1 (fref y n)) (* c2 (fref y nm1)))) (if (= n 2) (go label6))
  (setf sx (+ sx (* c3 (fref x (+ n (- 2))))))
  (setf sy (+ sy (* c3 (fref y (+ n (- 2)))))) label6
  (setf delt (sqrt (+ (* sx sx) (* sy sy)))) (setf slppnx (/ sx delt))
  (setf slppny (/ sy delt)) label7
  (setf dx1 (/ (+ (fref x 2) (- (fref x 1))) (fref s 2)))
  (setf dy1 (/ (+ (fref y 2) (- (fref y 1))) (fref s 2)))
  (multiple-value-setq (diag1 sdiag1 sigmap dummy_var)
   (terms diag1 sdiag1 sigmap (fref s 2))
  )
  (fset (fref xp 1) (/ (+ dx1 (- slpp1x)) diag1))
  (fset (fref yp 1) (/ (+ dy1 (- slpp1y)) diag1))
  (fset (fref temp 1) (/ sdiag1 diag1)) (if (= n 2) (go label9))
  (fdo ((i 2 (+ i 1))) ((> i nm1) nil)
   (tagbody (setf dels2 (+ (fref s (+ i 1)) (- (fref s i))))
    (if (= dels2 0.0) (go label12))
    (setf dx2 (/ (+ (fref x (+ i 1)) (- (fref x i))) dels2))
    (setf dy2 (/ (+ (fref y (+ i 1)) (- (fref y i))) dels2))
    (multiple-value-setq (diag2 sdiag2 sigmap dels2)
     (terms diag2 sdiag2 sigmap dels2)
    )
    (setf diag (+ (+ diag1 diag2) (* (* -1 sdiag1) (fref temp (+ i (- 1))))))
    (setf diagin (/ 1.0 diag))
    (fset (fref xp i)
     (* (+ (+ dx2 (- dx1)) (* (* -1 sdiag1) (fref xp (+ i (- 1))))) diagin)
    )
    (fset (fref yp i)
     (* (+ (+ dy2 (- dy1)) (* (* -1 sdiag1) (fref yp (+ i (- 1))))) diagin)
    )
    (fset (fref temp i) (* sdiag2 diagin)) (setf dx1 dx2) (setf dy1 dy2)
    (setf diag1 diag2) (setf sdiag1 sdiag2)
  ))
  label9 (setf diag (+ diag1 (* (* -1 sdiag1) (fref temp nm1))))
  (fset (fref xp n)
   (/ (+ (+ slppnx (- dx1)) (* (* -1 sdiag1) (fref xp nm1))) diag)
  )
  (fset (fref yp n)
   (/ (+ (+ slppny (- dy1)) (* (* -1 sdiag1) (fref yp nm1))) diag)
  )
  (fdo ((i 2 (+ i 1))) ((> i n) nil)
   (tagbody (setf ibak (+ np1 (- i)))
    (fset (fref xp ibak)
     (+ (fref xp ibak) (* (* -1 (fref temp ibak)) (fref xp (+ ibak 1))))
    )
    (fset (fref yp ibak)
     (+ (fref yp ibak) (* (* -1 (fref temp ibak)) (fref yp (+ ibak 1))))
  )))
  (go end_label) label11 (setf ierr 1) (go end_label) label12 (setf ierr 2)
  (go end_label) end_label
  (return (values n x y slp1 slpn islpsw xp yp temp s sigma ierr))
))

