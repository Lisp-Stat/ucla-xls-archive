(proclaim
 '(special npardm kntdim nbreak edist level smooth degree dbreak bright bleft
   xbreak charf norm accur b a knots error buffer discrd right nstack npar
   maxstk maxpar maxknt maxaux left interp ibreak factor both break xright
   xleft errori dsctol rightx nintrp leftx xintrp xdd fright fleft fintrp
   ddtemp
) )
(declare (type fixnum npardm))
(declare (type fixnum kntdim))
(declare (type fixnum nbreak))
(declare (type fixnum edist))
(declare (type fixnum level))
(declare (type fixnum smooth))
(declare (type fixnum degree))
(declare (type (simple-array double-float (20)) dbreak))
(declare (type (simple-array double-float (20)) bright))
(declare (type (simple-array double-float (20)) bleft))
(declare (type (simple-array double-float (20)) xbreak))
(declare (type double-float charf))
(declare (type double-float norm))
(declare (type double-float accur))
(declare (type double-float b))
(declare (type double-float a))
(declare (type fixnum knots))
(declare (type double-float error))
(declare (type double-float buffer))
(declare (type t discrd))
(declare (type fixnum right))
(declare (type fixnum nstack))
(declare (type fixnum npar))
(declare (type fixnum maxstk))
(declare (type fixnum maxpar))
(declare (type fixnum maxknt))
(declare (type fixnum maxaux))
(declare (type fixnum left))
(declare (type fixnum interp))
(declare (type fixnum ibreak))
(declare (type (simple-array double-float (20)) factor))
(declare (type fixnum both))
(declare (type fixnum break))
(declare (type (simple-array double-float (50)) xright))
(declare (type (simple-array double-float (50)) xleft))
(declare (type double-float errori))
(declare (type double-float dsctol))
(declare (type fixnum rightx))
(declare (type fixnum nintrp))
(declare (type fixnum leftx))
(declare (type (simple-array double-float (18)) xintrp))
(declare (type (simple-array double-float (20)) xdd))
(declare (type (simple-array double-float (10)) fright))
(declare (type (simple-array double-float (10)) fleft))
(declare (type (simple-array double-float (18)) fintrp))
(declare (type (simple-array double-float (20 20)) ddtemp))

(defun adtake (ierr) (declare (type fixnum ierr))
 (prog ((dx 0.0d0) (ratio 0.0d0)) (declare (type double-float dx))
  (declare (type double-float ratio)) (setf break 0)
  (if (or (= nbreak 0) (> ibreak nbreak)) (go label20))
  (if (> (fref xbreak ibreak) (fref xright nstack)) (go label20))
  (if (> (fref xbreak ibreak) (fref xleft nstack)) (go label10))
  (setf break left) (if (= ibreak nbreak) (go label20))
  (if (>= (fref xbreak (+ ibreak 1)) (fref xright nstack)) (go label20))
  (setf break both) (if (= nstack maxstk) (go label30))
  (setf dx (+ (fref xbreak (+ ibreak 1)) (- (fref xleft nstack))))
  (setf ratio (/ dx (+ (dabs a) (dabs b)))) (if (<= ratio buffer) (go label30))
  (setf nstack (+ nstack 1))
  (fset (fref xleft nstack) (fref xleft (+ nstack (- 1))))
  (fset (fref xright nstack) (fref xbreak (+ ibreak 1)))
  (fset (fref xleft (+ nstack (- 1))) (fref xright nstack)) (go label20)
  label10 (setf break right)
  (if (>= (fref xbreak ibreak) (fref xright nstack)) (go label20))
  (if (= nstack maxstk) (go label30))
  (setf dx (+ (fref xbreak ibreak) (- (fref xleft nstack))))
  (setf ratio (/ dx (+ (dabs a) (dabs b)))) (if (<= ratio buffer) (go label30))
  (setf nstack (+ nstack 1))
  (fset (fref xleft nstack) (fref xleft (+ nstack (- 1))))
  (fset (fref xright nstack) (fref xbreak ibreak))
  (fset (fref xleft (+ nstack (- 1))) (fref xright nstack)) label20
  (go end_label) label30 (setf ierr 2) (go end_label) end_label
  (return (values ierr))
))

