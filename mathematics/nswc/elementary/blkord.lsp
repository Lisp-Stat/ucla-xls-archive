(defun blkord (n ia ja r c ib num iwk ierr) (declare (type fixnum n))
 (declare (type (simple-array fixnum (*)) ia))
 (declare (type (simple-array fixnum (*)) ja))
 (declare (type (simple-array fixnum (*)) r))
 (declare (type (simple-array fixnum (*)) c))
 (declare (type (simple-array fixnum (*)) ib)) (declare (type fixnum num))
 (declare (type (simple-array fixnum (*)) iwk)) (declare (type fixnum ierr))
 (prog ((npi 0) (li 0) (i 0) (length 0) (np1 0)) (declare (type fixnum npi))
  (declare (type fixnum li)) (declare (type fixnum i))
  (declare (type fixnum length)) (declare (type fixnum np1)) (setf np1 (+ n 1))
  (setf length (+ (fref ia np1) (- (fref ia 1))))
  (fdo ((i 1 (+ i 1))) ((> i n) nil)
   (tagbody (fset (fref iwk i) (+ (fref ia (+ i 1)) (- (fref ia i)))))
  )
  (multiple-value-setq (n ja length ia dummy_var r num dummy_var)
   (mc21a n ja length ia (fref iwk 1) r num (fref iwk np1))
  )
  (setf ierr (+ n (- num))) (if (/= ierr 0) (go end_label))
  (fdo ((i 1 (+ i 1))) ((> i n) nil)
   (tagbody (setf li (fref r i)) (fset (fref iwk i) (fref ia li))
    (setf npi (+ n i))
    (fset (fref iwk npi) (+ (fref ia (+ li 1)) (- (fref ia li))))
  ))
  (multiple-value-setq (n ja length dummy_var dummy_var c ib num dummy_var)
   (mc13d n ja length (fref iwk 1) (fref iwk np1) c ib num
    (fref iwk (+ (* 2 n) 1))
  ))
  (fdo ((i 1 (+ i 1))) ((> i n) nil)
   (tagbody (setf li (fref c i)) (fset (fref iwk i) (fref r li)))
  )
  (fdo ((i 1 (+ i 1))) ((> i n) nil) (tagbody (fset (fref r i) (fref iwk i))))
  (go end_label) end_label (return (values n ia ja r c ib num iwk ierr))
))

