(defun aord (a n) (declare (type (simple-array float (*)) a))
 (declare (type fixnum n))
 (prog
  ((k (make-array '(10) :element-type 'fixnum)) (s 0.0d0) (ll 0) (l 0) (j 0)
   (jmax 0) (ki 0) (ii 0) (i 0) (imax 0)
  )
  (declare (type (simple-array fixnum (*)) k)) (declare (type double-float s))
  (declare (type fixnum ll)) (declare (type fixnum l))
  (declare (type fixnum j)) (declare (type fixnum jmax))
  (declare (type fixnum ki)) (declare (type fixnum ii))
  (declare (type fixnum i)) (declare (type fixnum imax))
  (replace k '(29524) :end 0) (replace k '(9841) :end 0)
  (replace k '(3280) :end 0) (replace k '(1093) :end 0)
  (replace k '(364) :end 0) (replace k '(121) :end 0) (replace k '(40) :end 0)
  (replace k '(13) :end 0) (replace k '(4) :end 0) (replace k '(1) :end 0)
  (if (< n 2) (go end_label)) (setf imax 1)
  (fdo ((i 3 (+ i 1))) ((> i 10) nil)
   (tagbody (if (<= n (fref k i)) (go label20)) (setf imax (+ imax 1)))
  )
  label20 (setf i imax)
  (fdo ((ii 1 (+ ii 1))) ((> ii imax) nil)
   (tagbody (setf ki (fref k i)) (setf jmax (+ n (- ki)))
    (fdo ((j 1 (+ j 1))) ((> j jmax) nil)
     (tagbody (setf l j) (setf ll (+ j ki)) (setf s (fref a ll)) label30
      (if (>= (abs s) (abs (fref a l))) (go label31))
      (fset (fref a ll) (fref a l)) (setf ll l) (setf l (+ l (- ki)))
      (if (> l 0) (go label30)) label31 (fset (fref a ll) s)
    ))
    (setf i (+ i (- 1)))
  ))
  (go end_label) end_label (return (values a n))
))

