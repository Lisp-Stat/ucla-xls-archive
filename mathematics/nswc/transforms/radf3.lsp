(defun radf3 (ido l1 cc ch wa1 wa2) (declare (type fixnum ido))
 (declare (type fixnum l1))
 (declare (type (simple-array double-float (* * *)) cc))
 (declare (type (simple-array double-float (* * *)) ch))
 (declare (type (simple-array double-float (*)) wa1))
 (declare (type (simple-array double-float (*)) wa2))
 (prog
  ((ti3 0.0d0) (tr3 0.0d0) (ti2 0.0d0) (tr2 0.0d0) (ci2 0.0d0) (di3 0.0d0)
   (dr3 0.0d0) (di2 0.0d0) (dr2 0.0d0) (ic 0) (i 0) (idp2 0) (taur 0.0d0)
   (taui 0.0d0) (cr2 0.0d0) (k 0)
  )
  (declare (type double-float ti3)) (declare (type double-float tr3))
  (declare (type double-float ti2)) (declare (type double-float tr2))
  (declare (type double-float ci2)) (declare (type double-float di3))
  (declare (type double-float dr3)) (declare (type double-float di2))
  (declare (type double-float dr2)) (declare (type fixnum ic))
  (declare (type fixnum i)) (declare (type fixnum idp2))
  (declare (type double-float taur)) (declare (type double-float taui))
  (declare (type double-float cr2)) (declare (type fixnum k))
  (setq taur (- 0.5))
  (fdo ((k 1 (+ k 1))) ((> k l1) nil)
   (tagbody (setf cr2 (+ (fref cc 1 k 2) (fref cc 1 k 3)))
    (fset (fref ch 1 1 k) (+ (fref cc 1 k 1) cr2))
    (fset (fref ch 1 3 k) (* taui (+ (fref cc 1 k 3) (- (fref cc 1 k 2)))))
    (fset (fref ch ido 2 k) (+ (fref cc 1 k 1) (* taur cr2)))
  ))
  (if (= ido 1) (go end_label)) (setf idp2 (+ ido 2))
  (if (< (/ (+ ido (- 1)) 2) l1) (go label104))
  (fdo ((k 1 (+ k 1))) ((> k l1) nil)
   (tagbody
    (fdo ((i 3 (+ i 2))) ((> i ido) nil)
     (tagbody (setf ic (+ idp2 (- i)))
      (setf dr2
       (+ (* (fref wa1 (+ i (- 2))) (fref cc (+ i (- 1)) k 2))
        (* (fref wa1 (+ i (- 1))) (fref cc i k 2))
      ))
      (setf di2
       (+ (* (fref wa1 (+ i (- 2))) (fref cc i k 2))
        (* (* -1 (fref wa1 (+ i (- 1)))) (fref cc (+ i (- 1)) k 2))
      ))
      (setf dr3
       (+ (* (fref wa2 (+ i (- 2))) (fref cc (+ i (- 1)) k 3))
        (* (fref wa2 (+ i (- 1))) (fref cc i k 3))
      ))
      (setf di3
       (+ (* (fref wa2 (+ i (- 2))) (fref cc i k 3))
        (* (* -1 (fref wa2 (+ i (- 1)))) (fref cc (+ i (- 1)) k 3))
      ))
      (setf cr2 (+ dr2 dr3)) (setf ci2 (+ di2 di3))
      (fset (fref ch (+ i (- 1)) 1 k) (+ (fref cc (+ i (- 1)) k 1) cr2))
      (fset (fref ch i 1 k) (+ (fref cc i k 1) ci2))
      (setf tr2 (+ (fref cc (+ i (- 1)) k 1) (* taur cr2)))
      (setf ti2 (+ (fref cc i k 1) (* taur ci2)))
      (setf tr3 (* taui (+ di2 (- di3)))) (setf ti3 (* taui (+ dr3 (- dr2))))
      (fset (fref ch (+ i (- 1)) 3 k) (+ tr2 tr3))
      (fset (fref ch (+ ic (- 1)) 2 k) (+ tr2 (- tr3)))
      (fset (fref ch i 3 k) (+ ti2 ti3))
      (fset (fref ch ic 2 k) (+ ti3 (- ti2)))
  ))))
  (go end_label) label104
  (fdo ((i 3 (+ i 2))) ((> i ido) nil)
   (tagbody (setf ic (+ idp2 (- i)))
    (fdo ((k 1 (+ k 1))) ((> k l1) nil)
     (tagbody
      (setf dr2
       (+ (* (fref wa1 (+ i (- 2))) (fref cc (+ i (- 1)) k 2))
        (* (fref wa1 (+ i (- 1))) (fref cc i k 2))
      ))
      (setf di2
       (+ (* (fref wa1 (+ i (- 2))) (fref cc i k 2))
        (* (* -1 (fref wa1 (+ i (- 1)))) (fref cc (+ i (- 1)) k 2))
      ))
      (setf dr3
       (+ (* (fref wa2 (+ i (- 2))) (fref cc (+ i (- 1)) k 3))
        (* (fref wa2 (+ i (- 1))) (fref cc i k 3))
      ))
      (setf di3
       (+ (* (fref wa2 (+ i (- 2))) (fref cc i k 3))
        (* (* -1 (fref wa2 (+ i (- 1)))) (fref cc (+ i (- 1)) k 3))
      ))
      (setf cr2 (+ dr2 dr3)) (setf ci2 (+ di2 di3))
      (fset (fref ch (+ i (- 1)) 1 k) (+ (fref cc (+ i (- 1)) k 1) cr2))
      (fset (fref ch i 1 k) (+ (fref cc i k 1) ci2))
      (setf tr2 (+ (fref cc (+ i (- 1)) k 1) (* taur cr2)))
      (setf ti2 (+ (fref cc i k 1) (* taur ci2)))
      (setf tr3 (* taui (+ di2 (- di3)))) (setf ti3 (* taui (+ dr3 (- dr2))))
      (fset (fref ch (+ i (- 1)) 3 k) (+ tr2 tr3))
      (fset (fref ch (+ ic (- 1)) 2 k) (+ tr2 (- tr3)))
      (fset (fref ch i 3 k) (+ ti2 ti3))
      (fset (fref ch ic 2 k) (+ ti3 (- ti2)))
  ))))
  (go end_label) end_label (return (values ido l1 cc ch wa1 wa2))
))

