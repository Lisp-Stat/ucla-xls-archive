(defun radb5 (ido l1 cc ch wa1 wa2 wa3 wa4) (declare (type fixnum ido))
 (declare (type fixnum l1))
 (declare (type (simple-array double-float (* * *)) cc))
 (declare (type (simple-array double-float (* * *)) ch))
 (declare (type (simple-array double-float (*)) wa1))
 (declare (type (simple-array double-float (*)) wa2))
 (declare (type (simple-array double-float (*)) wa3))
 (declare (type (simple-array double-float (*)) wa4))
 (prog
  ((di2 0.0d0) (di5 0.0d0) (dr2 0.0d0) (dr5 0.0d0) (di4 0.0d0) (di3 0.0d0)
   (dr4 0.0d0) (dr3 0.0d0) (cr4 0.0d0) (cr5 0.0d0) (ci3 0.0d0) (ci2 0.0d0)
   (tr4 0.0d0) (tr5 0.0d0) (ti3 0.0d0) (ti2 0.0d0) (ic 0) (i 0) (idp2 0)
   (ci4 0.0d0) (ti12 0.0d0) (ti11 0.0d0) (ci5 0.0d0) (cr3 0.0d0) (tr12 0.0d0)
   (tr11 0.0d0) (cr2 0.0d0) (tr3 0.0d0) (tr2 0.0d0) (ti4 0.0d0) (ti5 0.0d0)
   (k 0)
  )
  (declare (type double-float di2)) (declare (type double-float di5))
  (declare (type double-float dr2)) (declare (type double-float dr5))
  (declare (type double-float di4)) (declare (type double-float di3))
  (declare (type double-float dr4)) (declare (type double-float dr3))
  (declare (type double-float cr4)) (declare (type double-float cr5))
  (declare (type double-float ci3)) (declare (type double-float ci2))
  (declare (type double-float tr4)) (declare (type double-float tr5))
  (declare (type double-float ti3)) (declare (type double-float ti2))
  (declare (type fixnum ic)) (declare (type fixnum i))
  (declare (type fixnum idp2)) (declare (type double-float ci4))
  (declare (type double-float ti12)) (declare (type double-float ti11))
  (declare (type double-float ci5)) (declare (type double-float cr3))
  (declare (type double-float tr12)) (declare (type double-float tr11))
  (declare (type double-float cr2)) (declare (type double-float tr3))
  (declare (type double-float tr2)) (declare (type double-float ti4))
  (declare (type double-float ti5)) (declare (type fixnum k))
  (setq tr11 0.309017)
  (fdo ((k 1 (+ k 1))) ((> k l1) nil)
   (tagbody (setf ti5 (+ (fref cc 1 3 k) (fref cc 1 3 k)))
    (setf ti4 (+ (fref cc 1 5 k) (fref cc 1 5 k)))
    (setf tr2 (+ (fref cc ido 2 k) (fref cc ido 2 k)))
    (setf tr3 (+ (fref cc ido 4 k) (fref cc ido 4 k)))
    (fset (fref ch 1 k 1) (+ (+ (fref cc 1 1 k) tr2) tr3))
    (setf cr2 (+ (+ (fref cc 1 1 k) (* tr11 tr2)) (* tr12 tr3)))
    (setf cr3 (+ (+ (fref cc 1 1 k) (* tr12 tr2)) (* tr11 tr3)))
    (setf ci5 (+ (* ti11 ti5) (* ti12 ti4)))
    (setf ci4 (+ (* ti12 ti5) (* (* -1 ti11) ti4)))
    (fset (fref ch 1 k 2) (+ cr2 (- ci5)))
    (fset (fref ch 1 k 3) (+ cr3 (- ci4))) (fset (fref ch 1 k 4) (+ cr3 ci4))
    (fset (fref ch 1 k 5) (+ cr2 ci5))
  ))
  (if (= ido 1) (go end_label)) (setf idp2 (+ ido 2))
  (if (< (/ (+ ido (- 1)) 2) l1) (go label104))
  (fdo ((k 1 (+ k 1))) ((> k l1) nil)
   (tagbody
    (fdo ((i 3 (+ i 2))) ((> i ido) nil)
     (tagbody (setf ic (+ idp2 (- i)))
      (setf ti5 (+ (fref cc i 3 k) (fref cc ic 2 k)))
      (setf ti2 (+ (fref cc i 3 k) (- (fref cc ic 2 k))))
      (setf ti4 (+ (fref cc i 5 k) (fref cc ic 4 k)))
      (setf ti3 (+ (fref cc i 5 k) (- (fref cc ic 4 k))))
      (setf tr5 (+ (fref cc (+ i (- 1)) 3 k) (- (fref cc (+ ic (- 1)) 2 k))))
      (setf tr2 (+ (fref cc (+ i (- 1)) 3 k) (fref cc (+ ic (- 1)) 2 k)))
      (setf tr4 (+ (fref cc (+ i (- 1)) 5 k) (- (fref cc (+ ic (- 1)) 4 k))))
      (setf tr3 (+ (fref cc (+ i (- 1)) 5 k) (fref cc (+ ic (- 1)) 4 k)))
      (fset (fref ch (+ i (- 1)) k 1) (+ (+ (fref cc (+ i (- 1)) 1 k) tr2) tr3)
      )
      (fset (fref ch i k 1) (+ (+ (fref cc i 1 k) ti2) ti3))
      (setf cr2 (+ (+ (fref cc (+ i (- 1)) 1 k) (* tr11 tr2)) (* tr12 tr3)))
      (setf ci2 (+ (+ (fref cc i 1 k) (* tr11 ti2)) (* tr12 ti3)))
      (setf cr3 (+ (+ (fref cc (+ i (- 1)) 1 k) (* tr12 tr2)) (* tr11 tr3)))
      (setf ci3 (+ (+ (fref cc i 1 k) (* tr12 ti2)) (* tr11 ti3)))
      (setf cr5 (+ (* ti11 tr5) (* ti12 tr4)))
      (setf ci5 (+ (* ti11 ti5) (* ti12 ti4)))
      (setf cr4 (+ (* ti12 tr5) (* (* -1 ti11) tr4)))
      (setf ci4 (+ (* ti12 ti5) (* (* -1 ti11) ti4)))
      (setf dr3 (+ cr3 (- ci4))) (setf dr4 (+ cr3 ci4)) (setf di3 (+ ci3 cr4))
      (setf di4 (+ ci3 (- cr4))) (setf dr5 (+ cr2 ci5))
      (setf dr2 (+ cr2 (- ci5))) (setf di5 (+ ci2 (- cr5)))
      (setf di2 (+ ci2 cr5))
      (fset (fref ch (+ i (- 1)) k 2)
       (+ (* (fref wa1 (+ i (- 2))) dr2) (* (* -1 (fref wa1 (+ i (- 1)))) di2))
      )
      (fset (fref ch i k 2)
       (+ (* (fref wa1 (+ i (- 2))) di2) (* (fref wa1 (+ i (- 1))) dr2))
      )
      (fset (fref ch (+ i (- 1)) k 3)
       (+ (* (fref wa2 (+ i (- 2))) dr3) (* (* -1 (fref wa2 (+ i (- 1)))) di3))
      )
      (fset (fref ch i k 3)
       (+ (* (fref wa2 (+ i (- 2))) di3) (* (fref wa2 (+ i (- 1))) dr3))
      )
      (fset (fref ch (+ i (- 1)) k 4)
       (+ (* (fref wa3 (+ i (- 2))) dr4) (* (* -1 (fref wa3 (+ i (- 1)))) di4))
      )
      (fset (fref ch i k 4)
       (+ (* (fref wa3 (+ i (- 2))) di4) (* (fref wa3 (+ i (- 1))) dr4))
      )
      (fset (fref ch (+ i (- 1)) k 5)
       (+ (* (fref wa4 (+ i (- 2))) dr5) (* (* -1 (fref wa4 (+ i (- 1)))) di5))
      )
      (fset (fref ch i k 5)
       (+ (* (fref wa4 (+ i (- 2))) di5) (* (fref wa4 (+ i (- 1))) dr5))
  )))))
  (go end_label) label104
  (fdo ((i 3 (+ i 2))) ((> i ido) nil)
   (tagbody (setf ic (+ idp2 (- i)))
    (fdo ((k 1 (+ k 1))) ((> k l1) nil)
     (tagbody (setf ti5 (+ (fref cc i 3 k) (fref cc ic 2 k)))
      (setf ti2 (+ (fref cc i 3 k) (- (fref cc ic 2 k))))
      (setf ti4 (+ (fref cc i 5 k) (fref cc ic 4 k)))
      (setf ti3 (+ (fref cc i 5 k) (- (fref cc ic 4 k))))
      (setf tr5 (+ (fref cc (+ i (- 1)) 3 k) (- (fref cc (+ ic (- 1)) 2 k))))
      (setf tr2 (+ (fref cc (+ i (- 1)) 3 k) (fref cc (+ ic (- 1)) 2 k)))
      (setf tr4 (+ (fref cc (+ i (- 1)) 5 k) (- (fref cc (+ ic (- 1)) 4 k))))
      (setf tr3 (+ (fref cc (+ i (- 1)) 5 k) (fref cc (+ ic (- 1)) 4 k)))
      (fset (fref ch (+ i (- 1)) k 1) (+ (+ (fref cc (+ i (- 1)) 1 k) tr2) tr3)
      )
      (fset (fref ch i k 1) (+ (+ (fref cc i 1 k) ti2) ti3))
      (setf cr2 (+ (+ (fref cc (+ i (- 1)) 1 k) (* tr11 tr2)) (* tr12 tr3)))
      (setf ci2 (+ (+ (fref cc i 1 k) (* tr11 ti2)) (* tr12 ti3)))
      (setf cr3 (+ (+ (fref cc (+ i (- 1)) 1 k) (* tr12 tr2)) (* tr11 tr3)))
      (setf ci3 (+ (+ (fref cc i 1 k) (* tr12 ti2)) (* tr11 ti3)))
      (setf cr5 (+ (* ti11 tr5) (* ti12 tr4)))
      (setf ci5 (+ (* ti11 ti5) (* ti12 ti4)))
      (setf cr4 (+ (* ti12 tr5) (* (* -1 ti11) tr4)))
      (setf ci4 (+ (* ti12 ti5) (* (* -1 ti11) ti4)))
      (setf dr3 (+ cr3 (- ci4))) (setf dr4 (+ cr3 ci4)) (setf di3 (+ ci3 cr4))
      (setf di4 (+ ci3 (- cr4))) (setf dr5 (+ cr2 ci5))
      (setf dr2 (+ cr2 (- ci5))) (setf di5 (+ ci2 (- cr5)))
      (setf di2 (+ ci2 cr5))
      (fset (fref ch (+ i (- 1)) k 2)
       (+ (* (fref wa1 (+ i (- 2))) dr2) (* (* -1 (fref wa1 (+ i (- 1)))) di2))
      )
      (fset (fref ch i k 2)
       (+ (* (fref wa1 (+ i (- 2))) di2) (* (fref wa1 (+ i (- 1))) dr2))
      )
      (fset (fref ch (+ i (- 1)) k 3)
       (+ (* (fref wa2 (+ i (- 2))) dr3) (* (* -1 (fref wa2 (+ i (- 1)))) di3))
      )
      (fset (fref ch i k 3)
       (+ (* (fref wa2 (+ i (- 2))) di3) (* (fref wa2 (+ i (- 1))) dr3))
      )
      (fset (fref ch (+ i (- 1)) k 4)
       (+ (* (fref wa3 (+ i (- 2))) dr4) (* (* -1 (fref wa3 (+ i (- 1)))) di4))
      )
      (fset (fref ch i k 4)
       (+ (* (fref wa3 (+ i (- 2))) di4) (* (fref wa3 (+ i (- 1))) dr4))
      )
      (fset (fref ch (+ i (- 1)) k 5)
       (+ (* (fref wa4 (+ i (- 2))) dr5) (* (* -1 (fref wa4 (+ i (- 1)))) di5))
      )
      (fset (fref ch i k 5)
       (+ (* (fref wa4 (+ i (- 2))) di5) (* (fref wa4 (+ i (- 1))) dr5))
  )))))
  (go end_label) end_label (return (values ido l1 cc ch wa1 wa2 wa3 wa4))
))

