(require "f2cl_macros")

(defun zbrent (func x1 x2 tol &key (itmax 100) (eps 3.0E-8))
 (declare (type double-float x1)) (declare (type double-float x2))
 (declare (type double-float tol)) (declare (type fixnum itmax))
 (declare (type double-float eps))
 (prog
  ((r 0.0d0) (q 0.0d0) (p 0.0d0) (s 0.0d0) (tbrent 0.0d0) (xm 0.0d0)
   (tol1 0.0d0) (e 0.0d0) (d 0.0d0) (c 0.0d0) (iter 0) (fc 0.0d0) (fb 0.0d0)
   (fa 0.0d0) (b 0.0d0) (a 0.0d0)
  )
  (declare (type double-float r)) (declare (type double-float q))
  (declare (type double-float p)) (declare (type double-float s))
  (declare (type double-float tbrent)) (declare (type double-float xm))
  (declare (type double-float tol1)) (declare (type double-float e))
  (declare (type double-float d)) (declare (type double-float c))
  (declare (type fixnum iter)) (declare (type double-float fc))
  (declare (type double-float fb)) (declare (type double-float fa))
  (declare (type double-float b)) (declare (type double-float a)) (setf a x1)
  (setf b x2) (setf fa (funcall func a)) (setf fb (funcall func b))
  (if (> (* fb fa) 0.0) (error "Root must be bracketed for ZBRENT."))
  (setf fc fb)
  (fdo ((iter 1 (+ iter 1))) ((> iter itmax) nil)
   (tagbody
    (cond
     ((> (* fb fc) 0.0) (setf c a) (setf fc fa) (setf d (+ b (- a))) (setf e d)
    ))
    (cond
     ((< (abs fc) (abs fb)) (setf a b) (setf b c) (setf c a) (setf fa fb)
      (setf fb fc) (setf fc fa)
    ))
    (setf tol1 (+ (* (* 2.0 eps) (abs b)) (* 0.5 tol)))
    (setf xm (* 0.5 (+ c (- b))))
    (cond ((or (<= (abs xm) tol1) (= fb 0.0)) (setf tbrent b) (go end_label)))
    (cond
     ((and (>= (abs e) tol1) (> (abs fa) (abs fb))) (setf s (/ fb fa))
      (cond ((= a c) (setf p (* (* 2.0 xm) s)) (setf q (+ 1.0 (- s))))
       (t (setf q (/ fa fc)) (setf r (/ fb fc))
        (setf p
         (* s
          (+ (* (* (* 2.0 xm) q) (+ q (- r)))
           (* (* -1 (+ b (- a))) (+ r (- 1.0)))
        )))
        (setf q (* (* (+ q (- 1.0)) (+ r (- 1.0))) (+ s (- 1.0))))
      ))
      (if (> p 0.0) (setf q (- q))) (setf p (abs p))
      (cond
       ((< (* 2.0 p)
         (min (+ (* (* 3.0 xm) q) (- (abs (* tol1 q)))) (abs (* e q)))
        )
        (setf e d) (setf d (/ p q))
       )
       (t (setf d xm) (setf e d))
     ))
     (t (setf d xm) (setf e d))
    )
    (setf a b) (setf fa fb)
    (cond ((> (abs d) tol1) (setf b (+ b d))) (t (setf b (+ b (sign tol1 xm))))
    )
    (setf fb (funcall func b))
  ))
  (error "ZBRENT exceeding maximum iterations.") (setf tbrent b) (go end_label)
  end_label (return tbrent)
))

