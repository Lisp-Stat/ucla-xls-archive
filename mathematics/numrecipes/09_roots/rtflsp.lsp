(require "f2cl_macros")

(defun rtflsp (func x1 x2 xacc &key (maxit 30))
 (declare (type double-float x1)) (declare (type double-float x2))
 (declare (type double-float xacc)) (declare (type fixnum maxit))
 (prog
  ((del 0.0d0) (f 0.0d0) (xrtflsp 0.0d0) (j 0) (dx 0.0d0) (swap 0.0d0)
   (xh 0.0d0) (xl 0.0d0) (fh 0.0d0) (fl 0.0d0)
  )
  (declare (type double-float del)) (declare (type double-float f))
  (declare (type double-float xrtflsp)) (declare (type fixnum j))
  (declare (type double-float dx)) (declare (type double-float swap))
  (declare (type double-float xh)) (declare (type double-float xl))
  (declare (type double-float fh)) (declare (type double-float fl))
  (setf fl (funcall func x1)) (setf fh (funcall func x2))
  (if (> (* fl fh) 0.0) (error "Root must be bracketed for false position."))
  (cond ((< fl 0.0) (setf xl x1) (setf xh x2))
   (t (setf xl x2) (setf xh x1) (setf swap fl) (setf fl fh) (setf fh swap))
  )
  (setf dx (+ xh (- xl)))
  (fdo ((j 1 (+ j 1))) ((> j maxit) nil)
   (tagbody (setf xrtflsp (+ xl (/ (* dx fl) (+ fl (- fh)))))
    (setf f (funcall func xrtflsp))
    (cond ((< f 0.0) (setf del (+ xl (- xrtflsp))) (setf xl xrtflsp) (setf fl f))
     (t (setf del (+ xh (- xrtflsp))) (setf xh xrtflsp) (setf fh f))
    )
    (setf dx (+ xh (- xl)))
    (if (or (< (abs del) xacc) (= f 0.0)) (go end_label))
  ))
  end_label
  (return xrtflsp)
))

