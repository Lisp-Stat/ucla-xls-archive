(require "f2cl_macros")
(require "ludcmp")
(require "lubksb")

(defun mnewt (ntrial x n tolx tolf &key (np 15)) (declare (type fixnum ntrial))
 (declare (type (simple-array double-float (*)) x)) (declare (type fixnum n))
 (declare (type double-float tolx)) (declare (type double-float tolf))
 (declare (type fixnum np))
 (prog
  ((alpha (make-array '(np np) :element-type 'double-float))
   (beta (make-array '(np) :element-type 'double-float))
   (indx (make-array '(np) :element-type 'fixnum)) (errx 0.0d0) (i 0)
   (errf 0.0d0) (k 0)
  )
  (declare (type (simple-array double-float (* *)) alpha))
  (declare (type (simple-array double-float (*)) beta))
  (declare (type (simple-array fixnum (*)) indx))
  (declare (type double-float errx)) (declare (type fixnum i))
  (declare (type double-float errf)) (declare (type fixnum k))
  (fdo ((k 1 (+ k 1))) ((> k ntrial) nil)
   (tagbody (multiple-value-setq (x alpha beta) (usrfun x alpha beta))
    (setf errf 0.0)
    (fdo ((i 1 (+ i 1))) ((> i n) nil)
     (tagbody (setf errf (+ errf (abs (fref beta i)))))
    )
    (if (<= errf tolf) (go end_label))
    (multiple-value-setq (alpha n np indx d) (ludcmp alpha n np indx d))
    (multiple-value-setq (alpha n np indx beta) (lubksb alpha n np indx beta))
    (setf errx 0.0)
    (fdo ((i 1 (+ i 1))) ((> i n) nil)
     (tagbody (setf errx (+ errx (abs (fref beta i))))
      (fset (fref x i) (+ (fref x i) (fref beta i)))
    ))
    (if (<= errx tolx) (go end_label))
  ))
  (go end_label) end_label (return (values ntrial x n tolx tolf))
))

