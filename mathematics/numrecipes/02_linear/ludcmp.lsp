(require "f2cl_macros")

(defun ludcmp (a n np indx d &key (nmax 100) (tiny 1.0E-20))
 (declare (type (simple-array double-float (* *)) a)) (declare (type fixnum n))
 (declare (type fixnum np)) (declare (type (simple-array fixnum (*)) indx))
 (declare (type double-float d)) (declare (type fixnum nmax))
 (declare (type double-float tiny))
 (prog
  ((vv (make-array nmax :element-type 'double-float)) (imax 0) (dum 0.0d0)
   (k 0) (sum 0.0d0) (j 0) (aamax 0.0d0) (i 0)
  )
  (declare (type (simple-array double-float (*)) vv))
  (declare (type fixnum imax)) (declare (type double-float dum))
  (declare (type fixnum k)) (declare (type double-float sum))
  (declare (type fixnum j)) (declare (type double-float aamax))
  (declare (type fixnum i)) (setf d 1.0)
  (fdo ((i 1 (+ i 1))) ((> i n) nil)
   (tagbody (setf aamax 0.0)
    (fdo ((j 1 (+ j 1))) ((> j n) nil)
     (tagbody (if (> (abs (fref a i j)) aamax) (setf aamax (abs (fref a i j))))
    ))
    (if (= aamax 0.0) (error "Singular matrix."))
    (fset (fref vv i) (/ 1.0 aamax))
  ))
  (fdo ((j 1 (+ j 1))) ((> j n) nil)
   (tagbody
    (cond
     ((> j 1)
      (fdo ((i 1 (+ i 1))) ((> i (+ j (- 1))) nil)
       (tagbody (setf sum (fref a i j))
        (cond
         ((> i 1)
          (fdo ((k 1 (+ k 1))) ((> k (+ i (- 1))) nil)
           (tagbody (setf sum (+ sum (* (* -1 (fref a i k)) (fref a k j)))))
          )
          (fset (fref a i j) sum)
    ))))))
    (setf aamax 0.0)
    (fdo ((i j (+ i 1))) ((> i n) nil)
     (tagbody (setf sum (fref a i j))
      (cond
       ((> j 1)
        (fdo ((k 1 (+ k 1))) ((> k (+ j (- 1))) nil)
         (tagbody (setf sum (+ sum (* (* -1 (fref a i k)) (fref a k j)))))
        )
        (fset (fref a i j) sum)
      ))
      (setf dum (* (fref vv i) (abs sum)))
      (cond ((>= dum aamax) (setf imax i) (setf aamax dum)))
    ))
    (cond
     ((/= j imax)
      (fdo ((k 1 (+ k 1))) ((> k n) nil)
       (tagbody (setf dum (fref a imax k)) (fset (fref a imax k) (fref a j k))
        (fset (fref a j k) dum)
      ))
      (setf d (- d)) (fset (fref vv imax) (fref vv j))
    ))
    (fset (fref indx j) imax)
    (cond
     ((/= j n) (if (= (fref a j j) 0.0) (fset (fref a j j) tiny))
      (setf dum (/ 1.0 (fref a j j)))
      (fdo ((i (+ j 1) (+ i 1))) ((> i n) nil)
       (tagbody (fset (fref a i j) (* (fref a i j) dum)))
  )))))
  (if (= (fref a n n) 0.0) (fset (fref a n n) tiny))
  (return (values a n np indx d))
))

