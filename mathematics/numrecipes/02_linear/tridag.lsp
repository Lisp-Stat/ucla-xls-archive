(require "f2cl_macros")

(defun tridag (a b c r u n &key (nmax 100))
 (declare (type (simple-array double-float (*)) a))
 (declare (type (simple-array double-float (*)) b))
 (declare (type (simple-array double-float (*)) c))
 (declare (type (simple-array double-float (*)) r))
 (declare (type (simple-array double-float (*)) u)) (declare (type fixnum n))
 (declare (type fixnum nmax))
 (prog
  ((gam (make-array nmax :element-type 'double-float)) (j 0) (bet 0.0d0))
  (declare (type (simple-array double-float (*)) gam))
  (declare (type fixnum j)) (declare (type double-float bet))
  (if (= (fref b 1) 0.0) (error "Element (1,1) zero. Rearrange Equations"))
  (setf bet (fref b 1))
  (fset (fref u 1) (/ (fref r 1) bet))
  (fdo ((j 2 (+ j 1))) ((> j n) nil)
   (tagbody (fset (fref gam j) (/ (fref c (+ j (- 1))) bet))
    (setf bet (+ (fref b j) (* (* -1 (fref a j)) (fref gam j))))
    (if (= bet 0.0) (error "Zero Pivot"))
    (fset (fref u j)
     (/ (+ (fref r j) (* (* -1 (fref a j)) (fref u (+ j (- 1))))) bet)
  )))
  (fdo ((j (+ n (- 1)) (+ j (- 1)))) ((> j 1) nil)
   (tagbody
    (fset (fref u j)
     (+ (fref u j) (* (* -1 (fref gam (+ j 1))) (fref u (+ j 1))))
  )))
  (return (values a b c r u n))
))

