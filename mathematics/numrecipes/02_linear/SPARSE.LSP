(defun sparse (b n asub atsub x rsq &key (nmax 500) (eps 1.0E-6))
 (declare (type (simple-array double-float (*)) b)) (declare (type fixnum n))
 (declare (type (simple-array double-float (*)) x))
 (declare (type double-float rsq)) (declare (type fixnum nmax))
 (declare (type double-float eps))
 (prog
  ((g (make-array '(nmax) :element-type 'double-float))
   (h (make-array '(nmax) :element-type 'double-float))
   (xi (make-array '(nmax) :element-type 'double-float))
   (xj (make-array '(nmax) :element-type 'double-float)) (gam 0.0d0)
   (dgg 0.0d0) (gg 0.0d0) (aden 0.0d0) (anum 0.0d0) (iter 0) (j 0) (bsq 0.0d0)
   (rp 0.0d0) (irst 0) (eps2 0.0d0)
  )
  (declare (type (simple-array double-float (*)) g))
  (declare (type (simple-array double-float (*)) h))
  (declare (type (simple-array double-float (*)) xi))
  (declare (type (simple-array double-float (*)) xj))
  (declare (type double-float gam)) (declare (type double-float dgg))
  (declare (type double-float gg)) (declare (type double-float aden))
  (declare (type double-float anum)) (declare (type fixnum iter))
  (declare (type fixnum j)) (declare (type double-float bsq))
  (declare (type double-float rp)) (declare (type fixnum irst))
  (declare (type double-float eps2)) (setf eps2 (* n (expt eps 2)))
  (setf irst 0) label1 (setf irst (+ irst 1))
  (multiple-value-setq (x xi) (asub x xi)) (setf rp 0.0) (setf bsq 0.0)
  (fdo ((j 1 (+ j 1))) ((> j n) nil)
   (tagbody (setf bsq (+ bsq (expt (fref b j) 2)))
    (fset (fref xi j) (+ (fref xi j) (- (fref b j))))
    (setf rp (+ rp (expt (fref xi j) 2)))
  ))
  (multiple-value-setq (xi g) (atsub xi g))
  (fdo ((j 1 (+ j 1))) ((> j n) nil)
   (tagbody (fset (fref g j) (- (fref g j))) (fset (fref h j) (fref g j)))
  )
  (fdo ((iter 1 (+ iter 1))) ((> iter (* 10 n)) nil)
   (tagbody (multiple-value-setq (h xi) (asub h xi)) (setf anum 0.0)
    (setf aden 0.0)
    (fdo ((j 1 (+ j 1))) ((> j n) nil)
     (tagbody (setf anum (+ anum (* (fref g j) (fref h j))))
      (setf aden (+ aden (expt (fref xi j) 2)))
    ))
    (if (= aden 0.0) (error "very singular matrix")) (setf anum (/ anum aden))
    (fdo ((j 1 (+ j 1))) ((> j n) nil)
     (tagbody (fset (fref xi j) (fref x j))
      (fset (fref x j) (+ (fref x j) (* anum (fref h j))))
    ))
    (multiple-value-setq (x xj) (asub x xj)) (setf rsq 0.0)
    (fdo ((j 1 (+ j 1))) ((> j n) nil)
     (tagbody (fset (fref xj j) (+ (fref xj j) (- (fref b j))))
      (setf rsq (+ rsq (expt (fref xj j) 2)))
    ))
    (if (or (= rsq rp) (<= rsq (* bsq eps2))) (go end_label))
    (cond
     ((> rsq rp)
      (fdo ((j 1 (+ j 1))) ((> j n) nil)
       (tagbody (fset (fref x j) (fref xi j)))
      )
      (if (>= irst 3) (go end_label)) (go label1)
    ))
    (setf rp rsq) (multiple-value-setq (xj xi) (atsub xj xi)) (setf gg 0.0)
    (setf dgg 0.0)
    (fdo ((j 1 (+ j 1))) ((> j n) nil)
     (tagbody (setf gg (+ gg (expt (fref g j) 2)))
      (setf dgg (+ dgg (* (+ (fref xi j) (fref g j)) (fref xi j))))
    ))
    (if (= gg 0.0) (go end_label)) (setf gam (/ dgg gg))
    (fdo ((j 1 (+ j 1))) ((> j n) nil)
     (tagbody (fset (fref g j) (- (fref xi j)))
      (fset (fref h j) (+ (fref g j) (* gam (fref h j))))
  ))))
  (error "too many iterations") (go end_label) end_label
  (return (values b n asub atsub x rsq))
))

