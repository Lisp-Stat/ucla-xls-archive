(defun polin2 (x1a x2a ya m n x1 x2 y dy &key (nmax 20) (mmax 20))
 (declare (type (simple-array double-float (*)) x1a))
 (declare (type (simple-array double-float (*)) x2a))
 (declare (type (simple-array double-float (* *)) ya))
 (declare (type fixnum m)) (declare (type fixnum n))
 (declare (type double-float x1)) (declare (type double-float x2))
 (declare (type double-float y)) (declare (type double-float dy))
 (declare (type fixnum nmax)) (declare (type fixnum mmax))
 (prog
  ((yntmp (make-array '(nmax) :element-type 'double-float))
   (ymtmp (make-array '(mmax) :element-type 'double-float)) (k 0) (j 0)
  )
  (declare (type (simple-array double-float (*)) yntmp))
  (declare (type (simple-array double-float (*)) ymtmp))
  (declare (type fixnum k)) (declare (type fixnum j))
  (fdo ((j 1 (+ j 1))) ((> j m) nil)
   (tagbody
    (fdo ((k 1 (+ k 1))) ((> k n) nil)
     (tagbody (fset (fref yntmp k) (fref ya j k)))
    )
    (multiple-value-setq (x2a yntmp n x2 dummy_var dy)
     (polint x2a yntmp n x2 (fref ymtmp j) dy)
  )))
  (multiple-value-setq (x1a ymtmp m x1 y dy) (polint x1a ymtmp m x1 y dy))
  (return (values x1a x2a ya m n x1 x2 y dy))
))

