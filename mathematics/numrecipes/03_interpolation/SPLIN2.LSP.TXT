(defun splin2 (x1a x2a ya y2a m n x1 x2 y &key (nn 100))
 (declare (type (simple-array double-float (*)) x1a))
 (declare (type (simple-array double-float (*)) x2a))
 (declare (type (simple-array double-float (* *)) ya))
 (declare (type (simple-array double-float (* *)) y2a))
 (declare (type fixnum m)) (declare (type fixnum n))
 (declare (type double-float x1)) (declare (type double-float x2))
 (declare (type double-float y)) (declare (type fixnum nn))
 (prog
  ((ytmp (make-array '(nn) :element-type 'double-float))
   (y2tmp (make-array '(nn) :element-type 'double-float))
   (yytmp (make-array '(nn) :element-type 'double-float)) (k 0) (j 0)
  )
  (declare (type (simple-array double-float (*)) ytmp))
  (declare (type (simple-array double-float (*)) y2tmp))
  (declare (type (simple-array double-float (*)) yytmp))
  (declare (type fixnum k)) (declare (type fixnum j))
  (fdo ((j 1 (+ j 1))) ((> j m) nil)
   (tagbody
    (fdo ((k 1 (+ k 1))) ((> k n) nil)
     (tagbody (fset (fref ytmp k) (fref ya j k))
      (fset (fref y2tmp k) (fref y2a j k))
    ))
    (multiple-value-setq (x2a ytmp y2tmp n x2 dummy_var)
     (splint x2a ytmp y2tmp n x2 (fref yytmp j))
  )))
  (multiple-value-setq (x1a yytmp m dummy_var dummy_var y2tmp)
   (spline x1a yytmp m 1.0E30 1.0E30 y2tmp)
  )
  (multiple-value-setq (x1a yytmp y2tmp m x1 y) (splint x1a yytmp y2tmp m x1 y)
  )
  (return (values x1a x2a ya y2a m n x1 x2 y))
))

