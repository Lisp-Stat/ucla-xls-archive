(defun polcof (xa ya n cof &key (nmax 15))
 (declare (type (simple-array double-float (*)) xa))
 (declare (type (simple-array double-float (*)) ya)) (declare (type fixnum n))
 (declare (type (simple-array double-float (*)) cof))
 (declare (type fixnum nmax))
 (prog
  ((x (make-array '(nmax) :element-type 'double-float))
   (y (make-array '(nmax) :element-type 'double-float)) (i 0) (k 0)
   (xmin 0.0d0) (j 0)
  )
  (declare (type (simple-array double-float (*)) x))
  (declare (type (simple-array double-float (*)) y)) (declare (type fixnum i))
  (declare (type fixnum k)) (declare (type double-float xmin))
  (declare (type fixnum j))
  (fdo ((j 1 (+ j 1))) ((> j n) nil)
   (tagbody (fset (fref x j) (fref xa j)) (fset (fref y j) (fref ya j)))
  )
  (fdo ((j 1 (+ j 1))) ((> j n) nil)
   (tagbody
    (multiple-value-setq (x y dummy_var dummy_var dummy_var dy)
     (polint x y (+ (+ n 1) (- j)) 0.0 (fref cof j) dy)
    )
    (setf xmin 1.0E38) (setf k 0)
    (fdo ((i 1 (+ i 1))) ((> i (+ (+ n 1) (- j))) nil)
     (tagbody
      (cond ((< (abs (fref x i)) xmin) (setf xmin (abs (fref x i))) (setf k i))
      )
      (if (/= (fref x i) 0.0)
       (fset (fref y i) (/ (+ (fref y i) (- (fref cof j))) (fref x i)))
    )))
    (cond
     ((< k (+ (+ n 1) (- j)))
      (fdo ((i (+ k 1) (+ i 1))) ((> i (+ (+ n 1) (- j))) nil)
       (tagbody (fset (fref y (+ i (- 1))) (fref y i))
        (fset (fref x (+ i (- 1))) (fref x i))
  ))))))
  (return (values xa ya n cof))
))

