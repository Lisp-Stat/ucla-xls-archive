(defun ratint (xa ya n x y dy &key (nmax 10) (tiny 1.0E-25))
 (declare (type (simple-array double-float (*)) xa))
 (declare (type (simple-array double-float (*)) ya)) (declare (type fixnum n))
 (declare (type double-float x)) (declare (type double-float y))
 (declare (type double-float dy)) (declare (type fixnum nmax))
 (declare (type double-float tiny))
 (prog
  ((c (make-array '(nmax) :element-type 'double-float))
   (d (make-array '(nmax) :element-type 'double-float)) (dd 0.0d0) (t_ 0.0d0)
   (w 0.0d0) (m 0) (h 0.0d0) (i 0) (hh 0.0d0) (ns 0)
  )
  (declare (type (simple-array double-float (*)) c))
  (declare (type (simple-array double-float (*)) d))
  (declare (type double-float dd)) (declare (type double-float t_))
  (declare (type double-float w)) (declare (type fixnum m))
  (declare (type double-float h)) (declare (type fixnum i))
  (declare (type double-float hh)) (declare (type fixnum ns)) (setf ns 1)
  (setf hh (abs (+ x (- (fref xa 1)))))
  (fdo ((i 1 (+ i 1))) ((> i n) nil)
   (tagbody (setf h (abs (+ x (- (fref xa i)))))
    (cond ((= h 0.0) (setf y (fref ya i)) (setf dy 0.0) (go end_label))
     ((< h hh) (setf ns i) (setf hh h))
    )
    (fset (fref c i) (fref ya i)) (fset (fref d i) (+ (fref ya i) tiny))
  ))
  (setf y (fref ya ns)) (setf ns (+ ns (- 1)))
  (fdo ((m 1 (+ m 1))) ((> m (+ n (- 1))) nil)
   (tagbody
    (fdo ((i 1 (+ i 1))) ((> i (+ n (- m))) nil)
     (tagbody (setf w (+ (fref c (+ i 1)) (- (fref d i))))
      (setf h (+ (fref xa (+ i m)) (- x)))
      (setf t_ (/ (* (+ (fref xa i) (- x)) (fref d i)) h))
      (setf dd (+ t_ (- (fref c (+ i 1))))) (if (= dd 0.0) (error nil))
      (setf dd (/ w dd)) (fset (fref d i) (* (fref c (+ i 1)) dd))
      (fset (fref c i) (* t_ dd))
    ))
    (cond ((< (* 2 ns) (+ n (- m))) (setf dy (fref c (+ ns 1))))
     (t (setf dy (fref d ns)) (setf ns (+ ns (- 1))))
    )
    (setf y (+ y dy))
  ))
  (go end_label) end_label (return (values xa ya n x y dy))
))

