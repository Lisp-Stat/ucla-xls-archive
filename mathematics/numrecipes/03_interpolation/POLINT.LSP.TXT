(defun polint (xa ya n x y dy &key (nmax 10))
 (declare (type (simple-array double-float (*)) xa))
 (declare (type (simple-array double-float (*)) ya)) (declare (type fixnum n))
 (declare (type double-float x)) (declare (type double-float y))
 (declare (type double-float dy)) (declare (type fixnum nmax))
 (prog
  ((c (make-array '(nmax) :element-type 'double-float))
   (d (make-array '(nmax) :element-type 'double-float)) (den 0.0d0) (w 0.0d0)
   (hp 0.0d0) (ho 0.0d0) (m 0) (dift 0.0d0) (i 0) (dif 0.0d0) (ns 0)
  )
  (declare (type (simple-array double-float (*)) c))
  (declare (type (simple-array double-float (*)) d))
  (declare (type double-float den)) (declare (type double-float w))
  (declare (type double-float hp)) (declare (type double-float ho))
  (declare (type fixnum m)) (declare (type double-float dift))
  (declare (type fixnum i)) (declare (type double-float dif))
  (declare (type fixnum ns)) (setf ns 1) (setf dif (abs (+ x (- (fref xa 1)))))
  (fdo ((i 1 (+ i 1))) ((> i n) nil)
   (tagbody (setf dift (abs (+ x (- (fref xa i)))))
    (cond ((< dift dif) (setf ns i) (setf dif dift)))
    (fset (fref c i) (fref ya i)) (fset (fref d i) (fref ya i))
  ))
  (setf y (fref ya ns)) (setf ns (+ ns (- 1)))
  (fdo ((m 1 (+ m 1))) ((> m (+ n (- 1))) nil)
   (tagbody
    (fdo ((i 1 (+ i 1))) ((> i (+ n (- m))) nil)
     (tagbody (setf ho (+ (fref xa i) (- x)))
      (setf hp (+ (fref xa (+ i m)) (- x)))
      (setf w (+ (fref c (+ i 1)) (- (fref d i)))) (setf den (+ ho (- hp)))
      (if (= den 0.0) (error nil)) (setf den (/ w den))
      (fset (fref d i) (* hp den)) (fset (fref c i) (* ho den))
    ))
    (cond ((< (* 2 ns) (+ n (- m))) (setf dy (fref c (+ ns 1))))
     (t (setf dy (fref d ns)) (setf ns (+ ns (- 1))))
    )
    (setf y (+ y dy))
  ))
  (return (values xa ya n x y dy))
))

