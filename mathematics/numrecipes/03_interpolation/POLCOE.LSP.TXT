(defun polcoe (x y n cof &key (nmax 15))
 (declare (type (simple-array double-float (*)) x))
 (declare (type (simple-array double-float (*)) y)) (declare (type fixnum n))
 (declare (type (simple-array double-float (*)) cof))
 (declare (type fixnum nmax))
 (prog
  ((s (make-array '(nmax) :element-type 'double-float)) (b 0.0d0) (ff 0.0d0)
   (k 0) (phi 0.0d0) (j 0) (i 0)
  )
  (declare (type (simple-array double-float (*)) s))
  (declare (type double-float b)) (declare (type double-float ff))
  (declare (type fixnum k)) (declare (type double-float phi))
  (declare (type fixnum j)) (declare (type fixnum i))
  (fdo ((i 1 (+ i 1))) ((> i n) nil)
   (tagbody (fset (fref s i) 0.0) (fset (fref cof i) 0.0))
  )
  (fset (fref s n) (- (fref x 1)))
  (fdo ((i 2 (+ i 1))) ((> i n) nil)
   (tagbody
    (fdo ((j (+ (+ n 1) (- i)) (+ j 1))) ((> j (+ n (- 1))) nil)
     (tagbody
      (fset (fref s j) (+ (fref s j) (* (* -1 (fref x i)) (fref s (+ j 1)))))
    ))
    (fset (fref s n) (+ (fref s n) (- (fref x i))))
  ))
  (fdo ((j 1 (+ j 1))) ((> j n) nil)
   (tagbody (setf phi n)
    (fdo ((k (+ n (- 1)) (+ k (- 1)))) ((> k 1) nil)
     (tagbody (setf phi (+ (* k (fref s (+ k 1))) (* (fref x j) phi))))
    )
    (setf ff (/ (fref y j) phi)) (setf b 1.0)
    (fdo ((k n (+ k (- 1)))) ((> k 1) nil)
     (tagbody (fset (fref cof k) (+ (fref cof k) (* b ff)))
      (setf b (+ (fref s k) (* (fref x j) b)))
  ))))
  (return (values x y n cof))
))

