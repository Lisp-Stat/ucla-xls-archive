(defun trapzd (func a b s n) (declare (type double-float a))
 (declare (type double-float b)) (declare (type double-float s))
 (declare (type fixnum n))
 (prog ((j 0) (sum 0.0d0) (x 0.0d0) (del 0.0d0) (tnm 0.0d0) (it 0))
  (declare (type fixnum j)) (declare (type double-float sum))
  (declare (type double-float x)) (declare (type double-float del))
  (declare (type double-float tnm)) (declare (type fixnum it))
  (cond
   ((= n 1)
    (setf s (* (* 0.5 (+ b (- a))) (+ (funcall (func a)) (funcall (func b)))))
    (setf it 1)
   )
   (t (setf tnm it) (setf del (/ (+ b (- a)) tnm)) (setf x (+ a (* 0.5 del)))
    (setf sum 0.0)
    (fdo ((j 1 (+ j 1))) ((> j it) nil)
     (tagbody (setf sum (+ sum (funcall (func x)))) (setf x (+ x del)))
    )
    (setf s (* 0.5 (+ s (/ (* (+ b (- a)) sum) tnm)))) (setf it (* 2 it))
  ))
  (return (values func a b s n))
))

