(require "f2cl_macros")

(defun dbrent (ax bx cx f df tol xmin &key (itmax 100) (zeps 1.0E-10))
 (declare (type double-float ax)) (declare (type double-float bx))
 (declare (type double-float cx)) (declare (type double-float tol))
 (declare (type double-float xmin)) (declare (type fixnum itmax))
 (declare (type double-float zeps))
 (prog
  ((ok1 nil) (ok2 nil) (dbrent 0.0d0) (du 0.0d0) (fu 0.0d0) (u 0.0d0) (d 0.0d0)
   (olde 0.0d0) (u2 0.0d0) (u1 0.0d0) (d2 0.0d0) (d1 0.0d0) (tol2 0.0d0)
   (tol1 0.0d0) (xm 0.0d0) (iter 0) (dw 0.0d0) (dv 0.0d0) (dx 0.0d0) (fw 0.0d0)
   (fv 0.0d0) (fx 0.0d0) (e 0.0d0) (x 0.0d0) (w 0.0d0) (v 0.0d0) (b 0.0d0)
   (a 0.0d0)
  )
  (declare (type t ok1)) (declare (type t ok2))
  (declare (type double-float dbrent)) (declare (type double-float du))
  (declare (type double-float fu)) (declare (type double-float u))
  (declare (type double-float d)) (declare (type double-float olde))
  (declare (type double-float u2)) (declare (type double-float u1))
  (declare (type double-float d2)) (declare (type double-float d1))
  (declare (type double-float tol2)) (declare (type double-float tol1))
  (declare (type double-float xm)) (declare (type fixnum iter))
  (declare (type double-float dw)) (declare (type double-float dv))
  (declare (type double-float dx)) (declare (type double-float fw))
  (declare (type double-float fv)) (declare (type double-float fx))
  (declare (type double-float e)) (declare (type double-float x))
  (declare (type double-float w)) (declare (type double-float v))
  (declare (type double-float b)) (declare (type double-float a))
  (setf a (min ax cx)) (setf b (max ax cx)) (setf v bx) (setf w v) (setf x v)
  (setf e 0.0) (setf fx (funcall (f x))) (setf fv fx) (setf fw fx)
  (setf dx (funcall (df x))) (setf dv dx) (setf dw dx)
  (fdo ((iter 1 (+ iter 1))) ((> iter itmax) nil)
   (tagbody (setf xm (* 0.5 (+ a b))) (setf tol1 (+ (* tol (abs x)) zeps))
    (setf tol2 (* 2.0 tol1))
    (if (abs (x - xm) <= (tol2 - 0.5 * (b - a))) (go label3))
    (cond
     ((> (abs e) tol1) (setf d1 (* 2.0 (+ b (- a)))) (setf d2 d1)
      (if (/= dw dx) (setf d1 (/ (* (+ w (- x)) dx) (+ dx (- dw)))))
      (if (/= dv dx) (setf d2 (/ (* (+ v (- x)) dx) (+ dx (- dv)))))
      (setf u1 (+ x d1)) (setf u2 (+ x d2))
      (setf ok1 (and (> (* (+ a (- u1)) (+ u1 (- b))) 0.0) (<= (* dx d1) 0.0)))
      (setf ok2 (and (> (* (+ a (- u2)) (+ u2 (- b))) 0.0) (<= (* dx d2) 0.0)))
      (setf olde e) (setf e d)
      (cond ((not (or ok1 ok2)) (go label1))
       ((and ok1 ok2)
        (cond ((< (abs d1) (abs d2)) (setf d d1)) (t (setf d d2)))
       )
       (ok1 (setf d d1)) (t (setf d d2))
      )
      (if (> (abs d) (abs (* 0.5 olde))) (go label1)) (setf u (+ x d))
      (if (or (< (+ u (- a)) tol2) (< (+ b (- u)) tol2))
       (setf d (sign tol1 (+ xm (- x))))
      )
      (go label2)
    ))
    label1 (cond ((>= dx 0.0) (setf e (+ a (- x)))) (t (setf e (+ b (- x)))))
    (setf d (* 0.5 e)) label2
    (cond ((>= (abs d) tol1) (setf u (+ x d)) (setf fu (funcall (f u))))
     (t (setf u (+ x (sign tol1 d))) (setf fu (funcall (f u)))
      (if (> fu fx) (go label3))
    ))
    (setf du (funcall (df u)))
    (cond
     ((<= fu fx) (cond ((>= u x) (setf a x)) (t (setf b x))) (setf v w)
      (setf fv fw) (setf dv dw) (setf w x) (setf fw fx) (setf dw dx) (setf x u)
      (setf fx fu) (setf dx du)
     )
     (t (cond ((< u x) (setf a u)) (t (setf b u)))
      (cond
       ((or (<= fu fw) (= w x)) (setf v w) (setf fv fw) (setf dv dw) (setf w u)
        (setf fw fu) (setf dw du)
       )
       ((or (<= fu fv) (= v x) (= v w)) (setf v u) (setf fv fu) (setf dv du))
  )))))
  (error "DBRENT exceeded maximum iterations.") label3 (setf xmin x)
  (setf dbrent fx) (return dbrent)
))

