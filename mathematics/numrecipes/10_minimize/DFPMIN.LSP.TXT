(require "f2cl_macros")

(defun dfpmin (p n ftol iter fret &key (nmax 50) (itmax 200) (eps 1.0E-10))
 (declare (type (simple-array double-float (*)) p)) (declare (type fixnum n))
 (declare (type double-float ftol)) (declare (type fixnum iter))
 (declare (type double-float fret)) (declare (type fixnum nmax))
 (declare (type fixnum itmax)) (declare (type double-float eps))
 (prog
  ((hessin (make-array (list nmax nmax) :element-type 'double-float))
   (xi (make-array nmax :element-type 'double-float))
   (g (make-array nmax :element-type 'double-float))
   (dg (make-array nmax :element-type 'double-float))
   (hdg (make-array nmax :element-type 'double-float)) (fad 0.0d0)
   (fae 0.0d0) (fac 0.0d0) (j 0) (i 0) (fp 0.0d0)
  )
  (declare (type (simple-array double-float (* *)) hessin))
  (declare (type (simple-array double-float (*)) xi))
  (declare (type (simple-array double-float (*)) g))
  (declare (type (simple-array double-float (*)) dg))
  (declare (type (simple-array double-float (* *)) hdg))
  (declare (type double-float fad)) (declare (type double-float fae))
  (declare (type double-float fac)) (declare (type fixnum j))
  (declare (type fixnum i)) (declare (type double-float fp)) (setf fp (func p))
  (multiple-value-setq (p g) (dfunc p g))
  (fdo ((i 1 (+ i 1))) ((> i n) nil)
   (tagbody
    (fdo ((j 1 (+ j 1))) ((> j n) nil) (tagbody (fset (fref hessin i j) 0.0)))
    (fset (fref hessin i i) 1.0) (fset (fref xi i) (- (fref g i)))
  ))
  (fdo ((iter 1 (+ iter 1))) ((> iter itmax) nil)
   (tagbody (multiple-value-setq (p xi n fret) (linmin p xi n fret))
    (if
     (<= (* 2.0 (abs (+ fret (- fp)))) (* ftol (+ (+ (abs fret) (abs fp)) eps))
     )
     (go end_label)
    )
    (setf fp fret)
    (fdo ((i 1 (+ i 1))) ((> i n) nil) (tagbody (fset (fref dg i) (fref g i))))
    (setf fret (func p)) (multiple-value-setq (p g) (dfunc p g))
    (fdo ((i 1 (+ i 1))) ((> i n) nil)
     (tagbody (fset (fref dg i) (+ (fref g i) (- (fref dg i)))))
    )
    (fdo ((i 1 (+ i 1))) ((> i n) nil)
     (tagbody (fset (fref hdg i) 0.0)
      (fdo ((j 1 (+ j 1))) ((> j n) nil)
       (tagbody
        (fset (fref hdg i) (+ (fref hdg i) (* (fref hessin i j) (fref dg j))))
    ))))
    (setf fac 0.0) (setf fae 0.0)
    (fdo ((i 1 (+ i 1))) ((> i n) nil)
     (tagbody (setf fac (+ fac (* (fref dg i) (fref xi i))))
      (setf fae (+ fae (* (fref dg i) (fref hdg i))))
    ))
    (setf fac (/ 1.0 fac)) (setf fad (/ 1.0 fae))
    (fdo ((i 1 (+ i 1))) ((> i n) nil)
     (tagbody
      (fset (fref dg i) (+ (* fac (fref xi i)) (* (* -1 fad) (fref hdg i))))
    ))
    (fdo ((i 1 (+ i 1))) ((> i n) nil)
     (tagbody
      (fdo ((j 1 (+ j 1))) ((> j n) nil)
       (tagbody
        (fset (fref hessin i j)
         (+
          (+ (+ (fref hessin i j) (* (* fac (fref xi i)) (fref xi j)))
           (* (* (* -1 fad) (fref hdg i)) (fref hdg j))
          )
          (* (* fae (fref dg i)) (fref dg j))
    ))))))
    (fdo ((i 1 (+ i 1))) ((> i n) nil)
     (tagbody (fset (fref xi i) 0.0)
      (fdo ((j 1 (+ j 1))) ((> j n) nil)
       (tagbody
        (fset (fref xi i)
         (+ (fref xi i) (* (* -1 (fref hessin i j)) (fref g j)))
  )))))))
  (error "too many iterations in DFPMIN") (go end_label) end_label
  (return (values p n ftol iter fret))
))

