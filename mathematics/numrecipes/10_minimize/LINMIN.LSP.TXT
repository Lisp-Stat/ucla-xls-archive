(require "f2cl_macros")
(require "brent")

(proclaim '(special xicom pcom ncom))
(declare (type (simple-array double-float (nmax)) xicom))
(declare (type (simple-array double-float (nmax)) pcom))
(declare (type fixnum ncom))

(defun linmin (p xi n fret &key (nmax 50) (tol 1.0E-4))
 (declare (type (simple-array double-float (*)) p))
 (declare (type (simple-array double-float (*)) xi)) (declare (type fixnum n))
 (declare (type double-float fret)) (declare (type fixnum nmax))
 (declare (type double-float tol))
 (prog ((xmin 0.0d0) (bx 0.0d0) (xx 0.0d0) (ax 0.0d0) (j 0))
  (declare (type double-float xmin)) (declare (type double-float bx))
  (declare (type double-float xx)) (declare (type double-float ax))
  (declare (type fixnum j)) (setf ncom n)
  (fdo ((j 1 (+ j 1))) ((> j n) nil)
   (tagbody (fset (fref pcom j) (fref p j)) (fset (fref xicom j) (fref xi j)))
  )
  (setf ax 0.0) (setf xx 1.0) (setf bx 2.0)
  (multiple-value-setq (ax xx bx fa fx fb f1dim)
   (mnbrak ax xx bx fa fx fb f1dim)
  )
  (setf fret (brent ax xx bx f1dim tol xmin))
  (fdo ((j 1 (+ j 1))) ((> j n) nil)
   (tagbody (fset (fref xi j) (* xmin (fref xi j)))
    (fset (fref p j) (+ (fref p j) (fref xi j)))
  ))
  (return (values p xi n fret))
))

(defun f1dim (x &key (nmax 50)) (declare (type double-float x))
 (declare (type fixnum nmax))
 (prog
  ((xt (make-array '(nmax) :element-type 'double-float)) (f1dim 0.0d0) (j 0))
  (declare (type (simple-array double-float (*)) xt))
  (declare (type double-float f1dim)) (declare (type fixnum j))
  (fdo ((j 1 (+ j 1))) ((> j ncom) nil)
   (tagbody (fset (fref xt j) (+ (fref pcom j) (* x (fref xicom j)))))
  )
  (setf f1dim (func xt)) (return f1dim)
))

