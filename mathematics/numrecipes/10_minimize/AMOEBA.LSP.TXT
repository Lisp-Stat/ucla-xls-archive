(require "f2cl_macros")

(defun amoeba
 (p y mp np ndim ftol funk iter &key (nmax 20) (alpha 1.0) (beta 0.5)
  (gamma 2.0) (itmax 500)
 )
 (declare (type (simple-array double-float (* *)) p))
 (declare (type (simple-array double-float (*)) y)) (declare (type fixnum mp))
 (declare (type fixnum np)) (declare (type fixnum ndim))
 (declare (type double-float ftol)) (declare (type fixnum iter))
 (declare (type fixnum nmax)) (declare (type double-float alpha))
 (declare (type double-float beta)) (declare (type double-float gamma))
 (declare (type fixnum itmax))
 (prog
  ((pr (make-array nmax :element-type 'double-float))
   (prr (make-array nmax :element-type 'double-float))
   (pbar (make-array nmax :element-type 'double-float)) (yprr 0.0d0)
   (ypr 0.0d0) (j 0) (rtol 0.0d0) (i 0) (inhi 0) (ihi 0) (ilo 0) (mpts 0)
  )
  (declare (type (simple-array double-float (*)) pr))
  (declare (type (simple-array double-float (*)) prr))
  (declare (type (simple-array double-float (*)) pbar))
  (declare (type double-float yprr)) (declare (type double-float ypr))
  (declare (type fixnum j)) (declare (type double-float rtol))
  (declare (type fixnum i)) (declare (type fixnum inhi))
  (declare (type fixnum ihi)) (declare (type fixnum ilo))
  (declare (type fixnum mpts)) (setf mpts (+ ndim 1)) (setf iter 0) label1
  (setf ilo 1)
  (cond ((> (fref y 1) (fref y 2)) (setf ihi 1) (setf inhi 2))
   (t (setf ihi 2) (setf inhi 1))
  )
  (fdo ((i 1 (+ i 1))) ((> i mpts) nil)
   (tagbody (if (< (fref y i) (fref y ilo)) (setf ilo i))
    (cond ((> (fref y i) (fref y ihi)) (setf inhi ihi) (setf ihi i))
     ((> (fref y i) (fref y inhi)) (if (/= i ihi) (setf inhi i)))
  )))
  (setf rtol
   (/ (* 2.0 (abs (+ (fref y ihi) (- (fref y ilo)))))
    (+ (abs (fref y ihi)) (abs (fref y ilo)))
  ))
  (if (< rtol ftol) (go end_label))
  (if (= iter itmax) (error "Amoeba exceeding maximum iterations."))
  (setf iter (+ iter 1))
  (fdo ((j 1 (+ j 1))) ((> j ndim) nil) (tagbody (fset (fref pbar j) 0.0)))
  (fdo ((i 1 (+ i 1))) ((> i mpts) nil)
   (tagbody
    (cond
     ((/= i ihi)
      (fdo ((j 1 (+ j 1))) ((> j ndim) nil)
       (tagbody (fset (fref pbar j) (+ (fref pbar j) (fref p i j))))
  )))))
  (fdo ((j 1 (+ j 1))) ((> j ndim) nil)
   (tagbody (fset (fref pbar j) (/ (fref pbar j) ndim))
    (fset (fref pr j)
     (+ (* (+ 1.0 alpha) (fref pbar j)) (* (* -1 alpha) (fref p ihi j)))
  )))
  (setf ypr (funcall (funk pr)))
  (cond
   ((<= ypr (fref y ilo))
    (fdo ((j 1 (+ j 1))) ((> j ndim) nil)
     (tagbody
      (fset (fref prr j)
       (+ (* gamma (fref pr j)) (* (+ 1.0 (- gamma)) (fref pbar j)))
    )))
    (setf yprr (funcall (funk prr)))
    (cond
     ((< yprr (fref y ilo))
      (fdo ((j 1 (+ j 1))) ((> j ndim) nil)
       (tagbody (fset (fref p ihi j) (fref prr j)))
      )
      (fset (fref y ihi) yprr)
     )
     (t
      (fdo ((j 1 (+ j 1))) ((> j ndim) nil)
       (tagbody (fset (fref p ihi j) (fref pr j)))
      )
      (fset (fref y ihi) ypr)
   )))
   ((>= ypr (fref y inhi))
    (cond
     ((< ypr (fref y ihi))
      (fdo ((j 1 (+ j 1))) ((> j ndim) nil)
       (tagbody (fset (fref p ihi j) (fref pr j)))
      )
      (fset (fref y ihi) ypr)
    ))
    (fdo ((j 1 (+ j 1))) ((> j ndim) nil)
     (tagbody
      (fset (fref prr j)
       (+ (* beta (fref p ihi j)) (* (+ 1.0 (- beta)) (fref pbar j)))
    )))
    (setf yprr (funcall (funk prr)))
    (cond
     ((< yprr (fref y ihi))
      (fdo ((j 1 (+ j 1))) ((> j ndim) nil)
       (tagbody (fset (fref p ihi j) (fref prr j)))
      )
      (fset (fref y ihi) yprr)
     )
     (t
      (fdo ((i 1 (+ i 1))) ((> i mpts) nil)
       (tagbody
        (cond
         ((/= i ilo)
          (fdo ((j 1 (+ j 1))) ((> j ndim) nil)
           (tagbody (fset (fref pr j) (* 0.5 (+ (fref p i j) (fref p ilo j))))
            (fset (fref p i j) (fref pr j))
          ))
          (fset (fref y i) (funcall (funk pr)))
   )))))))
   (t
    (fdo ((j 1 (+ j 1))) ((> j ndim) nil)
     (tagbody (fset (fref p ihi j) (fref pr j)))
    )
    (fset (fref y ihi) ypr)
  ))
end_label
  (return (values p y mp np ndim ftol funk iter))
))

