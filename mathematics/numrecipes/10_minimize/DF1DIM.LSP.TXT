(proclaim '(special xicom pcom ncom))
(declare (type (simple-array double-float (nmax)) xicom))
(declare (type (simple-array double-float (nmax)) pcom))
(declare (type fixnum ncom))

(defun df1dim (x &key (nmax 50)) (declare (type double-float x))
 (declare (type fixnum nmax))
 (prog
  ((xt (make-array '(nmax) :element-type 'double-float))
   (df (make-array '(nmax) :element-type 'double-float)) (df1dim 0.0d0) (j 0)
  )
  (declare (type (simple-array double-float (*)) xt))
  (declare (type (simple-array double-float (*)) df))
  (declare (type double-float df1dim)) (declare (type fixnum j))
  (fdo ((j 1 (+ j 1))) ((> j ncom) nil)
   (tagbody (fset (fref xt j) (+ (fref pcom j) (* x (fref xicom j)))))
  )
  (multiple-value-setq (xt df) (dfunc xt df)) (setf df1dim 0.0)
  (fdo ((j 1 (+ j 1))) ((> j ncom) nil)
   (tagbody (setf df1dim (+ df1dim (* (fref df j) (fref xicom j)))))
  )
  (return df1dim)
))

