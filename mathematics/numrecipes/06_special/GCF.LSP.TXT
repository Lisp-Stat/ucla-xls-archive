(defun gcf (gammcf a x gln &key (itmax 100) (eps 3.0E-7))
 (declare (type double-float gammcf)) (declare (type double-float a))
 (declare (type double-float x)) (declare (type double-float gln))
 (declare (type fixnum itmax)) (declare (type double-float eps))
 (prog
  ((g 0.0d0) (anf 0.0d0) (ana 0.0d0) (an 0.0d0) (n 0) (fac 0.0d0) (b1 0.0d0)
   (b0 0.0d0) (a1 0.0d0) (a0 0.0d0) (gold 0.0d0)
  )
  (declare (type double-float g)) (declare (type double-float anf))
  (declare (type double-float ana)) (declare (type double-float an))
  (declare (type fixnum n)) (declare (type double-float fac))
  (declare (type double-float b1)) (declare (type double-float b0))
  (declare (type double-float a1)) (declare (type double-float a0))
  (declare (type double-float gold)) (setf gln (gammln a)) (setf gold 0.0)
  (setf a0 1.0) (setf a1 x) (setf b0 0.0) (setf b1 1.0) (setf fac 1.0)
  (fdo ((n 1 (+ n 1))) ((> n itmax) nil)
   (tagbody (setf an (float n)) (setf ana (+ an (- a)))
    (setf a0 (* (+ a1 (* a0 ana)) fac)) (setf b0 (* (+ b1 (* b0 ana)) fac))
    (setf anf (* an fac)) (setf a1 (+ (* x a0) (* anf a1)))
    (setf b1 (+ (* x b0) (* anf b1)))
    (cond
     ((/= a1 0.0) (setf fac (/ 1.0 a1)) (setf g (* b1 fac))
      (if (< (abs (/ (+ g (- gold)) g)) eps) (go label1)) (setf gold g)
  ))))
  (error "A too large, ITMAX too small") label1
  (setf gammcf (* (exp (+ (+ (- x) (* a (alog x))) (- gln))) g))
  (return (values gammcf a x gln))
))

