(defun cel (qqc pp aa bb &key (ca 3.0E-4) (pio2 1.5707964))
 (declare (type double-float qqc)) (declare (type double-float pp))
 (declare (type double-float aa)) (declare (type double-float bb))
 (declare (type double-float ca)) (declare (type double-float pio2))
 (prog
  ((cel 0.0d0) (g 0.0d0) (q 0.0d0) (f 0.0d0) (em 0.0d0) (e 0.0d0) (p 0.0d0)
   (b 0.0d0) (a 0.0d0) (qc 0.0d0)
  )
  (declare (type double-float cel)) (declare (type double-float g))
  (declare (type double-float q)) (declare (type double-float f))
  (declare (type double-float em)) (declare (type double-float e))
  (declare (type double-float p)) (declare (type double-float b))
  (declare (type double-float a)) (declare (type double-float qc))
  (if (= qqc 0.0) (error "failure in CEL")) (setf qc (abs qqc)) (setf a aa)
  (setf b bb) (setf p pp) (setf e qc) (setf em 1.0)
  (cond ((> p 0.0) (setf p (sqrt p)) (setf b (/ b p)))
   (t (setf f (* qc qc)) (setf q (+ 1.0 (- f))) (setf g (+ 1.0 (- p)))
    (setf f (+ f (- p))) (setf q (* q (+ b (* (* -1 a) p))))
    (setf p (sqrt (/ f g))) (setf a (/ (+ a (- b)) g))
    (setf b (+ (/ (* -1 q) (* (* g g) p)) (* a p)))
  ))
  label1 (setf f a) (setf a (+ a (/ b p))) (setf g (/ e p))
  (setf b (+ b (* f g))) (setf b (+ b b)) (setf p (+ g p)) (setf g em)
  (setf em (+ qc em))
  (cond
   ((> (abs (+ g (- qc))) (* g ca)) (setf qc (sqrt e)) (setf qc (+ qc qc))
    (setf e (* qc em)) (go label1)
  ))
  (setf cel (/ (* pio2 (+ b (* a em))) (* em (+ em p)))) (return cel)
))

