(defun betacf (a b x &key (itmax 100) (eps 3.0E-7))
 (declare (type double-float a)) (declare (type double-float b))
 (declare (type double-float x)) (declare (type fixnum itmax))
 (declare (type double-float eps))
 (prog
  ((betacf 0.0d0) (aold 0.0d0) (bpp 0.0d0) (app 0.0d0) (bp 0.0d0) (ap 0.0d0)
   (d 0.0d0) (tem 0.0d0) (em 0.0d0) (m 0) (bz 0.0d0) (qam 0.0d0) (qap 0.0d0)
   (qab 0.0d0) (az 0.0d0) (bm 0.0d0) (am 0.0d0)
  )
  (declare (type double-float betacf)) (declare (type double-float aold))
  (declare (type double-float bpp)) (declare (type double-float app))
  (declare (type double-float bp)) (declare (type double-float ap))
  (declare (type double-float d)) (declare (type double-float tem))
  (declare (type double-float em)) (declare (type fixnum m))
  (declare (type double-float bz)) (declare (type double-float qam))
  (declare (type double-float qap)) (declare (type double-float qab))
  (declare (type double-float az)) (declare (type double-float bm))
  (declare (type double-float am)) (setf am 1.0) (setf bm 1.0) (setf az 1.0)
  (setf qab (+ a b)) (setf qap (+ a 1.0)) (setf qam (+ a (- 1.0)))
  (setf bz (+ 1.0 (/ (* (* -1 qab) x) qap)))
  (fdo ((m 1 (+ m 1))) ((> m itmax) nil)
   (tagbody (setf em m) (setf tem (+ em em))
    (setf d (/ (* (* em (+ b (- m))) x) (* (+ qam tem) (+ a tem))))
    (setf ap (+ az (* d am))) (setf bp (+ bz (* d bm)))
    (setf d (/ (* (* (* -1 (+ a em)) (+ qab em)) x) (* (+ a tem) (+ qap tem))))
    (setf app (+ ap (* d az))) (setf bpp (+ bp (* d bz))) (setf aold az)
    (setf am (/ ap bpp)) (setf bm (/ bp bpp)) (setf az (/ app bpp))
    (setf bz 1.0) (if (< (abs (+ az (- aold))) (* eps (abs az))) (go label1))
  ))
  (error "A or B too big, or ITMAX too small") label1 (setf betacf az)
  (return betacf)
))

