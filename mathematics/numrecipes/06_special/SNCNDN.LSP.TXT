(defun sncndn (uu emmc sn cn dn &key (ca 3.0E-4))
 (declare (type double-float uu)) (declare (type double-float emmc))
 (declare (type double-float sn)) (declare (type double-float cn))
 (declare (type double-float dn)) (declare (type double-float ca))
 (prog
  ((em (make-array '(13) :element-type 'double-float))
   (en (make-array '(13) :element-type 'double-float)) (bo nil) (b 0.0d0)
   (ii 0) (c 0.0d0) (l 0) (i 0) (a 0.0d0) (d 0.0d0) (u 0.0d0) (emc 0.0d0)
  )
  (declare (type (simple-array double-float (*)) em))
  (declare (type (simple-array double-float (*)) en)) (declare (type t bo))
  (declare (type double-float b)) (declare (type fixnum ii))
  (declare (type double-float c)) (declare (type fixnum l))
  (declare (type fixnum i)) (declare (type double-float a))
  (declare (type double-float d)) (declare (type double-float u))
  (declare (type double-float emc)) (setf emc emmc) (setf u uu)
  (cond
   ((/= emc 0.0)
    (tagbody (setf bo (< emc 0.0))
     (cond
      (bo (setf d (+ 1.0 (- emc))) (setf emc (/ (* -1 emc) d))
       (setf d (sqrt d)) (setf u (* d u))
     ))
     (setf a 1.0) (setf dn 1.0)
     (fdo ((i 1 (+ i 1))) ((> i 13) nil)
      (tagbody (setf l i) (fset (fref em i) a) (setf emc (sqrt emc))
       (fset (fref en i) emc) (setf c (* 0.5 (+ a emc)))
       (if (<= (abs (+ a (- emc))) (* ca a)) (go label1)) (setf emc (* a emc))
       (setf a c)
     ))
     label1 (setf u (* c u)) (setf sn (sin u)) (setf cn (cos u))
     (if (= sn 0.0) (go label2)) (setf a (/ cn sn)) (setf c (* a c))
     (fdo ((ii l (+ ii (- 1)))) ((> ii 1) nil)
      (tagbody (setf b (fref em ii)) (setf a (* c a)) (setf c (* dn c))
       (setf dn (/ (+ (fref en ii) a) (+ b a))) (setf a (/ c b))
     ))
     (setf a (/ 1.0 (sqrt (+ (expt c 2) 1.0))))
     (cond ((< sn 0.0) (setf sn (- a))) (t (setf sn a))) (setf cn (* c sn))
     label2 (cond (bo (setf a dn) (setf dn cn) (setf cn a) (setf sn (/ sn d))))
   ))
   (t (setf cn (/ 1.0 (cosh u))) (setf dn cn) (setf sn (tanh u)))
  )
  (return (values uu emmc sn cn dn))
))

