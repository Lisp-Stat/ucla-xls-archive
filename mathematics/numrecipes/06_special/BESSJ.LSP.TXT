(defun bessj (n x &key (iacc 40) (bigno 1.0E10) (bigni 1.0E-10))
 (declare (type fixnum n)) (declare (type double-float x))
 (declare (type fixnum iacc)) (declare (type double-float bigno))
 (declare (type double-float bigni))
 (prog
  ((sum 0.0d0) (jsum 0) (m 0) (bessj 0.0d0) (bjp 0.0d0) (j 0) (bj 0.0d0)
   (bjm 0.0d0) (tox 0.0d0)
  )
  (declare (type double-float sum)) (declare (type fixnum jsum))
  (declare (type fixnum m)) (declare (type double-float bessj))
  (declare (type double-float bjp)) (declare (type fixnum j))
  (declare (type double-float bj)) (declare (type double-float bjm))
  (declare (type double-float tox))
  (if (< n 2) (error "bad argument N in BESSJ")) (setf tox (/ 2.0 x))
  (cond
   ((> x (float n)) (setf bjm (bessj0 x)) (setf bj (bessj1 x))
    (fdo ((j 1 (+ j 1))) ((> j (+ n (- 1))) nil)
     (tagbody (setf bjp (+ (* (* j tox) bj) (- bjm))) (setf bjm bj)
      (setf bj bjp)
    ))
    (setf bessj bj)
   )
   (t (setf m (* 2 (/ (+ n (int (sqrt (float (* iacc n))))) 2))) (setf jsum 0)
    (setf sum 0.0) (setf bjp 0.0) (setf bj 1.0)
    (fdo ((j m (+ j (- 1)))) ((> j 1) nil)
     (tagbody (setf bjm (+ (* (* j tox) bj) (- bjp))) (setf bjp bj)
      (setf bj bjm)
      (cond
       ((> (abs bj) bigno) (setf bj (* bj bigni)) (setf bjp (* bjp bigni))
        (setf bessj (* bessj bigni)) (setf sum (* sum bigni))
      ))
      (if (/= jsum 0) (setf sum (+ sum bj))) (setf jsum (+ 1 (- jsum)))
      (if (= j n) (setf bessj bjp))
    ))
    (setf sum (+ (* 2.0 sum) (- bj))) (setf bessj (/ bessj sum))
  ))
  (return bessj)
))

