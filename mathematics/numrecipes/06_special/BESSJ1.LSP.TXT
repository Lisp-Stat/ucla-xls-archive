(defun bessj1 (x) (declare (type double-float x))
 (prog
  ((y 0.0d0) (p1 0.0d0) (p2 0.0d0) (p3 0.0d0) (p4 0.0d0) (p5 0.0d0) (q1 0.0d0)
   (q2 0.0d0) (q3 0.0d0) (q4 0.0d0) (q5 0.0d0) (r1 0.0d0) (r2 0.0d0) (r3 0.0d0)
   (r4 0.0d0) (r5 0.0d0) (r6 0.0d0) (s1 0.0d0) (s2 0.0d0) (s3 0.0d0) (s4 0.0d0)
   (s5 0.0d0) (s6 0.0d0) (xx 0.0d0) (z 0.0d0) (ax 0.0d0) (bessj1 0.0d0)
  )
  (declare (type float y)) (declare (type float p1)) (declare (type float p2))
  (declare (type float p3)) (declare (type float p4)) (declare (type float p5))
  (declare (type float q1)) (declare (type float q2)) (declare (type float q3))
  (declare (type float q4)) (declare (type float q5)) (declare (type float r1))
  (declare (type float r2)) (declare (type float r3)) (declare (type float r4))
  (declare (type float r5)) (declare (type float r6)) (declare (type float s1))
  (declare (type float s2)) (declare (type float s3)) (declare (type float s4))
  (declare (type float s5)) (declare (type float s6))
  (declare (type double-float xx)) (declare (type double-float z))
  (declare (type double-float ax)) (declare (type double-float bessj1))
  (setq s1 1.44725228442d11) (setq r1 7.2362614232d10)
  (setq q1 0.04687499995d0) (setq p1 1.0d0)
  (cond
   ((< (abs x) 8.0) (setf y (expt x 2))
    (setf bessj1
     (/
      (* x (+ r1 (* y (+ r2 (* y (+ r3 (* y (+ r4 (* y (+ r5 (* y r6)))))))))))
      (+ s1 (* y (+ s2 (* y (+ s3 (* y (+ s4 (* y (+ s5 (* y s6))))))))))
   )))
   (t (setf ax (abs x)) (setf z (/ 8.0 ax)) (setf y (expt z 2))
    (setf xx (+ ax (- 2.3561945)))
    (setf bessj1
     (*
      (* (sqrt (/ 0.63661975 ax))
       (+ (* (cos xx) (+ p1 (* y (+ p2 (* y (+ p3 (* y (+ p4 (* y p5)))))))))
        (* (* (* -1 z) (sin xx))
         (+ q1 (* y (+ q2 (* y (+ q3 (* y (+ q4 (* y q5))))))))
      )))
      (sign 1.0 x)
  ))))
  (return bessj1)
))

