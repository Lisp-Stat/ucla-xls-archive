(defun display-string (string &optional (w nil))
"Function args: (string)
     Writes string to display-window w if w specified and if system is 
     Macintosh, otherwise writes string to standard output. Forrest 
     Young 10/17/91"
  #+macintosh (if w (send w :paste-string string) (princ string))
  #-macintosh (princ string)
  nil
  )
;;
;;The following code created by Chun-houh Chen who modifies Luke's 
;;spin-control-overlay -proto to add zoom boxes Forrest W. Young, 
;;in September 25, 1991

(defmeth spin-control-overlay-proto :isnew ()
  (setf (slot-value 'gap) 2)
  (setf (slot-value 'side) 10)
  (setf (slot-value 'ascent) (send graph-proto :text-ascent))
  (let ((w1 (send graph-proto :text-width "Pitch"))
        (w2 (send graph-proto :text-width "Roll"))
        (w3 (send graph-proto :text-width "Yaw"))
        (w4 (send graph-proto :text-width "Zoom"))
        (w5 (send graph-proto :text-width "Home"))
        (gap (slot-value 'gap))
        (side (slot-value 'side)))
    (setf (slot-value 'lefts)
          (list (* 2 gap)
                (+ (* 3 gap) side)
                (+ (* 6 gap) (* 2 side) w1)
                (+ (* 7 gap) (* 3 side) w1)
                (+ (* 11 gap) (* 4 side) w1 w2)
                (+ (* 12 gap) (* 5 side) w1 w2)
                (+ (* 17 gap) (* 6 side) w1 w2 w3)
                (+ (* 18 gap) (* 7 side) w1 w2 w3)
                (+ (* 22 gap) (* 8 side) w1 w2 w3 w4)
                ))))

(defmeth spin-control-overlay-proto :redraw ()
  (let ((graph (slot-value 'graph))
        (top (slot-value 'top))
        (lefts (slot-value 'lefts))
        (gap (slot-value 'gap))
        (side (slot-value 'side))
        (text-base (slot-value 'text-base))
        (box-top (slot-value 'box-top)))
    (send graph :draw-line 0 top (send graph :canvas-width) top)
    (mapcar #'(lambda (x) (send graph :frame-rect x box-top side side))
            lefts)
    (mapcar #'(lambda (s x y) (send graph :draw-string s x y))
            '("Pitch" "Roll" "Yaw" "Zoom" "Home")
            (+ (select lefts '(1 3 5 7 8)) gap side) 
            (repeat text-base 5))))

(defmeth spin-control-overlay-proto :do-click (x y m1 m2)
  (let ((graph (slot-value 'graph))
        (top (slot-value 'top))
        (lefts (slot-value 'lefts))
        (gap (slot-value 'gap))
        (side (slot-value 'side))
        (text-base (slot-value 'text-base))
        (box-top (slot-value 'box-top))
        (big-small t)
        (nv t)
        )
    (when (< top y)
          (send graph :idle-on nil)
          (setf nv (send graph :num-variables))
          (if (< box-top y text-base)
              (let ((i (car (which (< lefts x (+ lefts side)))))
                    (angle (abs (send graph :angle))))
                (when i
                      (when (< i 6)
                            (send graph :rotation-type 
                                  (select '(pitching rolling yawing)
                                          (floor (/ i 2))))
                            (send graph :angle (if (oddp i) angle (- angle)))
                            (send graph :while-button-down
                                  #'(lambda (x y) (send graph :rotate))
                                  nil)
                            (send graph :idle-on m1))
                      (when (and (> i 5) (< i 8))
                            (if (= i 6) (setf big-small .9)
                                (setf big-small 1.111))
                            (send graph :while-button-down
                                  #'(lambda (x y)
                                      (send graph :scale (iseq nv) 
                                            (/ (send graph :scale (iseq nv))
                                               big-small)))
                                  nil))
                      (when (> i 5)
                            (if (equal nil (send graph :transformation)) 
                                (setf inversetransform (identity-matrix 3))
                                (setf inversetransform (inverse (send 
                                      graph :transformation))))
                            (send graph :apply-transformation inversetransform))
                      )))
          t)))
