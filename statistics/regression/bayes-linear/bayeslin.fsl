(XLISP::CHECK-FSL-VERSION 1 3)
#K(#(80 1 1 0 0 25 1 0 1 1) #(0) #("blin-tnp" REQUIRE) 0 NIL)
#K(#(80 1 1 0 0 25 1 0 1 1) #(0) #("blin-mnp" REQUIRE) 0 NIL)
#K(#(80 1 1 0 0 25 1 0 1 1) #(0) #("blin-mpp" REQUIRE) 0 NIL)
#K(#(80 1 1 0 0 25 1 0 1 1) #(0) #("bayeslin" PROVIDE) 0 NIL)
#K(#(80 1 3 0 1 2 2 38 3 4 21 0 1 4 4 23 4 5 1 3 21 0 2 4 5 23 5 5 1 1 21 0 4 3 5 11 0 2 38 6 4 23 7 4 2 3 4 49 6 4 0 49 2 2 0 11 0 3) #(0 15 25 35 38) #("Variable has a value. Redefine?" NIL *TREE-NODES* *ASK-ON-REDEFINE* BOUNDP Y-OR-N-P *VARIABLES* ADJOIN) 0 NIL)
#K(#(80 1 3 0 1 2 2 38 3 4 21 0 1 4 4 23 4 5 1 3 21 0 2 4 5 23 5 5 1 1 21 0 4 3 5 11 0 2 38 6 4 23 7 4 2 3 4 49 6 4 0 49 2 2 0 11 0 3) #(0 15 25 35 38) #("Variable has a value. Redefine?" NIL *MORAL-NODES* *ASK-ON-REDEFINE* BOUNDP Y-OR-N-P *VARIABLES* ADJOIN) 0 NIL)
#K(#(80 1 1 0 0 25 1 0 1 1) #(0) #((PROGN #K(#(80 1 2 0 1 1 23 2 3 1 2 25 3 0 2 1 3) #(0) #(CREATE-TREE-NODE #K(#(80 6 5 0 1 2 3 4 2 38 5 11 20 1 11 11 49 5 11 0 38 6 11 38 7 12 23 8 11 2 11 12 23 9 0 2 1 11 23 10 11 1 1 38 11 12 23 8 0 4 11 12 10 1 23 10 11 1 1 38 11 12 23 8 0 4 11 12 9 2 23 10 11 1 1 38 11 12 23 8 0 4 11 12 8 3 23 10 11 1 1 38 11 12 23 8 0 4 11 12 7 4 23 10 11 1 1 38 11 12 25 8 0 4 11 12 6 5) #(0) #(NEIGHBOURS VARIANCE EXPECTATION VARIABLES NAME *TREE-NODES* TREE-NODE-PROTO :NEW SEND %SET-SYMBOL-VALUE SYMBOL-VALUE :SLOT-VALUE) 0 NIL) BYTE-CODE-CLOSE %SET-SYMBOL-FUNCTION) 0 NIL) #K(#(80 1 3 0 1 2 0 25 3 0 3 3 2 1) #(0) #("Args: (name variables ex var neighbours)
Creates a tree-node object." FUNCTION-DOCUMENTATION CREATE-TREE-NODE %SET-GET) 0 NIL) #K(#(80 1 1 0 0 11 0 1) #(0) #(CREATE-TREE-NODE) 0 NIL)) EVAL) 0 NIL)
#K(#(80 1 1 0 0 25 1 0 1 1) #(0) #((PROGN #K(#(80 1 2 0 1 1 23 2 3 1 2 25 3 0 2 1 3) #(0) #(CREATE-MORAL-NODE #K(#(80 6 7 0 1 2 3 4 5 6 4 38 7 13 20 1 13 13 49 7 13 0 38 8 13 38 9 14 23 10 13 2 13 14 23 11 0 2 1 13 23 12 13 1 1 38 13 14 23 10 0 4 13 14 12 1 23 12 13 1 1 38 13 14 23 10 0 4 13 14 11 2 23 12 13 1 1 38 13 14 23 10 0 4 13 14 10 3 23 12 13 1 1 38 13 14 23 10 0 4 13 14 9 4 23 12 13 1 1 38 13 14 23 10 0 4 13 14 8 5 23 12 13 1 1 38 13 14 23 12 15 1 1 38 14 16 23 10 15 2 15 16 23 15 15 1 15 23 10 0 4 13 14 7 15 23 12 13 1 1 38 13 14 23 12 15 1 1 38 16 16 23 10 15 2 15 16 25 10 0 4 13 14 6 15) #(0) #(EX_B VAR_B_INV NEIGHBOURS PRINT-NAME TREE-NODE VARIABLES NAME *MORAL-NODES* MORAL-NODE-PROTO :NEW SEND %SET-SYMBOL-VALUE SYMBOL-VALUE :SLOT-VALUE :VAR GINV :EX) 0 NIL) BYTE-CODE-CLOSE %SET-SYMBOL-FUNCTION) 0 NIL) #K(#(80 1 3 0 1 2 0 25 3 0 3 3 2 1) #(0) #("Args: (name variables tree-node print-name neighbours)
Creates a moral-node-object." FUNCTION-DOCUMENTATION CREATE-MORAL-NODE %SET-GET) 0 NIL) #K(#(80 1 1 0 0 11 0 1) #(0) #(CREATE-MORAL-NODE) 0 NIL)) EVAL) 0 NIL)
#K(#(80 1 1 0 0 25 1 0 1 1) #(0) #((PROGN #K(#(80 1 2 0 1 1 23 2 3 1 2 25 3 0 2 1 3) #(0) #(CREATE-TREE-PLOT #K(#(80 2 13 0 1 2 3 4 5 6 7 8 9 10 11 12 5 38 13 15 38 14 16 23 15 15 2 15 16 23 16 0 2 1 15 23 17 15 1 1 38 18 16 38 19 17 23 15 0 4 15 16 14 17 23 17 15 1 1 38 18 16 38 19 17 23 20 17 1 17 23 21 17 2 13 17 23 15 0 4 15 16 12 17 23 17 15 1 1 38 18 16 38 19 17 23 20 17 1 17 23 21 17 2 13 17 23 15 0 4 15 16 11 17 23 22 0 4 10 9 9 9 23 22 0 4 8 9 9 9 23 22 0 4 7 6 6 5 0 9 15 37 60 1 2 15 2 23 23 16 3 13 4 15 23 24 16 1 16 23 25 17 1 3 16 17 17 23 25 18 1 3 16 18 18 23 25 19 1 3 16 19 19 23 22 0 4 16 17 18 19 61 112 15 15 37 60 1 2 15 2 11 0 13) #(0 147 201) #(10 1 "~a" 0.93 0.97 NODE-BACK ARC 0 OUTLINE SIZE-RATIOS RESOLUTIONS NIL NODES TREE-PLOT-PROTO :NEW SEND %SET-SYMBOL-VALUE SYMBOL-VALUE :SLOT-VALUE *TREE-NODES* LENGTH REPEAT MAKE-COLOR FORMAT INTERN UNIFORM-RAND) 0 NIL) BYTE-CODE-CLOSE %SET-SYMBOL-FUNCTION) 0 NIL) #K(#(80 1 3 0 1 2 0 25 3 0 3 3 2 1) #(0) #("Args: (name)
Creates a tree-plot object." FUNCTION-DOCUMENTATION CREATE-TREE-PLOT %SET-GET) 0 NIL) #K(#(80 1 1 0 0 11 0 1) #(0) #(CREATE-TREE-PLOT) 0 NIL)) EVAL) 0 NIL)
#K(#(80 1 1 0 0 25 1 0 1 1) #(0) #((PROGN #K(#(80 1 2 0 1 1 23 2 3 1 2 25 3 0 2 1 3) #(0) #(CREATE-MORAL-PLOT #K(#(77 1 2 1 20 20 0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 6 21 2 1 2 2 0 2 23 1 3 38 21 23 38 22 24 38 23 25 23 24 24 2 24 25 23 25 0 2 1 24 23 26 24 1 1 38 27 25 23 28 26 3 22 21 1 23 24 0 3 24 25 26 23 26 24 1 1 38 29 25 23 24 0 4 24 25 20 23 23 26 24 1 1 38 29 25 23 24 0 4 24 25 19 18 23 26 24 1 1 38 29 25 23 24 0 4 24 25 17 18 23 26 24 1 1 38 29 25 23 24 0 4 24 25 16 18 23 30 0 4 15 14 14 14 23 30 0 4 13 12 12 12 23 30 0 4 11 10 10 10 23 30 0 4 9 8 7 7 23 31 23 1 23 0 14 24 37 60 4 5 24 23 23 28 25 3 22 6 24 23 32 25 1 25 23 33 26 1 5 2 47 26 4 26 2 43 3 26 26 23 33 27 1 5 2 47 27 4 27 2 43 3 27 27 23 33 28 1 5 2 47 28 4 28 2 43 3 28 28 23 30 0 4 25 26 27 28 61 112 24 24 37 60 4 5 24 23 11 0 22) #(0 32 37 40 190 265) #(0.75 256 64 "~a" 0.3098 0.1843 NODE 0.9 NODE-BACK 0.8 ARC 0 OUTLINE OUTLINES NODE-LABELS T DIAGNOSTICS NODES "BAYES-LIN Moral plot - ~a" NIL #(%NOT-SUPPLIED) *MORAL-NODES* MORAL-PLOT-PROTO :NEW SEND %SET-SYMBOL-VALUE SYMBOL-VALUE :TITLE FORMAT :SLOT-VALUE MAKE-COLOR LENGTH INTERN RANDOM) 0 NIL) BYTE-CODE-CLOSE %SET-SYMBOL-FUNCTION) 0 NIL) #K(#(80 1 3 0 1 2 0 25 3 0 3 3 2 1) #(0) #("Args: (name &optional (nodes *moral-nodes*))
Creates a moral graph plot object with the given name." FUNCTION-DOCUMENTATION CREATE-MORAL-PLOT %SET-GET) 0 NIL) #K(#(80 1 1 0 0 11 0 1) #(0) #(CREATE-MORAL-PLOT) 0 NIL)) EVAL) 0 NIL)
#K(#(80 1 1 0 0 25 1 0 1 1) #(0) #((PROGN #K(#(80 1 2 0 1 1 23 2 3 1 2 25 3 0 2 1 3) #(0) #(CREATE-GLOBAL-MORAL-PLOT #K(#(77 1 2 1 20 20 0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 6 21 2 1 2 2 0 2 23 1 3 38 21 23 38 22 24 38 23 25 23 24 24 2 24 25 23 25 0 2 1 24 23 26 24 1 1 38 27 25 23 28 26 3 22 21 1 23 24 0 3 24 25 26 23 26 24 1 1 38 29 25 23 24 0 4 24 25 20 23 23 26 24 1 1 38 29 25 23 24 0 4 24 25 19 18 23 26 24 1 1 38 29 25 23 24 0 4 24 25 17 18 23 26 24 1 1 38 29 25 23 24 0 4 24 25 16 18 23 30 0 4 15 14 14 14 23 30 0 4 13 12 12 12 23 30 0 4 11 10 10 10 23 30 0 4 9 8 7 7 23 31 23 1 23 0 14 24 37 60 4 5 24 23 23 28 25 3 22 6 24 23 32 25 1 25 23 33 26 1 5 2 47 26 4 26 2 43 3 26 26 23 33 27 1 5 2 47 27 4 27 2 43 3 27 27 23 33 28 1 5 2 47 28 4 28 2 43 3 28 28 23 30 0 4 25 26 27 28 61 112 24 24 37 60 4 5 24 23 11 0 22) #(0 32 37 40 190 265) #(0.75 256 64 "~a" 0.3098 0.1843 NODE 0.9 NODE-BACK 0.8 ARC 0 OUTLINE OUTLINES NODE-LABELS T DIAGNOSTICS NODES "BAYES-LIN Global moral plot - ~a" NIL #(%NOT-SUPPLIED) *MORAL-NODES* GLOBAL-MORAL-PLOT-PROTO :NEW SEND %SET-SYMBOL-VALUE SYMBOL-VALUE :TITLE FORMAT :SLOT-VALUE MAKE-COLOR LENGTH INTERN RANDOM) 0 NIL) BYTE-CODE-CLOSE %SET-SYMBOL-FUNCTION) 0 NIL) #K(#(80 1 3 0 1 2 0 25 3 0 3 3 2 1) #(0) #("Args: (name &optional (nodes *moral-nodes*))
Creates a moral graph plot object with the given name." FUNCTION-DOCUMENTATION CREATE-GLOBAL-MORAL-PLOT %SET-GET) 0 NIL) #K(#(80 1 1 0 0 11 0 1) #(0) #(CREATE-GLOBAL-MORAL-PLOT) 0 NIL)) EVAL) 0 NIL)
#K(#(80 1 1 0 0 25 1 0 1 1) #(0) #((PROGN #K(#(80 1 2 0 1 1 23 2 3 1 2 25 3 0 2 1 3) #(0) #(GINV #K(#(80 2 0 0 25 0 0 1 1) #(0) #(INVERSE) 0 NIL) BYTE-CODE-CLOSE %SET-SYMBOL-FUNCTION) 0 NIL) #K(#(80 1 3 0 1 2 0 25 3 0 3 3 2 1) #(0) #("Args: (matrix)
Returns the Moore-penrose generalised inverse of matrix.
ACTUALLY - IT JUST RETURNS AN INVERSE AT THE MOMENT." FUNCTION-DOCUMENTATION GINV %SET-GET) 0 NIL) #K(#(80 1 1 0 0 11 0 1) #(0) #(GINV) 0 NIL)) EVAL) 0 NIL)
#K(#(80 1 1 0 0 25 1 0 1 1) #(0) #((PROGN #K(#(80 1 2 0 1 1 23 2 3 1 2 25 3 0 2 1 3) #(0) #(LATEX-MATRIX #K(#(77 1 2 1 9 9 0 1 2 3 4 5 6 7 8 7 23 10 12 1 1 16 12 13 71 2 2 12 14 23 11 0 2 2 11 0 10 15 37 60 1 2 15 14 23 11 0 2 2 3 61 112 15 15 37 60 1 2 15 14 23 11 0 2 2 9 0 10 16 37 60 3 10 16 13 0 16 17 37 62 4 5 17 10 23 11 0 2 2 4 0 10 17 37 60 6 9 17 14 0 17 18 37 62 7 8 18 10 23 11 0 2 2 5 23 12 18 3 1 16 17 23 11 0 3 2 6 18 61 112 17 17 37 60 6 9 17 14 61 112 16 16 37 60 3 10 16 13 23 11 0 2 2 8 11 0 7) #(0 44 60 75 84 90 99 108 114 138 148) #("r" "\\\\~%" "&" "~,2f" NIL "~%\\end{array}\\right)~%" "}~%" 0 "~&\\left(\\begin{array}{" #(T) ARRAY-DIMENSIONS FORMAT SELECT) 0 NIL) BYTE-CODE-CLOSE %SET-SYMBOL-FUNCTION) 0 NIL) #K(#(80 1 3 0 1 2 0 25 3 0 3 3 2 1) #(0) #("Args: (matrix &optional (stream t))
Prints a LaTeX version of matrix to stream." FUNCTION-DOCUMENTATION LATEX-MATRIX %SET-GET) 0 NIL) #K(#(80 1 1 0 0 11 0 1) #(0) #(LATEX-MATRIX) 0 NIL)) EVAL) 0 NIL)
#K(#(80 1 2 0 1 0 25 2 0 2 2 1) #(0) #("
BAYES-LIN 0.1 (Alpha).
Copyright (c) 1997, by Darren Wilkinson.

" T FORMAT) 0 NIL)
