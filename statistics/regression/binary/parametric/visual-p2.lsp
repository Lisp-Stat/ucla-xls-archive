(defmeth binary-parametric-visual-proto :add-beta-vec (list plot)
  (flet ((sign (x) (if (> 0 x) -1 1)))
    (let* ((xs (send *binary-model-object* :bi-resid-x))
           (int (send *binary-model-object* :int))
           (ind1 (select list 0))
           (ind2 (select list 1))
           (xs1 (select xs ind1))
           (xs2 (select xs ind2))
           (min1 (min xs1))
           (min2 (min xs2))
           (max1 (max xs1))
           (max2 (max xs2))
           (mid1 (/ (- max1 min1) 2))
           (mid2 (/ (- max2 min2) 2))
           (beta (send *binary-parametric-object* :estimates))
           (beta1 (select beta (+ ind1 int)))
           (beta2 (select beta (+ ind2 int)))
           (slope1 (abs (/ beta2 beta1)))
           (slope2 (abs (/ beta1 beta2)))
           (coord1 (* mid1 slope1))
           (coord2 (* mid2 slope2))
           (point1 (list mid1 coord1))
           (point2 (list coord2 mid2))
           (point (if (> (sqrt (+ (^ coord1 2) (^ mid1 2)))
                         (sqrt (+ (^ coord2 2) (^ mid2 2))))
                      point2 point1)))
      (send plot :add-lines
            (list (+ mid1 min1)
                  (+ mid1 min1 (* (sign beta1) (select point 0))))
            (list (+ mid2 min2)
                  (+ mid2 min2 (* (sign beta2) (select point 1))))))))

(defmeth binary-parametric-visual-proto :biplot-maker
  ()
  (let* ((biplot-x (send *binary-model-object* :bi-resid-x))
         (y (send *binary-model-object* :y))
         (int (send *binary-model-object* :int))
         (sum (sum y))
         (length (length y))
         (diff (- length sum))
         (xx1 (select biplot-x 0))
         (xx2 (select biplot-x 1))
         (names (send *binary-model-object* :bi-resid-x-names))
         (plot (plot-points xx1 xx2
                            :show nil
                            :title "Biplot"
                            :location (list 1 38)
                            :variable-labels
                            (select names (list 0 1))
                            :size (list 210 210)))
         (plot-over (send graph-overlay-proto :new))
         (ascent (send plot :text-ascent))
         (descent (send plot :text-descent)))
    (defmeth plot-over :location () (slot-value 'location))
    (defmeth plot-over :redraw ()
      (let* ((loc (send self :location))
             (x (first loc))
             (y (second loc))
             (box (third loc))
             (string-x (fourth loc))
             (graph (send self :graph)))
        (send graph :frame-rect x (- y box) box box)
        (send graph :draw-string "New Plot" string-x y)))
    (defmeth plot-over :do-click (x y m1 m2)
      (let* ((loc (send self :location))
             (box (select loc 2))
             (left (select loc 0))
             (top (- (select loc 1) box))
             (right (+ left box))
             (bottom (+ top box))
             (graph (send self :graph))
             (yy (send *binary-model-object* :y))
             (sum (sum yy))
             (length (length yy))
             (diff (- length sum)))
        (when (and (< left x right) (< top y bottom))
              (let* ((names (send
                             *binary-model-object*
                             :bi-resid-x-names))
                     (index (first
                             (choose-subset-dialog
                              "New variables" names))))
                (when
                 (equalp (length index) 2)
                 (let* ((ind1 (select index 0))
                        (ind2 (select index 1))
                        (biplot-x (send 
                                   *binary-model-object*
                                   :bi-resid-x))
                        (xxx1 (select biplot-x ind1))
                        (xxx2 (select biplot-x ind2)))
                   (send graph :start-buffering)
                   (send graph :clear)
                   (send graph :add-points 
                         (list xxx1 xxx2))
                   (send graph :range
                         (list 0 1)
                         (list (min xxx1) (min xxx2))
                         (list (max xxx1) (max xxx2)))
                   (send graph :x-axis t t 3)
                   (send graph :y-axis t t 3)
                   (send graph :variable-label (list 0 1) 
                         (select names index))
                   (send graph :point-color (iseq diff) 'blue)
                   (send graph :point-color (+ diff (iseq sum)) 'red)
                   (send *binary-parametric-visual-object*
                               :add-beta-vec (list ind1 ind2) graph)
                   (send graph :redraw)
                   (send graph :buffer-to-screen))))
              t)))
    (send plot-over :add-slot 'location
          (list ascent (round (* 1.5 ascent))
                ascent (round (+ ascent (* 1.5 ascent)))))
    (send plot :margin 0 (round (* 1.5 (+ descent ascent))) 0 0)
    (send plot :use-color t)
    (send plot :add-overlay plot-over)
    (send plot :point-color (iseq diff) 'blue)
    (send plot :point-color (+ diff (iseq sum)) 'red)
    (send plot :range
          (list 0 1)
          (list (min xx1) (min xx2))
          (list (max xx1) (max xx2)))
    (send plot :x-axis t t 3)
    (send plot :y-axis t t 3)
    (send self :add-beta-vec (list 0 1) plot)
    (send plot :show-window)
    (send self :biplot plot)
    (send self :biplot-over plot-over)))

(defmeth binary-parametric-visual-proto :infl-plot-maker
  (x1 x2)
  (let* ((y (send *binary-model-object* :y))
         (sum (sum y))
         (length (length y))
         (diff (- length sum))
         (plot (plot-points x1 x2
                            :show nil
                            :title "Influence Plot"
                            :location (list 228 268)
                            :variable-labels (list "Hat Matrix Diagonal"
                                                   "Delta Beta")
                            :size (list 210 210)))
         (plot-over (send graph-overlay-proto :new))
         (ascent (send plot :text-ascent))
         (descent (send plot :text-descent)))
    (defmeth plot-over :location () (slot-value 'location))
    (defmeth plot-over :redraw ()
    (let* ((loc (send self :location))
           (x (first loc))
           (y (second loc))
           (box (third loc))
           (string-x (fourth loc))
           (graph (send self :graph)))
      (send graph :frame-rect x (- y box) box box)
      (send graph :draw-string "New Plot" string-x y)))
    (defmeth plot-over :do-click (x y m1 m2)
    (let* ((loc (send self :location))
           (box (third loc))
           (left (first loc))
           (top (- (second loc) box))
           (right (+ left box))
           (bottom (+ top box))
           (graph (send self :graph))
           (yy (send *binary-model-object* :y))
           (sum (sum yy))
           (length (length yy))
           (diff (- length sum)))
      (when (and (< left x right) (< top y bottom))
            (let* ((plot-stuff
                    (send *binary-parametric-visual-object* :infl-replot))
                   (points (select plot-stuff 0))
                   (names (select plot-stuff 1))
                   (xx1 (select points 0))
                   (xx2 (select points 1)))
              (when (and xx1 xx2)
                    (send graph :start-buffering)
                    (send graph :clear-points)
                    (send graph :add-points points)
                    (send graph :variable-label (list 0 1) names)
                    (send graph :point-color (iseq diff) 'blue)
                    (send graph :point-color (+ diff (iseq sum)) 'red)
                    (send graph :range
                          (list 0 1)
                          (list (min xx1) (min xx2))
                          (list (max xx1) (max xx2)))
                    (send graph :x-axis t t 3)
                    (send graph :y-axis t t 3)
                    (send graph :buffer-to-screen)))
            t)))
    (send plot-over :add-slot 'location
          (list ascent (round (* 1.5 ascent))
                ascent (round (+ ascent (* 1.5 ascent)))))
    (send plot :margin 0 (round (* 1.5 (+ descent ascent))) 0 0) 
    (send plot :use-color t)
    (send plot :point-color (iseq diff) 'blue)
    (send plot :point-color (+ diff (iseq sum)) 'red)
    (send plot :add-overlay plot-over)
    (send plot :range (list 0 1)
          (list (min x1) (min x2))
          (list (max x1) (max x2)))
    (send plot :x-axis t t 3)
    (send plot :y-axis t t 3)
    (send plot :show-window)
    (send self :infl-plot plot)
    (send self :infl-plot-over plot-over)))

(defmeth binary-parametric-visual-proto :obs-names-window-maker ()
  (let* ((y (send *binary-model-object* :y))
         (sum (sum y))
         (length (length y))
         (diff (- length sum))
         (window (name-list (send *binary-model-object* :obs-names) 
                             :show nil)))
    (send window :size 184 239)
    (send window :location 455 18)
    (send window :use-color t)
    (send window :point-color (iseq diff) 'blue)
    (send window :point-color (+ diff (iseq sum)) 'red)
    (send window :title "Observations")
    (send window :show-window)
    (send self :obs-names-win window)))

(defmeth binary-parametric-visual-proto :resid-plot-maker
  ()
  (let* ((col-x (send *binary-model-object* :bi-resid-x))
         (y (send *binary-model-object* :y))
         (resids-z (send *binary-parametric-object* :resids-z))
         (sum (sum y))
         (length (length y))
         (diff (- length sum))
         (x1 (select col-x 0))
         (plot (plot-points x1 resids-z
                            :show nil
                            :title "Residual Plot"
                            :location (list 1 268)
                            :variable-labels
                            (list (select
                                   (send self :col-names) 0)
                                  "Standardized Residual")
                            :size (list 210 210)))
         (plot-over (send graph-overlay-proto :new))
         (ascent (send plot :text-ascent))
         (descent (send plot :text-descent)))
    (send plot :abline 0 0)
    (defmeth plot-over :location () (slot-value 'location))
    (defmeth plot-over :redraw ()
      (let* ((loc (send self :location))
             (x (first loc))
             (y (second loc))
             (box (third loc))
             (string-x (fourth loc))
             (graph (send self :graph)))
        (send graph :frame-rect x (- y box) box box)
        (send graph :draw-string "New Plot" string-x y)))
    (defmeth plot-over :do-click (x y m1 m2)
      (let* ((loc (send self :location))
             (box (third loc))
             (left (first loc))
             (top (- (second loc) box))
             (right (+ left box))
             (bottom (+ top box))
             (graph (send self :graph))
             (yy (send *binary-model-object* :y))
             (sum (sum yy))
             (length (length yy))
             (diff (- length sum)))
        (when (and (< left x right) (< top y bottom))
              (cond 
                ((and m1 (member '*binary-smooth-object* (variables)))
                 (let ((logit-s (send *binary-smooth-object* :pred-val))
                       (logit-p (send *binary-parametric-object* :pred-val)))
                   (send graph :start-buffering)
                   (send graph :clear)
                   (send graph :add-points logit-p logit-s)
                   (send graph :variable-label
                         (list 0 1) 
                         (list "Parametric Logits" "Smooth Logits"))
                   (send graph :point-color (iseq diff) 'blue)
                   (send graph :point-color (+ diff (iseq sum)) 'red)
                   (send graph :range (list 0 1)
                         (list (min logit-p) (min logit-s))
                         (list (max logit-p) (max logit-s)))
                   (send graph :x-axis t t 3)
                   (send graph :y-axis t t 3)
                   (send graph :title "Logits Plot")
                   (send graph :buffer-to-screen)))
                ((and m2 (member '*binary-smooth-object* (variables)))
                 (let* ((names (send 
                                *binary-model-object*
                                :bi-resid-x-names))
                        (selection (choose-item-dialog "New variable" names)))
                   (when selection
                         (let ((points (select
                                        (send 
                                         *binary-model-object*
                                         :bi-resid-x)
                                        selection))
                               (p-diff 
                                (- (send *binary-smooth-object* 
                                         :pred-val-p)
                                   (send *binary-parametric-object*
                                         :pred-val-p))))
                           (send graph :start-buffering)
                           (send graph :clear)
                           (send graph :add-points
                                 points p-diff)
                           (send graph :variable-label
                                 (list 0 1)
                                 (list (select names selection)
                                 "Prob Smooth - Prob Parametric"))
                           (send graph :point-color (iseq diff) 'blue)
                           (send graph :point-color (+ diff (iseq sum)) 'red)
                           (send graph :range (list 0 1)
                                 (list (min points) (min p-diff))
                                 (list (max points) (max p-diff)))
                           (send graph :x-axis t t 3)
                           (send graph :y-axis t t 3)
                           (send graph :abline 0 0)
                           (send graph :title "Residual Plot")
                           (send graph :buffer-to-screen)))))
                           
                (t
                 (let* ((names (send 
                                *binary-model-object*
                                :bi-resid-x-names))
                        (selection (choose-item-dialog "New variable" names)))
                   (when selection
                         (let ((points (select
                                        (send 
                                         *binary-model-object*
                                         :bi-resid-x)
                                        selection))
                               (resids-z (send *binary-parametric-object*
                                               :resids-z)))
                           (send graph :start-buffering)
                           (send graph :clear)
                           (send graph :add-points
                                 points resids-z)
                           (send graph :variable-label
                                 (list 0 1)
                                 (list (select names selection)
                                       "Standardized Residual"))
                           (send graph :point-color (iseq diff) 'blue)
                           (send graph :point-color (+ diff (iseq sum)) 'red)
                           (send graph :range (list 0 1)
                                 (list (min points) (min resids-z))
                                 (list (max points) (max resids-z)))
                           (send graph :x-axis t t 3)
                           (send graph :y-axis t t 3)
                           (send graph :abline 0 0)
                           (send graph :title "Residual Plot")
                           (send graph :buffer-to-screen))))
                 t)))))
    (send plot-over :add-slot 'location
          (list ascent (round (* 1.5 ascent))
                ascent (round (+ ascent (* 1.5 ascent)))))
    (send plot :margin 0 (round (* 1.5 (+ descent ascent))) 0 0)
    (send plot :use-color t)
    (send plot :add-overlay plot-over)
    (send plot :point-color (iseq diff) 'blue)
    (send plot :point-color (+ diff (iseq sum)) 'red)
    (send plot :range (list 0 1) 
          (list (min x1) (min resids-z))
          (list (max x1) (max resids-z)))
    (send plot :x-axis t t 3)
    (send plot :y-axis t t 3)
    (send plot :show-window)
    (send self :resid-plot plot)
    (send self :resid-plot-over plot-over)))

(defmeth binary-parametric-visual-proto :stats-window-maker ()
  (let* ((window (send graph-window-proto :new :show nil))
         (names (send *binary-model-object* :x-names))
         (orderer 
          (append (send *binary-model-object* :x-selector)
                  (mapcar #'second 
                          (send *binary-model-object* :linked-vars))))
         (orderer (order orderer))
         (estimates 
          (select (send *binary-parametric-object* :estimates) orderer))
        (std-errs 
         (select (send *binary-parametric-object* :std-errs) orderer)))
    (defmeth window :redraw ()
      (let* ((ta (send window :text-ascent))
             (twp (send window :text-width "Parameter"))
             (twe (send window :text-width "Estimate")))
        (send window :draw-string "Parameter" 2 10)
        (send window :draw-string "Estimate" (+ twe 22) 10)
        (send window :draw-string "Std Error" (+ twe twp 30) 10)
        (dotimes 
         (i (length names))
         (send window :draw-string
               (select names i)
               2 (+ (* ta i) ta 15 (* 5 i)))
         (send window :draw-string
               (format nil "~7,4f" (select estimates i))
               (+ twe 22)
               (+ (* ta i) ta 15 (* 5 i)))
         (send window :draw-string
               (format nil "~7,4f"  (select std-errs i))
               (+ twe twp 30)
               (+ (* ta i) ta 15 (* 5 i))))
        (send window :draw-string
              (format nil "Log Likelihood   ~8,6f" 
                      (send *binary-parametric-object* :likelyhood))
              2
              (+ (* ta (+ (length names) 2))
                 15 (* 5 (+ (length names) 1))))))
    (send window :size 170 182)
    (send window :location 455 297)
    (send window :title "Statistics")
    (send window :show-window)
    (send self :stats-window window)))