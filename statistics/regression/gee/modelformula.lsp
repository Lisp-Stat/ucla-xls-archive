;
; Model formula tools for XLISP-Stat regression methods
;
;

;simplest possible version

(defun factor (x &key namebase ) "Defines treatment contrast matrix for x and optionally a set of names based on namebase"
  (let* (
	 (xlist (sort-data (remove-duplicates (coerce x 'list) :test #'equalp)))
       	 (p (- (length xlist) 1))
	 (rows (row-list (select (identity-matrix (+ p 1)) (iseq 0 p) (iseq 1 p))))
	 (decoder (mapcar #'cons xlist rows))
	 (xmatrix (apply #'bind-rows (mapcar #'(lambda (xx) (cdr (assoc xx decoder :test #'equalp))) x)))
	 (xnames (if (null  namebase) nil (cdr (mapcar #'(lambda (xx) (write-to-string (list namebase xx) :escape nil)) xlist))))
    )
    (if (null namebase) xmatrix (list xmatrix xnames))
)
)


(defun interaction ( xs &key (is-factor (repeat t (length xs))) namebases ) "Interactions of any order for categorical and continuous variables"
  (let*  ( (n (length (first xs)))
	  (zlist nil)
	  (znames nil)
	  (p (length xs))
	  (names (if (null namebases) (repeat "." p) namebases))
	  (junk (dotimes (i p)
			(let* (
			       (thisz  (if (elt is-factor i) (factor (elt xs i) :namebase (elt names i)) (list (bind-columns (elt xs i)) (list (elt names i)))))
			       )
			  (if (null zlist) (setf zlist (column-list (first thisz)))   (setf zlist (apply #'append (mapcar #'(lambda (xx) (mapcar #'(lambda (yy) (*  xx yy)) (column-list (first thisz)))) zlist))))
			  (if (null znames) (setf znames (second thisz))  (setf znames (apply #'append (mapcar #'(lambda (xx) (mapcar #'(lambda (yy) (write-to-string (list xx yy) :escape nil)) (second thisz))) znames))))
			  )
			)
		)
	  (zmat (apply #'bind-columns zlist))
	  )
    (if (null namebases) zmat (list zmat znames))
))
	  
			  

;
(defun block-test (index beta covmat &key blockname names (block-only nil))
  (let* (
	 (subbeta (select beta index))
	 (subcov  (select covmat index index))
	 (waldchisq (inner-product subbeta (matmult (inverse subcov) subbeta)))
	 (waldp (- 1 (chisq-cdf waldchisq (length index))))
	 (subse (sqrt (diagonal subcov)))
	 (subz (/ subbeta subse))
	 (subp (* 2 (- 1 (normal-cdf (abs subz)))))
	 (nn (if (null names) (repeat "" (length index)) (select names index)))
	 (blockn (if (null blockname) "block" blockname))
	 )
    (format t "~a~20t~13,5g~35t~,4f~%" blockn waldchisq waldp)
    (cond ((null block-only)
	(format t "~5t Variable~25t Estimate~40t Std.Err.~55t p-value~%")
	(dolist (i (iseq 0 (- (length index) 1)))
	(format t "~5t~a~25t~13,5g~40t(~,6g)~55t~,4f~%" (select nn i) (select subbeta i) (select subse i) (select subp i)))
	)
      )
    )
)


(defun design (varlist) (apply #'bind-columns (mapcar #'first varlist)))

(defun names (varlist) (apply #'append (mapcar #'second varlist)))


;;
;; semi-refined version
;;
;; input: a quoted list of factor, term and interaction statements
;; output: a design matrix, a set of variable names, a set of block names and
;;         a set of block indices.
;;
; a pointless function which doesn't actually get evaluated
(defun term (x) "A metric predictor variable" (x &key namebase) (list (list x) namebase))

(defun col-count (matlist) "adds up columns"  (apply #'sum (mapcar #'(lambda (x) (cond ((matrixp x) (second (array-dimensions x))) (t 1))) matlist)))
;
; This function does the work. Note that the design matrix is set up backwards
; since cons sticks things on the front of a list.
; 
;


(defun formula (model-formula) 
"Calculates a design matrix, variable names and information for running (block-test) on the fitted model. 
Argument: a quoted list of metric variables, factor variables and interactions. Metric variables are specified by (term x), factor variables by (factor a) and interactions by (interaction (list a b x) :is-factor (list t t nil)). "
(let* (
       (design-matrix nil)
       (name-list nil)
       (block-names nil)
       (block-indices nil)
       (i 0)
       (junk (dolist (x model-formula) 
		     (setf i (if (null design-matrix) 0 (col-count design-matrix)))
		     (cond
		      ((eql (car x) 'term)  
		       (let* ((namepos (position ':namebase x))
			      )
		       (setf 
			design-matrix (cons (eval (second x)) design-matrix)
			name-list (cons  (if (null (find ':namebase x)) (list (string (second x))) (list (fourth x))) name-list)
			block-names (cons (string (if (null namepos) (second x) (elt x (+ 1 namepos)))) block-names)
			block-indices (cons (list i) block-indices)
			)
		       )
		       )
		       ((eql (car x) 'factor)
			(let* ((namepos (position ':namebase x))
			       (factorx (eval (if (null namepos) (append x (list :namebase (string (second x)))) x)))
			       )
			  (setf 
			   design-matrix (cons (first factorx) design-matrix)
			   name-list (cons (second factorx) name-list)
			   block-names (cons (string (if (null namepos) (second x) (elt x (+ 1 namepos)))) block-names)
			   block-indices (cons (iseq i (- (col-count design-matrix) 1)) block-indices)
			   )
			  )
			)
		       ((eql (car x) 'interaction)
			(let* ( 
			       (namepos (position ':namebases x))
			       (interx (eval (if (null namepos) (append x (list :namebases (cons 'list (mapcar #'string (cdr (second x)))))) x)))
			       )
			  (setf 
			   design-matrix (cons (first interx) design-matrix)
			   name-list (cons (second interx) name-list)
			   block-names (cons (write-to-string (cons 'interaction (if (null namepos) (cdr (second x)) (cdr (elt x (+ 1 namepos)))) ) :escape nil)  block-names)
			   block-indices (cons (iseq i (- (col-count design-matrix) 1)) block-indices)
			   )
			  )
			)
		       (t (error "I don't understand ~s" x))
		      )
		     )
	     )
       )
  (list (apply #'bind-columns (reverse design-matrix))  (apply #'append  (reverse name-list)) (reverse block-names) (reverse block-indices))
)
)


(defun formula-display (beta cov-mat model-formula &key (block-only t) (intercept t)) 
"Display a model summary for a model with coefficient estimates beta and covariance estimates cov-mat and design matrix from model-formula.  This should really be a method for the relevant object. Little checking is performed: garbage in; garbage out"
(let* ( 
       (xintercept (if intercept 1 0))
       (nblocks (length (fourth model-formula)))
       (varnames (if intercept (cons "Intercept" (second model-formula)) (second model-formula)))
       (block-indices (+ xintercept (fourth model-formula)))
       )
  (format t "~a~20t~a~35t~a~%" "Block" "Wald Chisq" "p-value")
  (if (equal (length beta) (+ xintercept (second (array-dimensions (first model-formula)))))
      (dolist (i (iseq 0 (- nblocks 1)))
	      (block-test (elt block-indices i) beta cov-mat :names varnames :blockname (elt (third model-formula) i) :block-only block-only))
    (error "length of beta doesn't match design matrix")
    )
  )
)

;--------- model-formula prototype ------------

(defproto model-formula-proto '(formula design-matrix name-list block-names block-indices) '() *object* "Model formula")

(defmeth model-formula-proto :formula (&optional (new nil set))
"Set or return model formula"
  (when set
	(setf (slot-value 'formula) new)
	(send self :compute))
  (slot-value 'formula))

(defmeth model-formula-proto :isnew (&key formula)
  (send self :formula formula)
)

(defun as-formula (x) (send model-formula-proto :new :formula x))
;

(defmeth model-formula-proto :design-matrix (&optional (new nil set))
"Sets or returns design-matrix"
  (when set
	(setf (slot-value 'design-matrix) new))
  (slot-value 'design-matrix))

(defmeth model-formula-proto :name-list (&optional (new nil set) )
"Sets or returns list of column names"
  (when set
	(setf (slot-value 'name-list) new))
  (slot-value 'name-list))

(defmeth model-formula-proto :block-names (&optional (new nil set))
"Sets or returns list of block names"
  (when set
	(setf (slot-value 'block-names) new))
  (slot-value 'block-names))

(defmeth model-formula-proto :block-indices (&optional (new nil set) )
"Sets or returns list of column names"
  (when set
	(setf (slot-value 'block-indices) new))
  (slot-value 'block-indices))


;

(defmeth model-formula-proto :compute ()
"Internal use"
(let* ( 
       (result (formula (send self :formula)))
       )
  (send self :design-matrix (first result))
  (send self :name-list (second result))
  (send self :block-names (third result))
  (send self :block-indices (fourth result))
))

;
; methods for regression-proto and some descendants
; This will work if :sigma-hat^2*:xtxinv is the covariance matrix
; which is also true for the glim and nonlinear regression prototypes
;

(defun regression-formula (formula-object y &rest args &key (predictor-names nil has-names) (print-summary t) (intercept t) (print t))
"Like regression-model but uses a formula instead of the x argument"
(let* (
       (name-list (if has-names predictor-names (send formula-object :name-list)))
       (result (apply #'regression-model (list (send formula-object ':design-matrix) y  ':predictor-names name-list ':print (null print-summary) args)))
  )
  (send result :add-slot 'formula formula-object)
  (if print-summary (send result :display-with-formula t))
  result
))


(defmeth regression-model-proto :formula (&optional (new nil set))
"Sets or returns the model formula object or nil for none"
  (when (and set (send self :has-slot 'formula))
	(setf (slot-value 'formula) new))
  (slot-value 'formula))

(defmeth regression-model-proto :display-with-formula  (&optional (block-only t))
"Display a summary of the model based on its formula"
(let (
      (formula (if (send self :has-slot 'formula) (send self :formula) nil))
      )
  (cond ((null formula)
	 (format t "No formula present: using default method~%")
	 (send self :display))
	(t 
	 (let* ( 
		(xintercept (if (send self :intercept) 1 0))
		(nblocks (length (send formula :block-indices)))
		(block-indices (+ xintercept (send formula :block-indices)))
		(cov-mat (* (^ (send self :sigma-hat) 2) (send self :xtxinv)))
		(varnames (if (send self :intercept) (cons "Intercept" (send self :predictor-names)) (send self :predictor-names)))
		)
	   (format t "~a~20t~a~35t~a~%" "Block" "Wald Chisq" "p-value")
	   (dolist (i (iseq 0 (- nblocks 1) ))
		   (block-test (elt block-indices i) (send self :coef-estimates) cov-mat :names varnames :blockname  (elt (send formula :block-names) i) :block-only block-only))
	   )
	 )
	)
  )
)



(provide "modelformula")\Rogue\Monster\
else
  echo "will not over write ./modelformula.lsp"
fi
if `test ! -s ./modelformula.ps`
then
echo "writing ./modelformula.ps"
cat > ./modelformula.ps << '\Rogue\Monster\'
%!PS-Adobe-2.0
%%Creator: dvipsk 5.58f Copyright 1986, 1994 Radical Eye Software
%%Title: modelformula.dvi
%%Pages: 11
%%PageOrder: Ascend
%%BoundingBox: 0 0 612 792
%%DocumentPaperSizes: Letter
%%EndComments
%DVIPSCommandLine: dvips -o
%+ /biostat/user6/thomas/public_html/gee/modelformula.ps modelformula
%DVIPSParameters: dpi=300, compressed, comments removed
%DVIPSSource:  TeX output 1996.03.30:1125
%%BeginProcSet: texc.pro
/TeXDict 250 dict def TeXDict begin /N{def}def /B{bind def}N /S{exch}N
/X{S N}B /TR{translate}N /isls false N /vsize 11 72 mul N /hsize 8.5 72
mul N /landplus90{false}def /@rigin{isls{[0 landplus90{1 -1}{-1 1}
ifelse 0 0 0]concat}if 72 Resolution div 72 VResolution div neg scale
isls{landplus90{VResolution 72 div vsize mul 0 exch}{Resolution -72 div
hsize mul 0}ifelse TR}if Resolution VResolution vsize -72 div 1 add mul
TR[matrix currentmatrix{dup dup round sub abs 0.00001 lt{round}if}
forall round exch round exch]setmatrix}N /@landscape{/isls true N}B
/@manualfeed{statusdict /manualfeed true put}B /@copies{/#copies X}B
/FMat[1 0 0 -1 0 0]N /FBB[0 0 0 0]N /nn 0 N /IE 0 N /ctr 0 N /df-tail{
/nn 8 dict N nn begin /FontType 3 N /FontMatrix fntrx N /FontBBox FBB N
string /base X array /BitMaps X /BuildChar{CharBuilder}N /Encoding IE N
end dup{/foo setfont}2 array copy cvx N load 0 nn put /ctr 0 N[}B /df{
/sf 1 N /fntrx FMat N df-tail}B /dfs{div /sf X /fntrx[sf 0 0 sf neg 0 0]
N df-tail}B /E{pop nn dup definefont setfont}B /ch-width{ch-data dup
length 5 sub get}B /ch-height{ch-data dup length 4 sub get}B /ch-xoff{
128 ch-data dup length 3 sub get sub}B /ch-yoff{ch-data dup length 2 sub
get 127 sub}B /ch-dx{ch-data dup length 1 sub get}B /ch-image{ch-data
dup type /stringtype ne{ctr get /ctr ctr 1 add N}if}B /id 0 N /rw 0 N
/rc 0 N /gp 0 N /cp 0 N /G 0 N /sf 0 N /CharBuilder{save 3 1 roll S dup
/base get 2 index get S /BitMaps get S get /ch-data X pop /ctr 0 N ch-dx
0 ch-xoff ch-yoff ch-height sub ch-xoff ch-width add ch-yoff
setcachedevice ch-width ch-height true[1 0 0 -1 -.1 ch-xoff sub ch-yoff
.1 sub]/id ch-image N /rw ch-width 7 add 8 idiv string N /rc 0 N /gp 0 N
/cp 0 N{rc 0 ne{rc 1 sub /rc X rw}{G}ifelse}imagemask restore}B /G{{id
gp get /gp gp 1 add N dup 18 mod S 18 idiv pl S get exec}loop}B /adv{cp
add /cp X}B /chg{rw cp id gp 4 index getinterval putinterval dup gp add
/gp X adv}B /nd{/cp 0 N rw exit}B /lsh{rw cp 2 copy get dup 0 eq{pop 1}{
dup 255 eq{pop 254}{dup dup add 255 and S 1 and or}ifelse}ifelse put 1
adv}B /rsh{rw cp 2 copy get dup 0 eq{pop 128}{dup 255 eq{pop 127}{dup 2
idiv S 128 and or}ifelse}ifelse put 1 adv}B /clr{rw cp 2 index string
putinterval adv}B /set{rw cp fillstr 0 4 index getinterval putinterval
adv}B /fillstr 18 string 0 1 17{2 copy 255 put pop}for N /pl[{adv 1 chg}
{adv 1 chg nd}{1 add chg}{1 add chg nd}{adv lsh}{adv lsh nd}{adv rsh}{
adv rsh nd}{1 add adv}{/rc X nd}{1 add set}{1 add clr}{adv 2 chg}{adv 2
chg nd}{pop nd}]dup{bind pop}forall N /D{/cc X dup type /stringtype ne{]
}if nn /base get cc ctr put nn /BitMaps get S ctr S sf 1 ne{dup dup
length 1 sub dup 2 index S get sf div put}if put /ctr ctr 1 add N}B /I{
cc 1 add D}B /bop{userdict /bop-hook known{bop-hook}if /SI save N @rigin
0 0 moveto /V matrix currentmatrix dup 1 get dup mul exch 0 get dup mul
add .99 lt{/QV}{/RV}ifelse load def pop pop}N /eop{SI restore userdict
/eop-hook known{eop-hook}if showpage}N /@start{userdict /start-hook
known{start-hook}if pop /VResolution X /Resolution X 1000 div /DVImag X
/IE 256 array N 0 1 255{IE S 1 string dup 0 3 index put cvn put}for
65781.76 div /vsize X 65781.76 div /hsize X}N /p{show}N /RMat[1 0 0 -1 0
0]N /BDot 260 string N /rulex 0 N /ruley 0 N /v{/ruley X /rulex X V}B /V
{}B /RV statusdict begin /product where{pop product dup length 7 ge{0 7
getinterval dup(Display)eq exch 0 4 getinterval(NeXT)eq or}{pop false}
ifelse}{false}ifelse end{{gsave TR -.1 .1 TR 1 1 scale rulex ruley false
RMat{BDot}imagemask grestore}}{{gsave TR -.1 .1 TR rulex ruley scale 1 1
false RMat{BDot}imagemask grestore}}ifelse B /QV{gsave newpath transform
round exch round exch itransform moveto rulex 0 rlineto 0 ruley neg
rlineto rulex neg 0 rlineto fill grestore}B /a{moveto}B /delta 0 N /tail
{dup /delta X 0 rmoveto}B /M{S p delta add tail}B /b{S p tail}B /c{-4 M}
B /d{-3 M}B /e{-2 M}B /f{-1 M}B /g{0 M}B /h{1 M}B /i{2 M}B /j{3 M}B /k{
4 M}B /w{0 rmoveto}B /l{p -4 w}B /m{p -3 w}B /n{p -2 w}B /o{p -1 w}B /q{
p 1 w}B /r{p 2 w}B /s{p 3 w}B /t{p 4 w}B /x{0 S rmoveto}B /y{3 2 roll p
a}B /bos{/SS save N}B /eos{SS restore}B end
%%EndProcSet
TeXDict begin 40258431 52099146 1000 300 300 (modelformula.dvi)
@start /Fa 2 67 df<140CA2141CA2143C147CA214BE149EEB011E1302A21304A21308
1310A2EB201F80EB7FFFEB800FA2EA0100A212025AA2001C148039FF807FF01C1D7F9C1F
>65 D<48B5128039003E00E0013C137015781538A25B1578A215F09038F001E0EC03C0EC
0F00EBFFFE3901E00780EC03C0EC01E0A2EA03C0A439078003C01580EC0700141E48485A
B512E01D1C7F9B1F>I E /Fb 6 118 df<39FF0FC07E90383FE1FF3A1F61F30F80903980
FC07C0A2EB00F8AB3AFFE7FF3FF8A225127F9128>109 D<38FF0FC0EB3FE0381F61F0EB
80F8A21300AB38FFE7FFA218127F911B>I<EA01FC380FFF80381F07C0383E03E0387C01
F0A200FC13F8A6007C13F0A2383E03E0381F07C0380FFF803801FC0015127F9118>I<EA
1FD8EA3FF8EA7038EAE018A2EAF000EAFF80EA7FE013F0EA1FF8EA07FCEA007CEAC01CA2
12E0EAF038EAFFF0EACFC00E127E9113>115 D<1203A35AA25AA2123FEAFFFCA2EA1F00
A9130CA4EA0F98EA07F0EA03E00E1A7F9913>I<38FF07F8A2EA1F00AC1301EA0F023807
FCFF6C5A18127F911B>I E /Fc 73 122 df<EA6030EAF078A8EAE038A30D0C7C9916>
34 D<EA0387A6B512E0A338070E00A3EA0F1EEA0E1CA3B512E0A3381C3800A613197F98
16>I<EA03C0487E120FEA1EF0EA1C70A3EBF7E013E7121F380FC7005B130E121FEA3F1E
EA7F9CEAF3BCEAE3F812E138E0F0E0A2EAF1F8EA7FFF383F9FC0381F0F8013197F9816>
38 D<12301278127C123C121CA3123C1238127812F012E012C0060D789816>I<13E01201
EA07C013005A121E5A123812781270A312F05AA77E1270A312781238123C7E7E7E13C0EA
01E012000B217A9C16>I<12E07E127C121C121E7EEA0780120313C01201A313E01200A7
120113C0A3120313801207EA0F00121E121C127C12F05A0B217C9C16>I<EA0380A4EAE3
8EEAFBBEEAFFFEEA3FF8EA0FE0A2EA3FF8EAFFFEEAFBBEEAE38EEA0380A40F127D9516>
I<13E0A8B512E0A33800E000A813137F9516>I<1238127C127EA2123E120E121E123C12
7C12F81260070B798416>I<B51280A311037E8D16>I<127012F8A312700505788416>I<
EA03E0EA0FF8487EEA1E3CEA380EEA780FEA7007A238E00380A8EAF00700701300A2EA78
0FEA3C1E6C5AEA1FFC6C5AEA03E011197E9816>48 D<12035A5AA25AB4FCA212F71207AE
EAFFF8A30D197B9816>I<EA07E0EA1FF8EA7FFEEA783FEAF00FEB07801303A21200A213
0714005B131E5B5B5BEA03E0EA078048C7FC381E0380123CEA7FFFB5FC7E11197E9816>
I<EA07E0EA1FFCEA7FFEEA781F7F7F12005BA2133EEA07FC5B7FEA001E130714801303A2
12F013071400EAF81FEA7FFE6C5AEA07E011197E9816>I<137C13FC13DC1201EA039CA2
EA071C120F120E121E123C1238127812F0B512E0A338001C00A53801FFC0A313197F9816
>I<EA3FFE127FA20070C7FCA7EA77F0EA7FFC7FEA7C0FEA3007000013801303126012F0
1307EB0F006C5AEA7FFEEA1FF8EA07E011197E9816>I<13F8EA03FEEA0FFFEA1F0F123E
123CEA78060070C7FC12F0EAE7F8EAFFFEA2EAF80F38F00780A2EAE00312F0A21270EA78
07EB0F006C5AEA1FFEEA0FF8EA03E011197E9816>I<12E0B51280A338E00F00131EC65A
13381378137013F05B12015B12035BA3120790C7FCA7111A7E9916>I<EA07F0EA1FFC48
7EEA7C1F38F00780EAE003A338700700EA7C1FEA1FFCEA07F0EA1FFCEA3C1EEA700700F0
1380EAE003A3EAF00700701300EA7C1FEA3FFE6C5AEA07F011197E9816>I<EA03E0EA0F
F8EA3FFCEA7C1EEA780F12F0487E1480A21303EAF007A2EA780FEA3FFFA2EA0FF3EA0007
1400EA300FEA780E131E137CEA7FF86C5AEA0F8011197E9816>I<127012F8A312701200
A8127012F8A312700512789116>I<EB03801307131FEB3E0013FCEA03F0485AEA1F8000
3EC7FC12FC12F012FC123E6C7EEA07E06C7EEA00FC133EEB1F801307130311157E9616>
60 D<B512E0A3C8FCA5B512E0A3130B7F9116>I<12E07E12FC123E6C7EEA07E06C7EEA00
FC133EEB1F801307131FEB3E0013FCEA03F0485AEA1F80003EC7FC12FC12F05A11157E96
16>I<EA0FF0EA3FFE487E38F00F801303A2EA600738001F00137E13F85B485A5BA45BC8
FCA4487E487EA26C5A11197E9816>I<13E0487EA213B0A2EA03B8A31318EA071CA5EA0E
0EA2EA0FFEA2487EEA1C07A3387E0FC038FF1FE0387E0FC013197F9816>65
D<EA7FF8EAFFFE6C7EEA1C0714801303A4EB0700EA1FFF5BA2EA1C1FEB038014C01301A4
1303EB0780EA7FFFB51200EA7FFC12197F9816>I<3801F180EA07FF5AEA1F0FEA3C0712
781303127000F0C7FC5AA77E387003801278A2EA3C07381F0F00EA0FFE6C5AEA01F01119
7E9816>I<EA7FF8EAFFFE6C7EEA1C0FEB0780EB03C01301A214E01300A8EB01C0A21303
EB0780130F387FFF00485AEA7FF81319809816>I<387FFFC0B5FC7EEA1C01A490C7FCA2
131CA2EA1FFCA3EA1C1CA290C7FC14E0A5EA7FFFB5FC7E13197F9816>I<387FFFE0B5FC
7EEA1C00A41400A2131CA2EA1FFCA3EA1C1CA290C7FCA6EA7F80487E6C5A13197F9816>
I<3801F180EA07FF5AEA1F0FEA3C0712781303127000F0C7FC5AA4EB1FC014E014C038F0
03801270EA7807A2EA3C0FEA1E1FEA0FFFEA07FBEA01F313197F9816>I<EA7FFCEAFFFE
EA7FFCEA0380B3EA7FFCEAFFFEEA7FFC0F197D9816>73 D<B47E7F5B001CC7FCAE144014
E0A4B5FCA313197F9816>76 D<38FC07E0EAFE0FA2383A0B80EA3B1BA413BBA2EA39B3A4
13F3EA38E3A21303A538FE0FE0A313197F9816>I<387E07F038FF0FF8387F07F0381D81
C0A313C1121C13E1A213611371A313311339A21319131D130DA3EA7F07EAFF87EA7F0315
19809816>I<EA1FFC487E487EEA780F38F00780EAE003AEEAF007A238780F00EA7FFF6C
5A6C5A11197E9816>I<EA7FF8EAFFFE6C7E381C0F80130314C01301A313031480130F38
1FFF005B13F8001CC7FCA7127F487E6CC7FC12197F9816>I<EA7FF0EAFFFC6C7EEA1C0F
EB07801303A41307EB0F00EA1FFE5B7FEA1C1F1307A414101438A2007F13F838FF83F038
7F01E01519809816>82 D<EA07E3EA1FFF127FEA781F487E487EA290C7FC7E1278EA7F80
EA1FF0EA07FCC67E130FEB07801303A212E0A2EAF00738F80F00EAFFFE5BEAC7F011197E
9816>I<387FFFE0B5FCA2EAE0E0A400001300AFEA07FC487E6C5A13197F9816>I<387F07
F038FF8FF8387F07F0381C01C0B0EA1E03000E1380EA0F8F3807FF006C5AEA00F8151980
9816>I<38FE0FE0A338380380EA3C07001C1300A3EA1E0FEA0E0EA46C5AA4EA031813B8
A3EA01B013F0A26C5A13197F9816>I<387E03F038FF07F8387E03F0383800E0A4381C01
C0A3137113F9A213D9A2000C1380A3EA0DDD138DA338078F00A213071519809816>I<38
7F1F80EB3FC0EB1F80380E1E00131C12075BEA03B813F012015B120012017F120313B812
07131C120FEA0E0EA2487E387E0FC038FF1FE0387E0FC013197F9816>I<38FE0FE0EAFF
1FEAFE0F381C0700A2EA0E0EA26C5AA3EA03B8A2EA01F0A26C5AA8EA03F8487E6C5A1319
7F9816>I<1207EA1FC0EA7FF0EAFDF8EAF078EA40100D067C9816>94
D<EA1FE0EA7FF87FEA783EEA301EEA000E133EEA07FE123FEA7FCEEAF80E12E0A2EAF01E
EAF83E387FFFE0EA3FF7EA0FC313127E9116>97 D<12FCA3121CA4137CEA1DFF001F1380
EB07C0EA1E03EB01E0121C1300A4EA1E0114C0EA1F03EB078013FF381DFE00EA0CF81319
7F9816>I<EA03F8EA0FFE121FEA3C1EEA780CEA700012F05AA47EEA70071278EA3E0FEA
1FFEEA0FFCEA03F010127D9116>I<133FA31307A4EA03E7EA0FFF123FEA3C1F487E1270
EAF00712E0A46C5AA2EA781FEA7C3F383FFFE0EA1FF7EA07C713197F9816>I<EA03F0EA
0FFC487EEA3E1FEA780700701380EAF003B5FCA300E0C7FC7E387003801278EA3E0F381F
FF006C5AEA03F811127E9116>I<131FEBFF805AEA03C7EB83001380A2EA7FFFB5FCA2EA
0380ACEA7FFC487E6C5A11197F9816>I<3803E3C0380FFFE05A381E3CC0383C1E00EA38
0EA3EA3C1E6C5AEA1FFC485AEA3BE00038C7FC123CEA3FFC13FF4813C0EA780338F001E0
EAE000A3EAF001387C07C0383FFF80380FFE00EA03F8131C7F9116>I<12FCA3121CA413
F8EA1FFE7F130FEA1E07A2121CA938FF8FE0139F138F13197F9816>I<1203EA0780A2EA
0300C7FCA4EAFF80A31203ACEAFFFC13FE13FC0F1A7C9916>I<13301378A213301300A4
EA0FF8121F120FEA0038B3EA6078EAF0F0EAFFE0EA7FC0EA3F800D237E9916>I<127E12
FE127E120EA4EB7FE0A3EB0F00131E5B5B5BEA0FF8A213BC131EEA0E0E130FEB0780387F
87F0EAFFCFEA7F871419809816>I<EA7FC012FF127F1201B3EA7FFFB512806C13001119
7E9816>I<38FBC78038FFEFC0EBFFE0EA3E7CEA3C78EA3870AA38FE7CF8A31512809116>
I<EAFCF8EAFFFE7FEA1F0FEA1E07A2121CA938FF8FE0139F138F13127F9116>I<EA03E0
EA0FF8487EEA3C1E487EEA700738E00380A5EAF00700701300EA780FEA3C1EEA1FFC6C5A
EA03E011127E9116>I<EAFC7CEAFDFFB51280381F07C0EA1E03EB01E0121C1300A4EA1E
0114C0EA1F03EB078013FF381DFE00EA1CF890C7FCA6B47EA3131B7F9116>I<3803E380
EA0FFBEA1FFFEA3E1FEA780FEA700712F0EAE003A4EAF0071270EA780FEA3C1FEA3FFFEA
0FFBEA03E3EA0003A6EB1FF0EB3FF8EB1FF0151B7F9116>I<387F0F8038FF3FE0EA7FFF
EA07F1EBE0C0EBC0005BA290C7FCA7EA7FFC12FF127F13127F9116>I<EA0FECEA3FFC12
7FEAF03CEAE01CA2EAF000EA7F80EA1FF0EA07FCEA003EEAE00EA212F0EAF81EEAFFFC13
F8EAC7E00F127D9116>I<12035AA4EA7FFFB5FCA20007C7FCA75BEB0380A21307138738
03FF005BEA00F811177F9616>I<EAFC3FA3EA1C07AA5BEA1E1F381FFFE07EEA07E71312
7F9116>I<387F1FC038FF9FE0387F1FC0381C0700A2EA0E0EA36C5AA4EA03B8A3EA01F0
A26C5A13127F9116>I<38FF1FE0A338380380A4EA39F3A20019130013B3A3EA1DB71317
EA1F1FEA0F1EEA0E0E13127F9116>I<387F1FC0133F131F380F1E006C5AEA03B813F012
016C5A12017FEA03B8EA073C131CEA0E0E387F1FC038FF3FE0387F1FC013127F9116>I<
387F1FC038FF9FE0387F1FC0381C0700120E130EA212075BA2EA039CA21398EA01B8A2EA
00F0A35BA3485A1279127BEA7F8090C7FC123C131B7F9116>I E
/Fd 69 125 df<EB7E1F3901C1B180390303E3C0000713C3000EEBC180903801C000A6B5
12FC380E01C0B0387F87FC1A1D809C18>11 D<137E3801C180EA0301380703C0120EEB01
8090C7FCA5B512C0EA0E01B0387F87F8151D809C17>I<EB7FC0EA01C1EA03031207EA0E
01A7B5FCEA0E01B0387FCFF8151D809C17>I<90383F07E03901C09C18380380F0D80701
133C000E13E00100131892C7FCA5B612FC390E00E01CB03A7FC7FCFF80211D809C23>I<
127012F812FCA212741204A31208A2121012201240060D7D9C0C>39
D<1380EA0100120212065AA25AA25AA35AA412E0AC1260A47EA37EA27EA27E12027EEA00
80092A7C9E10>I<7E12407E12307EA27EA27EA37EA41380AC1300A41206A35AA25AA25A
12205A5A092A7E9E10>I<1306ADB612E0A2D80006C7FCAD1B1C7E9720>43
D<127012F012F8A212781208A31210A21220A21240050D7D840C>I<EAFFE0A20B028089
0E>I<127012F8A3127005057D840C>I<EA03C0EA0C30EA1818EA381CEA300CEA700EA3EA
F00FADEA700EA3EA300CEA381CEA1818EA0C30EA07E0101D7E9B15>48
D<5A1207123F12C71207B3A5EAFFF80D1C7C9B15>I<EA07C0EA1830EA201C1240130EEA
F00F12F8A312701200131EA2131C13381330137013C0EA018013001202EA040112081210
EA3002EA3FFE127F12FF101C7E9B15>I<EA07E0EA1870EA203C131CEA781EA31238EA00
1CA2133813301360EA07C0EA0030131CA2130E130FA2127012F8A3EAF00EEA401C1220EA
1830EA07C0101D7E9B15>I<130CA2131C133CA2135C13DC139CEA011C12031202120412
0C1208121012301220124012C0B512C038001C00A73801FFC0121C7F9B15>I<EA300CEA
3FF813F013C0EA2000A6EA23E0EA2C30EA3018131CEA200E1200130FA3126012F0A3EA80
0EEA401E131CEA2038EA1870EA07C0101D7E9B15>I<13F0EA030CEA0604EA0C0EEA181E
1238130CEA7000A3EAF3E0EAF430EAF818131C130E12F0130FA51270A2130E1238131CEA
1818EA0C30EA03E0101D7E9B15>I<1240387FFF801400A2EA4002485AA25B485AA25B13
60134013C0A212015BA21203A41207A66CC7FC111D7E9B15>I<EA03E0EA0C30EA1008EA
200C13061260A21270A2EA7C0CEA3E18EA3FB0EA1FE0EA07F013F8EA18FCEA307EEA601E
130FEAC0071303A4EA60021304EA300CEA1C10EA07E0101D7E9B15>I<EA03C0EA0C30EA
1818EA381CEA700C130E12F0A2130FA51270131F12381218EA0C2FEA07CFEA000EA3EA30
1C12781318EA7038EA2070EA10C0EA0F80101D7E9B15>I<127012F8A312701200A81270
12F8A3127005127D910C>I<127012F8A312701200A8127012F012F8A212781208A31210
A21220A21240051A7D910C>I<1306A3130FA3EB1780A2EB37C01323A2EB43E01341A2EB
80F0A338010078A2EBFFF83802003CA3487FA2000C131F80001E5BB4EBFFF01C1D7F9C1F
>65 D<B512C0380F00788080140E140FA4140E141E5C14F8EBFFF0EB003C8080801580A5
EC0F00A2141E1478B512E0191C7F9B1D>I<90381F8080EBE0613801801938070007000E
13035A14015A00781300A2127000F01400A8007014801278A212386CEB0100A26C13026C
5B380180083800E030EB1FC0191E7E9C1E>I<B512C0380F00F0143C140E80A2EC038015
C01401A215E0A815C0A21403158014071500140E5C1470B512C01B1C7E9B20>I<B512FC
380F003C140C1404A214061402A213011400A35B13FF13037FA3140113001402A31406A2
140C143CB512FC181C7E9B1C>I<B512F8380F007814181408A2140C1404A213011400A3
5B13FF13037FA490C7FCA8EAFFF8161C7E9B1B>I<90381F8080EBE06138018019380700
07000E13035A14015A00781300A2127000F01400A6ECFFF0EC0F80007013071278A21238
7EA27E6C130B380180113800E06090381F80001C1E7E9C21>I<EAFFF0EA0F00B3A8EAFF
F00C1C7F9B0F>73 D<EAFFF8EA0F8090C7FCB01408A31418A2141014301470EB01F0B5FC
151C7E9B1A>76 D<B46CEBFF80000FECF800A2390BC00178A33809E002A23808F004A3EB
7808A3EB3C10A3EB1E20A3EB0F40A2EB0780A3EB0300121C3AFF8307FF80211C7E9B26>
I<B4EB1FF0390F8003809038C00100120BEA09E0EA08F0A21378133C133E131E130F1481
1307EB03C1EB01E114F113001479147D143D141FA2808080121CB46C7E1C1C7F9B1F>I<
EB3F80EBE0E03803803848487E000E7F487F003C148000381303007814C0A20070130100
F014E0A8007014C000781303A200381480003C1307001C14006C130E6C5B6C6C5A3800E0
E0EB3F801B1E7E9C20>I<B51280380F00E01478143C141C141EA5141C143C147814E0EB
FF8090C7FCACEAFFF0171C7E9B1C>I<B5FC380F01E0EB007880141C141EA4141C143C5C
EB01E001FFC7FCEB01E0EB0070147880A61510A2141CA239FFF00E20C7EA03C01C1D7E9B
1F>82 D<3807E080EA1C19EA30051303EA600112E01300A36C13007E127CEA7FC0EA3FF8
EA1FFEEA07FFC61380130FEB07C0130313011280A300C01380A238E00300EAD002EACC0C
EA83F8121E7E9C17>I<007FB512C038700F010060130000401440A200C014201280A300
001400B1497E3803FFFC1B1C7F9B1E>I<3AFFE1FFC0FF3A1F003E003C001E013C13186C
6D1310A32607801F1320A33A03C0278040A33A01E043C080A33A00F081E100A39038F900
F3017913F2A2017E137E013E137CA2013C133C011C1338A20118131801081310281D7F9B
2B>87 D<39FFF003FC390F8001E00007EB00C06D13800003EB01006D5A000113026C6C5A
13F8EB7808EB7C18EB3C10EB3E20131F6D5A14C06D5AABEB7FF81E1C809B1F>89
D<EA0FE0EA1838EA3C1C7F12181200A2EA01FEEA0F8EEA3C0E1278127000F01320A3EA70
1E38382740380FC38013127F9115>97 D<12FC121CAA137CEA1D87381E0380381C01C014
E0130014F0A614E0130114C0381E038038190700EA10FC141D7F9C17>I<EA03F8EA0E0C
EA1C1E1238EA780CEA700012F0A61270EA78021238EA1C04EA0E18EA03E00F127F9112>
I<EB1F801303AAEA03F3EA0E0BEA1C07EA38031278127012F0A6127012781238EA1C07EA
0E1B3803E3F0141D7F9C17>I<EA07E0EA0C30EA1818EA381CEA701E130E12F0EAFFFEEA
F000A4127013021238EA1804EA0E18EA03E00F127F9112>I<13F8EA018CEA071E1206EA
0E0C1300A6EAFFE0EA0E00B0EA7FE00F1D809C0D>I<EB03803807E4C0EA0C3838381C80
1400EA781EA4EA381CA2EA1C30EA37E00020C7FC1230A2EA3FF86CB4FC1480EA30033860
01C0EAC000A33860018038300300EA1C0EEA07F8121C7F9215>I<12FC121CAA137C1387
EA1D03001E1380121CAD38FF9FF0141D7F9C17>I<1238127CA31238C7FCA612FC121CB0
EAFF80091D7F9C0C>I<EA01C0EA03E0A3EA01C0C7FCA6EA07E01200B3A21260EAF0C012
F1EA6180EA3E000B25839C0D>I<12FC121CAAEB0FE0EB0780EB06005B13105B5B13E012
1DEA1E70EA1C781338133C131C7F130F148038FF9FE0131D7F9C16>I<12FC121CB3A9EA
FF80091D7F9C0C>I<39FC7E07E0391C838838391D019018001EEBE01C001C13C0AD3AFF
8FF8FF8021127F9124>I<EAFC7CEA1C87EA1D03001E1380121CAD38FF9FF014127F9117>
I<EA03F0EA0E1CEA1806EA380738700380A200F013C0A600701380A238380700EA1C0E6C
5AEA03F012127F9115>I<EAFC7CEA1D87381E0380381C01C014E0130014F0A6EB01E0A2
14C0381E0380381D0700EA1CFC90C7FCA7B47E141A7F9117>I<3803E080EA0E19EA1C05
EA3807EA7803A212F0A612701278EA3807121CEA0E1BEA03E3EA0003A7EB1FF0141A7F91
16>I<EAFCE0EA1D38EA1E78A2EA1C301300ACEAFFC00D127F9110>I<EA1F90EA2070EA40
30EAC010A212E0EAF800EA7F80EA3FE0EA0FF0EA00F8EA8038131812C0A2EAE010EAD060
EA8FC00D127F9110>I<1204A4120CA2121C123CEAFFE0EA1C00A91310A5120CEA0E20EA
03C00C1A7F9910>I<38FC1F80EA1C03AD1307120CEA0E1B3803E3F014127F9117>I<38FF
07E0383C0380381C0100A2EA0E02A2EA0F06EA0704A2EA0388A213C8EA01D0A2EA00E0A3
134013127F9116>I<39FF3FC7E0393C0703C0001CEB01801500130B000E1382A2131100
0713C4A213203803A0E8A2EBC06800011370A2EB8030000013201B127F911E>I<38FF0F
E0381E0700EA1C06EA0E046C5AEA039013B0EA01E012007F12011338EA021C1204EA0C0E
487E003C138038FE1FF014127F9116>I<38FF07E0383C0380381C0100A2EA0E02A2EA0F
06EA0704A2EA0388A213C8EA01D0A2EA00E0A31340A25BA212F000F1C7FC12F312661238
131A7F9116>I<EA7FFCEA70381260EA407013F013E0EA41C012031380EA0700EA0F0412
0E121CEA3C0CEA380812701338EAFFF80E127F9112>I<B512F01401808B15>I<B8128029
01808B2A>I E /Fe 26 122 df<130E131E137EEA07FE12FFA212F81200B3ABB512FEA3
17277BA622>49 D<EBFF80000713F04813FC381E03FE393800FF80007C137F00FEEB3FC0
6C131F15E0A3127E123CC7FC15C0143F1580EC7F00147E5C495A495A5CEB078049C7FC13
1E013813E05B5B3901C001C0EA0380EA0600000FB5FC5A5A5AB61280A31B277DA622>I<
EB7F803803FFF04813FC380F81FE48C67E486C7E1580A3121F1300C713005C5C495A5CEB
07F0EBFF8080EB01F8EB00FE147F1580EC3FC0A215E0A2123C127EB4FCA215C0A248EB7F
80007CEBFF00383F01FE6CB45A000713F0C613801B277DA622>I<140FA25C5C5C5C5BA2
EB03BFEB073F130E131C133C1338137013E0EA01C0EA038012071300120E5A5A5A12F0B6
12F8A3C7EA7F00A890381FFFF8A31D277EA622>I<B512F0A33803FC00B3B1B512F0A314
297EA819>73 D<ECFFC0010F13FC90383FC0FF9039FE001FC048486D7E48486D7E48486D
7E48486D7E001F81491300003F81A2007F168049147FA300FF16C0AA007F16806D14FFA2
003F1600A26C6C495AA26C6C495A00075D6C6C495A6C6C495A6CB4EB3FC090263FC0FFC7
FC90380FFFFC010013C02A297CA833>79 D<B612F815FF16C03A03FC003FE0ED0FF0ED07
F816FC150316FEA716FC150716F8ED0FF0ED3FE090B61280EDFE0001FCC8FCB0B512F0A3
27297EA82E>I<3803FF80000F13F0381F01FC383F80FE147F801580EA1F00C7FCA314FF
137F3803FFBF380FF03FEA1F80EA3F00127E5AA46C137F007EEBDFC0393F839FFC381FFF
0F3803FC031E1B7E9A21>97 D<EAFFE0A3120FACEBE1FE9038EFFF809038FE07E09038F8
03F09038F001F89038E000FCA2157EA2157FA8157EA315FCA29038F001F89038F803F090
389C0FE090380FFF80390E01FC00202A7EA925>I<EB3FF03801FFFC3803F03E380FC07F
EA1F80EA3F00A248133E007E90C7FCA212FEA7127EA2127F6CEB03801380001FEB070038
0FE00E3803F83C3801FFF838003FC0191B7E9A1E>I<EC7FF0A31407ACEB3F873801FFF7
3807F03F380FC00F381F8007EA3F00A2127EA312FEA8127EA27EA2381F800F380FC01F39
07E07FFF3801FFE738007F87202A7EA925>I<EB3FC03801FFF03807E07C48487E48487E
D83F001380140F5A007E14C012FE1407A2B6FCA248C8FCA4127E127F6CEB01C01380001F
1303390FC007803903F01F003800FFFCEB3FE01A1B7E9A1F>I<EB07F8EB3FFCEB7E3E38
01FC7FEA03F813F01207143E1400A7B512C0A33807F000B3A3387FFF80A3182A7EA915>
I<EAFFE0A3120FAC14FE9038E3FF809038E70FC001EC13E0EBF80715F013F0A213E0B039
FFFE3FFFA3202A7DA925>104 D<1207EA1FC0EA3FE0A5EA1FC0EA0700C7FCA7EAFFE0A3
120FB3A3EAFFFEA30F2B7EAA12>I<1307EB1FC0EB3FE0A5EB1FC0EB070090C7FCA7EBFF
E0A3130FB3AA127C12FEEB1FC0A21480387C3F00EA3FFCEA0FF0133784AA15>I<EAFFE0
A3120FB3B2EAFFFEA30F2A7EA912>108 D<26FFC07FEB1FC0903AC1FFC07FF0903AC707
E1C1F8D80FCC9038F301FC9039D803F60003FE7F01F05BA201E05BB03CFFFE3FFF8FFFE0
A3331B7D9A38>I<38FFC0FE9038C3FF809038C70FC0D80FCC13E0EBD80715F013F0A213
E0B039FFFE3FFFA3201B7D9A25>I<EB3FE03801FFFC3803F07E390FC01F80391F800FC0
393F0007E0A2007EEB03F0A300FE14F8A8007E14F0A26CEB07E0A2391F800FC0390FC01F
803907F07F003801FFFC38003FE01D1B7E9A22>I<38FFC1F0EBC7FCEBCE3E380FDC7F13
D813F0A2143EEBE000B0B5FCA3181B7F9A1B>114 D<3803FE30380FFFF0EA3E03EA7800
127000F01370A27E00FE1300EAFFE06CB4FC14C06C13E06C13F0000713F8C6FCEB07FC13
0000E0137C143C7E14387E6C137038FF01E038F7FFC000C11300161B7E9A1B>I<13E0A4
1201A31203A21207120F381FFFE0B5FCA2380FE000AD1470A73807F0E0000313C03801FF
8038007F0014267FA51A>I<39FFE07FF0A3000F1307B2140FA20007131F3903F077FF38
01FFE738007F87201B7D9A25>I<39FFFC03FFA3390FF000F0000714E07F0003EB01C0A2
EBFC0300011480EBFE070000140013FFEB7F0EA2149EEB3F9C14FC6D5AA26D5AA36D5AA2
6D5AA2201B7F9A23>I<39FFFC03FFA3390FF000F0000714E07F0003EB01C0A2EBFC0300
011480EBFE070000140013FFEB7F0EA2149EEB3F9C14FC6D5AA26D5AA36D5AA26D5AA25C
A21307003890C7FCEA7C0FEAFE0E131E131C5BEA74F0EA3FE0EA0F8020277F9A23>121
D E /Ff 33 122 df<127012F812FCA212741204A41208A21210A212201240060F7C840E
>44 D<127012F8A3127005057C840E>46 D<EA01F0EA071CEA0C06487E00381380A23870
01C0A400F013E0AE007013C0A3EA780300381380A2381C0700EA0C06EA071CEA01F01322
7EA018>48 D<13801203120F12FF12F31203B3A8EAFFFEA20F217CA018>I<EA03F0EA0F
FCEA1C1F383007801260007813C0A21303EA380712001480A2EB0F00130E1338EA03F0EA
001C130FEB078014C0130314E0A21220127012F8A200F013C0EA4007148038300F00EA1C
1EEA0FFCEA03F013227EA018>51 D<137E48B4FC3803C180380701C0EA0E03121CEB0180
48C7FCA212781270A2EAF0F8EAF30CEAF4067F00F81380EB01C012F014E0A51270A30038
13C0130300181380381C0700EA0E0EEA07FCEA01F013227EA018>54
D<EA01F0EA07FCEA0E0E487E383803801278127038F001C0A314E0A5127013031238EA18
05120CEA0619EA03E1380001C0A213031480A2123038780700130EEA701CEA3038EA1FF0
EA0FC013227EA018>57 D<B512F814FE3907800F80EC07C0EC03E0140115F0A515E01403
EC07C0EC0F80EC3E00EBFFFE9038800780EC03C0EC01E015F0140015F8A6EC01F0140315
E0EC0FC0B6120014FC1D227EA123>66 D<B512F014FE3807801FEC0780EC03C0EC01E0EC
00F015F81578157C153CA3153EA9153CA2157C1578A215F0EC01E01403EC07C0EC1F00B5
12FE14F01F227EA125>68 D<EAFFFCA2000FC7FCB31401A41403A214021406A2141E147E
B512FEA218227DA11E>76 D<D8FFC0EB03FFA2000715E0D805E01305A2D804F01309A301
781311A36D1321A36D1341A26D1381A39038078101A3EB03C2A2EB01E4A3EB00F8A31470
120ED8FFE0EB3FFF142028227EA12D>I<3803F020380FFC60EA1C0E383803E0EA7000A2
481360A21420A36C1300A21278127FEA3FF0EA1FFE6C7E0003138038003FC0EB07E01301
EB00F0A214707EA46C136014E06C13C0EAF80138CE038038C7FF00EA81FC14247DA21B>
83 D<007FB512F8A239780780780060141800401408A200C0140CA200801404A4000014
00B3A23801FFFEA21E227EA123>I<39FFFC07FFA239078000701520B3A5000314407FA2
000114803800E0019038700300EB3C0EEB1FF8EB03F020237EA125>I<3BFFF03FFC03FE
A23B1F0003E000F86C4A13206E7ED807801540A24A7E2603C0021480A39039E004780100
011600A2EC083CD800F01402A2EC101E01785CA2EC200F013C5CA20260138890391E4007
90A216D090391F8003F0010F5CA2EC00016D5CA20106130001025C2F237FA132>87
D<EA1FE0EA3038EA780C130EEA30071200A313FFEA07C7EA1E07123C1278127000F01308
A3130FEA7817383C2390380FC1E015157E9418>97 D<EA01FEEA0703380C0780121C3838
03000078C7FC127012F0A712700078134012386C1380380C0100EA0706EA01F812157E94
16>99 D<EA01FCEA0707380C0380381C01C01238007813E0EA700012F0B5FC00F0C7FCA5
12700078132012386C13406C138038070300EA00FC13157F9416>101
D<133E13E33801C780EA0387130748C7FCA9EAFFF8A20007C7FCB1EA7FF0A2112380A20F
>I<14703803F198380E1E18EA1C0E38380700A200781380A400381300A2EA1C0EEA1E1C
EA33F00020C7FCA212301238EA3FFE381FFFC06C13E0383000F0481330481318A4006013
30A2003813E0380E03803803FE0015217F9518>I<120E12FEA2121E120EAAEB1F80EB60
C0EB80E0380F0070A2120EAE38FFE7FFA218237FA21B>I<121C123EA3121CC7FCA8120E
127EA2121E120EAFEAFFC0A20A227FA10E>I<120E12FEA2121E120EB3ABEAFFE0A20B23
7FA20E>108 D<390E1FC07F3AFE60E183809039807201C03A1F003C00E07E000E1338AE
3AFFE3FF8FFEA227157F942A>I<380E1F8038FE60C0EB80E0381F00707E120EAE38FFE7
FFA218157F941B>I<EA01FCEA0707380C0180381800C0003813E0481370A200F01378A7
00701370007813F0003813E0381C01C0380E038038070700EA01FC15157F9418>I<EA0E
1F38FE61C0EB8060380F0070000E1338143CA2141EA7143CA21438000F1370380E80E0EB
41C0EB3F0090C7FCA8EAFFE0A2171F7F941B>I<EA0E3CEAFE46138FEA1F0FEA0F061300
120EADEAFFF0A210157F9413>114 D<EA0F88EA3078EA601812C01308A212E0EAF00012
7FEA3FE0EA0FF0EA01F8EA003CEA801C130CA212C01308EAE018EAD030EA8FC00E157E94
13>I<1202A51206A3120E121EEA3FFC12FFEA0E00AA1304A6EA07081203EA01F00E1F7F
9E13>I<000E137038FE07F0A2EA1E00000E1370AC14F0A2380601783803827FEA00FC18
157F941B>I<38FF80FEA2381E0078000E1320A26C1340A2EB80C000031380A23801C100
A2EA00E2A31374A21338A3131017157F941A>I<38FF80FEA2381E0078000E1320A26C13
40A2EB80C000031380A23801C100A2EA00E2A31374A21338A31310A25BA35B12F05B12F1
0043C7FC123C171F7F941A>121 D E /Fg 21 119 df<B51280A311037F9016>45
D<B512C0A2D807F0C8FC6C5AB3AA1620A41640A416C0A21501A21503ED0780151F000714
7FB7FCA223317DB029>76 D<90387F80203901FFE0603807C078390F001CE0001E130648
130300381301007813001270156012F0A21520A37E1500127C127E7E13C0EA1FF86CB47E
6C13F06C13FCC613FF010F1380010013C0EC1FE01407EC03F01401140015F8A26C1478A5
7E15706C14F015E07E6CEB01C000ECEB038000E7EB070038C1F01E38C07FFC38800FF01D
337CB125>83 D<007FB712E0A23A7E000F800700781501007015000060166000401620A2
00C01630A2481610A6C71500B3AC4A7E010FB57EA22C317EB030>I<13FE380303C0380C
00E00010137080003C133C003E131C141EA21208C7FCA3EB0FFEEBFC1EEA03E0EA0F80EA
1F00123E123C127C481404A3143EA21278007C135E6CEB8F08390F0307F03903FC03E01E
1F7D9E21>97 D<EA078012FFA2120F1207AFEB81FC903886078090388801C090389000E0
01A0137001C07F49133C81A2151F81A21680A71600A25D151EA25D6D133801205B5D3906
1801C0D90607C7FC380401F821327EB125>I<EB1FC0EBF0303801C00C38078002EA0F00
000E130F001E5B5AA2007C1304007890C7FC12F8A91278127C123C15807E000EEB010012
0F380780023801C00C3800F030EB1FC0191F7E9E1D>I<15F0141FA214011400AFEB0FC0
EB70303801C00C3803800238070001120E001E13005AA2127C1278A212F8A71278A2127C
123CA27E000E13016C1302380380046C6C487E3A00F030FF80EB1FC021327EB125>I<EB
3F80EBE0E0380380383807003C000E7F121E001C7F123C127C00781480140712F8A2B6FC
00F8C8FCA61278127C123C15807E000EEB0100000F13027E3801C00C3800F030EB1FC019
1F7E9E1D>I<EB07E0EB1C10EB3838EB707C13E01201EBC03800031300ACB512C0A23803
C000B3A8487EEA7FFFA216327FB114>I<15F090387F03083901C1C41C380380E8390700
700848EB7800001E7FA2003E133EA6001E133CA26C5B6C13706D5A3809C1C0D8087FC7FC
0018C8FCA5121C7E380FFFF86C13FF6C1480390E000FC00018EB01E048EB00F000701470
481438A500701470A26C14E06CEB01C00007EB07003801C01C38003FE01E2F7E9F21>I<
120FEA1F80A4EA0F00C7FCABEA0780127FA2120F1207B3A6EA0FC0EAFFF8A20D307EAF12
>105 D<EA078012FFA2120F1207B3B3A7EA0FC0EAFFFCA20E327EB112>108
D<260780FEEB1FC03BFF83078060F0903A8C03C180783B0F9001E2003CD807A013E4DA00
F47F01C013F8A2495BB3A2486C486C133F3CFFFC1FFF83FFF0A2341F7E9E38>I<380780
FE39FF83078090388C03C0390F9001E0EA07A06E7E13C0A25BB3A2486C487E3AFFFC1FFF
80A2211F7E9E25>I<EB1FC0EBF0783801C01C38070007481480001EEB03C0001C130100
3C14E0A248EB00F0A300F814F8A8007814F0007C1301003C14E0A26CEB03C0A26CEB0780
3907800F003801C01C3800F078EB1FC01D1F7E9E21>I<380781FC39FF86078090388801
C0390F9000E0D807A0137001C01378497F153E151E151FA2811680A716005DA2151E153E
153C6D5B01A013705D90389803C0D9860FC7FCEB81F80180C8FCAB487EEAFFFCA2212D7E
9E25>I<380783E038FF8418EB887CEA0F90EA07A01438EBC000A35BB3487EEAFFFEA216
1F7E9E19>114 D<3801FC10380E0330381800F048137048133012E01410A37E6C130012
7EEA3FF06CB4FC6C13C0000313E038003FF0EB01F813006C133CA2141C7EA27E14186C13
38143000EC136038C301C03880FE00161F7E9E1A>I<1340A513C0A31201A21203120712
0F381FFFE0B5FC3803C000B01410A80001132013E000001340EB78C0EB1F00142C7FAB19
>I<D8FFF8EBFF80A2D80FC0EB7C006C48133815306C6C1320A26C6C5BA27F00005CA2D9
7801C7FCA2137CEB3C02A26D5AA2131F6D5AA2EB0790A214D0EB03E0A26D5AA36D5A211F
7F9E23>118 D E end
%%EndProlog
%%BeginSetup
%%Feature: *Resolution 300dpi
TeXDict begin
%%PaperSize: Letter
%%BeginPaperSize: Letter
/setpagedevice where {
pop 1 dict dup /PageSize [ 612 792 ] put setpagedevice
} {
statusdict /lettertray known {
statusdict begin lettertray end
/letter where { pop letter } if
} {
/letter where {
pop letter
} {
statusdict /setpage known {
statusdict begin
612 792 0 setpage
end
} if
} ifelse
} ifelse
} ifelse
%%EndPaperSize

%%EndSetup
%%Page: 1 1
1 0 bop 363 482 a Fg(T)-6 b(o)r(ols)21 b(for)h(mo)r(delling)e
(categorical)i(v)l(ariables)g(in)846 573 y(Lisp-Stat)804
693 y Ff(Thomas)17 b(Lumley)777 751 y(Dept.)22 b(Biostatistics)706
809 y(Univ)o(ersit)o(y)14 b(of)j(W)l(ashington)904 868
y(Seattle)814 965 y(Marc)o(h)e(30,)i(1996)262 1135 y
Fe(1)66 b(In)n(tro)r(duction)262 1226 y Fd(This)12 b(do)q(cumen)o
(tation)g(is)g(somewhat)g(disorganised)h(b)q(ecause)h(it)f(re\015ects)i
(three)f(di\013eren)o(t)262 1276 y(v)o(ersions)g(of)f(the)i(to)q(ols.)i
(They)e(ha)o(v)o(e)e(all)g(b)q(een)i(k)o(ept)f(b)q(ecause)i(they)e(ma)o
(y)e(all)h(b)q(e)h(of)f(some)262 1326 y(use.)18 b(The)c(\014rst)f(and)g
(most)f(elegan)o(t)h(is)g(an)g(ob)r(ject-orien)o(ted)h(set,)f
(including)f(metho)q(ds)h(for)262 1375 y(regression-mo)q(del-proto)k
(and)h(its)g(descendan)o(ts.)32 b(The)19 b(second)g(is)e(the)i
(functions)f(ued)262 1425 y(to)e(implemen)o(t)d(the)18
b(ob)r(ject)f(metho)q(ds.)25 b(These)18 b(w)o(ould)d(b)q(e)i(useful)g
(for)f(mo)q(dels)f(where)j(a)262 1475 y(metho)q(d)11
b(hasn't)h(y)o(et)h(b)q(een)g(written.)18 b(Finally)11
b(there)i(are)g(is)f(a)g(set)h(of)e(primitiv)o(e)g(functions)262
1525 y(for)i(constructing)i(factor)f(and)g(in)o(teraction)f(design)h
(matrices.)262 1661 y Fe(2)66 b(Ob)t(ject)22 b(orien)n(ted)h(metho)r
(ds)262 1752 y Fc(model-formula-p)o(roto)14 b Fd(is)j(a)g(protot)o(yp)q
(e)h(for)f(a)g(mo)q(del)f(form)o(ula)f(class.)29 b(T)m(o)17
b(create)i(a)262 1802 y(new)14 b(mo)q(del)e(form)o(ula)g(use)i(the)h
Fc(\(as-formula\))c Fd(function)324 1851 y Fc(\(as-formula)19
b('\(\(factor)h(a\))i(\(factor)e(b\))h(\(term)g(x\))g(\(interaction)f
(\(list)262 1901 y(a)h(b\)\))g(\(interaction)f(\(list)g(a)i(x\))f
(:is-factor)f(\(list)h(t)g(nil\)\)\)\))324 1951 y Fd(The)12
b(argumen)o(t)g Fb(m)o(ust)e Fd(b)q(e)j(quoted.)18 b(I'm)10
b(sure)j(there)h(is)e(some)f(w)o(a)o(y)h(of)f(getting)h(round)262
2001 y(this)20 b(|)f(the)i(equiv)n(alen)o(t)f(of)f Fc
(deparse\(substitute\()o(\)\))e Fd(in)j(S)g(but)h(I'm)d(not)i(a)g(go)q
(o)q(d)262 2051 y(enough)11 b(LISP)h(hac)o(k)o(er)g(to)f(kno)o(w)g
(what)g(it)h(is.)17 b(Please)12 b(tell)f(me)f(if)h(y)o(ou)g(kno)o(w)g
({)g(it)g(probably)262 2100 y(in)o(v)o(olv)o(es)h(using)i(a)g(macro)e
(rather)j(than)f(a)f(function.)324 2150 y(Note)i(that)g(the)h
Fc(:is-factor)d Fd(k)o(eyw)o(ord)i(in)g Fc(\(interaction\))d
Fd(is)j(optional)e(but)j(that)262 2200 y(the)h(default)f(is)g(to)g
(assume)g(ev)o(erything)h(is)f(a)g(factor.)26 b(If)16
b(one)h(of)f(the)h(v)n(ariables)e(is)i(con-)262 2250
y(tin)o(uous)f(and)h(y)o(ou)f(forget)h Fc(:is-factor)e
Fd(the)i(results)h(will)d(b)q(e)j(ob)o(viously)d(wrong)i(\(ev)o(en)262
2300 y(if)g(y)o(ou)g(don't)h(run)h(out)f(of)f(stac)o(k)i(space\).)32
b(This)18 b(is)g(the)g(b)q(est)i(I)e(can)g(do)g(with)g(a)g(func-)262
2350 y(tion)13 b(that)h(accepts)h(lists)f(of)f(n)o(um)o(b)q(ers)h(as)g
(input.)k(The)c(Righ)o(t)f(Thing)g(to)h(do)g(is)f(probably)262
2399 y(what)i(S)g(do)q(es:)22 b(force)16 b(the)f(user)i(to)e
(predeclare)i(factor)e(v)n(ariables)g(as)g(ob)r(jects)i(and)e(treat)262
2449 y(ev)o(erything)i(else)i(as)e(a)g(metric)g(v)n(ariable.)28
b(This)17 b(is)h(not)f(to)q(o)g(di\016cult)g(and)g(I)h(ma)o(y)d(w)o
(ell)967 2574 y(1)p eop
%%Page: 2 2
2 1 bop 262 307 a Fd(do)13 b(a)g(revised)i(v)o(ersion)f(that)f(mak)o
(es)g(ev)o(erything)h(completely)e(ob)r(ject)j(orien)o(ted.)j(See)d
(the)262 357 y(Individual)e(functions)i(section)h(for)e(more)g(do)q
(cumen)o(tation)g(|)g Fc(as-formula)f Fd(is)i(just)g(an)262
407 y(ob)r(ject)f(v)o(ersion)g(of)g Fc(\(formula\))324
457 y Fd(The)g(form)o(ula)d(ob)r(ject)k(resp)q(onds)h(to)d(messages)262
546 y Fc(:formula)262 596 y Fd(:design-matrix)262 645
y(:name-list)262 695 y(:blo)q(c)o(k-names)262 745 y(:blo)q(c)o
(k-indices)324 884 y(The)j(\014rst)g(sets)h(or)e(returns)i(the)f(form)o
(ula)d(\(the)j(argumen)o(t)e(to)i Fc(\(as-formula\))p
Fd(\))d(and)262 934 y(recomputes)g(if)e(necessary)m(.)19
b(The)13 b(other)g(four)g(return)g(the)g(appropriate)g(things:)k(a)12
b(design)262 984 y(matrix,)d(a)i(list)g(of)f(column)g(lab)q(els)h(for)g
(it,)g(a)g(list)f(of)h(names)f(for)h(eac)o(h)h(blo)q(c)o(k)f(of)g
(columns)f(\(ie)262 1033 y(eac)o(h)i(factor,)f(in)o(teraction)h(or)g
(metric)f(v)n(ariable\),)f(and)i(a)f(list)g(of)g(lists)h(of)f(column)f
(n)o(um)o(b)q(ers)262 1083 y(for)j(eac)o(h)h(blo)q(c)o(k.)324
1133 y(There)19 b(is)g(a)f(function)g Fc(\(regression-form)o(ula\))d
Fd(whic)o(h)j(is)h(exactly)f(the)h(same)f(as)262 1183
y Fc(\(regression-mod)o(el\))8 b Fd(except)13 b(that)f(it)f(tak)o(es)h
(a)g(mo)q(del-form)n(ula)o(-proto)d(ob)r(ject)j(instead)262
1233 y(of)j(the)h(x)g(argumen)o(t.)23 b(It)16 b(then)h(stores)g(the)g
(form)o(ula)c(in)j(a)f(new)i(slot)e(in)h(the)h(regression-)262
1282 y(mo)q(del)11 b(ob)r(ject)i(and)f(optionally)f(in)o(v)o(ok)o(es)h
(a)g(new)h(metho)q(d)f(:displa)o(y-with-form)n(ul)o(a)e(whic)o(h)262
1332 y(giv)o(es)18 b(W)m(ald)g(tests)j(for)e(the)g(v)n(arious)g
(factors,)h(in)o(teractions)g(and)f(other)g(terms)g(in)g(the)262
1382 y(mo)q(del.)26 b(The)18 b(metho)q(d)f(:displa)o(y-with-form)n(ula)
d(will)i(w)o(ork)h(on)g Fc(glim-proto)p Fd(s)e(as)j(w)o(ell,)262
1432 y(but)12 b(a)g(new)g(set)h(of)e(constructor)j(functions)e(similar)
e(to)i Fc(\(regression-for)o(mula\))c Fd(w)o(ould)262
1482 y(b)q(e)14 b(needed)h(or)e(else)h(the)g Fc(:isnew)e
Fd(metho)q(d)h(w)o(ould)g(need)h(to)f(b)q(e)h(c)o(hanged.)19
b(Changing)12 b(the)262 1532 y Fc(:isnew)k Fd(metho)q(d)i(is)g(the)g
(most)f(elegan)o(t)h(solution;)h(I)f(ha)o(v)o(en't)g(done)h(it)e(b)q
(ecause)j(I)e(am)262 1581 y(reluctan)o(t)c(to)g(o)o(v)o(erride)g
(built-in)f(co)q(de)h(at)g(this)g(stage.)324 1631 y(My)f(Generalised)g
(Estimating)f(Equations)g(protot)o(yp)q(e)i(deals)f(with)g(mo)q(del)f
(form)o(ulae)262 1681 y(fairly)e(transparen)o(tly:)17
b(it)12 b(will)e(accept)j(a)f(form)o(ula)d(ob)r(ject,)k(a)e(design)h
(matrix,)e(a)h(sequence)262 1731 y(or)i(a)h(list)f(of)h(sequences)i(to)
e(sp)q(ecify)g(the)h(predictors.)324 1781 y(Example:)262
1862 y Fc(>)21 b(\(def)g(a)h(\(repeat)e(\(iseq)h(1)g(2\))h(30\)\))262
1912 y(A)262 1962 y(>)262 2011 y(\(def)e(b)i(\(repeat)e(\(iseq)h(1)h
(3\))f(20\)\))262 2061 y(B)262 2111 y(>\(def)f(x)i(\(normal-rand)d
(60\)\))262 2161 y(X)262 2211 y(>)i(\(def)g(y)h(\(+)f(x)h(a)f
(\(normal-rand)f(60\)\)\))262 2260 y(Y)262 2350 y(>)h(\(def)g(formula1)
f(\(as-formula)g('\(\(term)g(x\))h(\(factor)g(a\))g(\(factor)g(b\))283
2399 y(\(interaction)f(\(list)g(a)i(b\)\)\)\)\))262 2449
y(FORMULA1)967 2574 y Fd(2)p eop
%%Page: 3 3
3 2 bop 262 307 a Fc(>)21 b(\(send)g(formula1)f(:name-list\))g(\(send)g
(formula1)g(:name-list\))262 357 y(\("\(\(A)g(2\))i(\(B)f(2\)\)")g
("\(\(A)g(2\))g(\(B)h(3\)\)")f("\(B)g(2\)")g("\(B)g(3\)")g("\(A)h(2\)")
f("X"\))262 407 y(>)g(\(send)g(formula1)f(:block-names\))262
457 y(\("\(INTERACTION)e(A)k(B\)")f("B")g("A")h("X"\))262
506 y(>)f(\(send)g(formula1)f(:block-indices\))262 556
y(\(\(1)h(0\))g(\(3)g(2\))h(\(4\))f(\(5\)\))262 648 y(>)g
(\(regression-model)d(\(send)j(formula1)f(:design-matrix\))f(y)j
(:response-name)c("Why?")262 697 y(:predictor-name)o(s)h(\(send)i
(formula1)f(:name-list\)\))262 797 y(Least)g(Squares)h(Estimates:)262
897 y(Constant)390 b(0.867491)129 b(\(0.308863\))262
946 y(\(\(A)21 b(2\))g(\(B)g(2\)\))261 b(-0.481680)129
b(\(0.621703\))262 996 y(\(\(A)21 b(2\))g(\(B)g(3\)\))261
b(-0.666604)129 b(\(0.624665\))262 1046 y(\(B)21 b(2\))457
b(0.782557)129 b(\(0.441825\))262 1096 y(\(B)21 b(3\))457
b(0.538866)129 b(\(0.444595\))262 1146 y(\(A)21 b(2\))479
b(1.16702)129 b(\(0.437606\))262 1196 y(X)566 b(1.30912)129
b(\(0.155051\))262 1295 y(R)21 b(Squared:)347 b(0.634662)262
1345 y(Sigma)20 b(hat:)348 b(0.976272)262 1395 y(Number)20
b(of)h(cases:)348 b(60)262 1445 y(Degrees)20 b(of)h(freedom:)282
b(53)262 1544 y(#<Object:)19 b(1674520,)i(prototype)f(=)h
(REGRESSION-MODEL-P)o(ROTO>)262 1636 y(>)g(\(def)g(modela)g
(\(regression-form)o(ula)d(formula1)j(y)g(:response-name)e("Why?"\)\))
262 1685 y(Block)325 b(Wald)21 b(Chisq)108 b(p-value)262
1735 y(X)479 b(71.287)129 b(0.0000)262 1785 y(A)479 b(7.1119)129
b(0.0077)262 1835 y(B)479 b(3.3431)129 b(0.1880)262 1885
y(\(INTERACTION)19 b(A)i(B\))131 b(1.2326)e(0.5399)262
1934 y(MODELA)262 1984 y(>)43 b(\(send)21 b(modela)f(:display\))262
2084 y(Least)g(Squares)h(Estimates:)262 2183 y(Constant)390
b(0.867491)129 b(\(0.308863\))262 2233 y(\(\(A)21 b(2\))g(\(B)g(2\)\))
261 b(-0.481680)129 b(\(0.621703\))262 2283 y(\(\(A)21
b(2\))g(\(B)g(3\)\))261 b(-0.666604)129 b(\(0.624665\))262
2333 y(\(B)21 b(2\))457 b(0.782557)129 b(\(0.441825\))262
2383 y(\(B)21 b(3\))457 b(0.538866)129 b(\(0.444595\))262
2433 y(\(A)21 b(2\))479 b(1.16702)129 b(\(0.437606\))967
2574 y Fd(3)p eop
%%Page: 4 4
4 3 bop 262 307 a Fc(X)566 b(1.30912)129 b(\(0.155051\))262
407 y(R)21 b(Squared:)347 b(0.634662)262 457 y(Sigma)20
b(hat:)348 b(0.976272)262 506 y(Number)20 b(of)h(cases:)348
b(60)262 556 y(Degrees)20 b(of)h(freedom:)282 b(53)262
656 y(NIL)262 747 y(>)21 b(\(send)g(modela)f(:display-with-formu)o
(la\))262 797 y(Block)325 b(Wald)21 b(Chisq)108 b(p-value)262
847 y(X)479 b(71.287)129 b(0.0000)262 897 y(A)479 b(7.1119)129
b(0.0077)262 946 y(B)479 b(3.3431)129 b(0.1880)262 996
y(\(INTERACTION)19 b(A)i(B\))131 b(1.2326)e(0.5399)262
1046 y(NIL)262 1096 y(>)21 b(\(send)g(modela)f(:display-with-formu)o
(la)f(nil\))262 1146 y(Block)325 b(Wald)21 b(Chisq)108
b(p-value)262 1196 y(X)479 b(71.287)129 b(0.0000)392
1245 y(Variable)260 b(Estimate)151 b(Std.Err.)g(p-value)370
1295 y(X)480 b(1.3091)129 b(\(0.155051\))107 b(0.0000)262
1345 y(A)479 b(7.1119)129 b(0.0077)392 1395 y(Variable)260
b(Estimate)151 b(Std.Err.)g(p-value)370 1445 y(\(A)22
b(2\))392 b(1.1670)129 b(\(0.437606\))107 b(0.0077)262
1494 y(B)479 b(3.3431)129 b(0.1880)392 1544 y(Variable)260
b(Estimate)151 b(Std.Err.)g(p-value)370 1594 y(\(B)22
b(3\))370 b(0.53887)129 b(\(0.444595\))107 b(0.2255)370
1644 y(\(B)22 b(2\))370 b(0.78256)129 b(\(0.441825\))107
b(0.0765)262 1694 y(\(INTERACTION)19 b(A)i(B\))131 b(1.2326)e(0.5399)
392 1743 y(Variable)260 b(Estimate)151 b(Std.Err.)g(p-value)370
1793 y(\(\(A)22 b(2\))f(\(B)g(3\)\))174 b(-0.66660)129
b(\(0.624665\))107 b(0.2859)370 1843 y(\(\(A)22 b(2\))f(\(B)g(2\)\))174
b(-0.48168)129 b(\(0.621703\))107 b(0.4385)262 1893 y(NIL)262
2030 y Fe(3)66 b(Individu)q(al)26 b(functions)262 2121
y Fd(The)13 b Fc(\(formula\))e Fd(function)i(tak)o(es)h(a)f(quoted)g
(list)g(describing)h(a)f(mo)q(del)e(as)j(its)f(argumen)o(t)262
2171 y(and)c(returns)h Fc(\(design-matrix)19 b(names)i(block-names)f
(block-indices\))6 b Fd(where)k Fc(design-matrix)262
2221 y Fd(is)15 b(a)h(design)f(matrix,)f Fc(names)h Fd(is)h(a)f(list)g
(of)g(names)g(for)h(its)f(columns,)g Fc(block-names)e
Fd(is)j(a)262 2271 y(list)g(of)g(names)g(for)g(m)o(ulticolum)o(n)e(mo)q
(del)h(terms)i(suc)o(h)g(as)g(categorical)g(predictors)h(and)262
2320 y Fc(block-indices)f Fd(is)j(a)f(list)h(of)f(lists)h(of)g(in)o
(tegers)g(describing)h(whic)o(h)f(columns)f(of)g(the)262
2370 y(design)14 b(matrix)e(comprise)h(whic)o(h)h(blo)q(c)o(ks.)324
2420 y(The)g(canonical)f(form)f(for)i(input)g(is)f(lik)o(e)h(this)967
2574 y(4)p eop
%%Page: 5 5
5 4 bop 324 307 a Fc(\(formula)20 b('\(\(factor)g(a\))h(\(factor)g(b\))
g(\(term)g(x\))g(\(interaction)e(\(list)i(a)h(b\)\))262
357 y(\(interaction)d(\(list)i(a)g(x\))h(:is-factor)d(\(list)i(t)h
(nil\)\)\)\))324 407 y Fd(The)17 b(function)g(extracts)i(names)d(from)g
(the)i(quoted)f(list)g(so)g(if)g(y)o(ou)f(try)i(something)262
457 y(clev)o(er)10 b(to)f(sa)o(v)o(e)g(t)o(yping)g(lik)o(e)f(storing)h
Fc(\(interaction)20 b(\(list)g(a)i(x\))f(:is-factor)f(\(list)262
506 y(t)h(nil\)\))13 b Fd(in)g(a)h(v)n(ariable)f(y)o(ou)g(ma)o(y)f(get)
i(silly)f(results.)19 b(Don't)13 b(do)h(that,)f(then.)324
556 y(Y)m(ou)k(can)g(c)o(hange)h(the)g(default)g(v)n(ariable)e(names)h
(\(though)g(not)h(the)g(default)f(blo)q(c)o(k)262 606
y(names\))11 b(using)h(the)g(relev)n(an)o(t)g(k)o(eyw)o(ord)g(argumen)o
(ts)g(in)f Fc(factor)g Fd(and)h Fc(interaction)p Fd(.)j(See)262
656 y(the)g(do)q(cumen)o(tation)e(for)h(the)h(functions)f(\(b)q(elo)o
(w\))h(and)f(the)h(example)e(to)i(\014nd)f(out)g(ho)o(w.)262
706 y(Y)m(ou)e(need)h(to)g(sp)q(ecify)g(the)g(new)g(name)e(ev)o
(erywhere)k(in)d(order)h(to)g(mak)o(e)e(the)i(lab)q(els)f(come)262
756 y(out)f(consisten)o(t.)18 b(It's)12 b(probably)f(easier)h(to)f(use)
i(the)f(righ)o(t)f(v)n(ariable)f(name)h(to)g(b)q(egin)g(with.)324
805 y(Note)k(that)g(the)h Fc(:is-factor)d Fd(k)o(eyw)o(ord)i(in)g
Fc(\(interaction\))d Fd(is)j(optional)e(but)j(that)262
855 y(the)h(default)f(is)g(to)g(assume)g(ev)o(erything)h(is)f(a)g
(factor.)26 b(If)16 b(one)h(of)f(the)h(v)n(ariables)e(is)i(con-)262
905 y(tin)o(uous)c(and)g(y)o(ou)g(forget)g Fc(:is-factor)f
Fd(the)i(results)g(will)e(b)q(e)i(ob)o(viously)e(wrong)h(\(ev)o(en)h
(if)262 955 y(y)o(ou)d(don't)h(run)g(out)g(of)g(stac)o(k)g(space\).)19
b(This)12 b(is)g(the)h(b)q(est)g(I)f(can)g(do)g(with)g(a)g(function)g
(that)262 1005 y(accepts)j(lists)f(of)f(n)o(um)o(b)q(ers)h(as)g(input.)
324 1054 y Fc(\(formula-display)o(\))9 b Fd(tak)o(es)j(a)f(v)o(ector)i
(of)e(co)q(e\016cien)o(t)h(estimates,)g(a)f(co)o(v)n(ariance)g(ma-)262
1104 y(trix)h(and)g(the)h(output)g(of)f Fc(\(formula\))f
Fd(and)h(displa)o(ys)g(the)h(W)m(ald)e(c)o(hisquare)i(test)h(for)e(eac)
o(h)262 1154 y(blo)q(c)o(k)h(\(factor,)h(term)g(or)g(in)o(teraction\),)
g(with)g(or)h(without)e(the)i(separate)h(estimates)e(and)262
1204 y(p-v)n(alues)f(for)h(eac)o(h)g(v)n(ariable.)324
1254 y Fc(\(formula-display)k(beta)j(cov-mat)g(model-formula)e(&key)i
(\(block-only)e(t\))262 1303 y(\(intercept)g(t\)\))f(beta)g
Fd(is)h(the)g(co)q(e\016cien)o(t)g(estimates,)h Fc(cov-mat)d
Fd(is)h(the)i(co)o(v)n(ariance)262 1353 y(matrix,)d Fc(model-formula)e
Fd(is)k(the)g(output)f(of)g(the)h(original)d(form)o(ula)g(command.)29
b(Set)262 1403 y Fc(block-only)14 b Fd(to)j Fc(nil)f
Fd(to)h(get)g(tests)h(for)f(eac)o(h)g(separate)h(v)n(ariable.)26
b(If)16 b(the)i(mo)q(del)d(do)q(es)262 1453 y(not)e(ha)o(v)o(e)h(an)g
(in)o(tercept)i(set)f Fc(intercept)d Fd(to)i Fc(nil)p
Fd(.)j(It)d(is)g(ob)o(viously)f(b)q(etter)j(to)e(ha)o(v)o(e)g(this)262
1503 y(installed)f(as)h(a)f(metho)q(d)g(for)h(y)o(our)g(regression)h
(ob)r(jects.)262 1594 y Fc(Example:)262 1644 y(>)21 b(\(def)g(a)h
(\(repeat)e(\(iseq)h(1)g(2\))h(30\)\))262 1694 y(A)262
1743 y(>)262 1793 y(\(def)e(b)i(\(repeat)e(\(iseq)h(1)h(3\))f(20\)\))
262 1843 y(B)262 1893 y(>\(def)f(x)i(\(normal-rand)d(60\)\))262
1943 y(X)262 1993 y(>)i(\(def)g(y)h(\(+)f(x)h(a)f(\(normal-rand)f
(60\)\)\))262 2042 y(Y)262 2092 y(>)h(\(def)g(result)g(\(formula)f
('\(\(term)g(x\))h(\(factor)g(a\))g(\(factor)g(b\))283
2142 y(\(interaction)f(\(list)g(a)i(b\)\)\)\)\))262 2192
y(RESULT)262 2283 y(>)43 b(\(def)21 b(model1)f(\(regression-model)f
(\(first)h(result\))h(y)g(:predictor-names)262 2333 y(\(second)f
(result\)\)\))262 2433 y(Least)g(Squares)h(Estimates:)967
2574 y Fd(5)p eop
%%Page: 6 6
6 5 bop 262 357 a Fc(Constant)390 b(0.867491)129 b(\(0.308863\))262
407 y(\(\(A)21 b(2\))g(\(B)g(2\)\))261 b(-0.481680)129
b(\(0.621703\))262 457 y(\(\(A)21 b(2\))g(\(B)g(3\)\))261
b(-0.666604)129 b(\(0.624665\))262 506 y(\(B)21 b(2\))457
b(0.782557)129 b(\(0.441825\))262 556 y(\(B)21 b(3\))457
b(0.538866)129 b(\(0.444595\))262 606 y(\(A)21 b(2\))479
b(1.16702)129 b(\(0.437606\))262 656 y(X)566 b(1.30912)129
b(\(0.155051\))262 756 y(R)21 b(Squared:)347 b(0.634662)262
805 y(Sigma)20 b(hat:)348 b(0.976272)262 855 y(Number)20
b(of)h(cases:)348 b(60)262 905 y(Degrees)20 b(of)h(freedom:)282
b(53)262 1054 y(MODEL1)262 1146 y(>)43 b(\(def)21 b(model1.cov)f(\(*)h
(\(^)g(\(send)g(model1)g(:sigma-hat\))e(2\))j(\(send)e(model1)h
(:xtxinv\)\)\))262 1196 y(MODEL1.COV)262 1245 y(>)g(\(formula-display)e
(\(send)h(model1)h(:coef-estimates\))d(model1.cov)i(result)283
1295 y(:block-only)g(nil\))262 1345 y(Block)325 b(Wald)21
b(Chisq)108 b(p-value)262 1395 y(X)479 b(71.287)129 b(0.0000)392
1445 y(Variable)260 b(Estimate)151 b(Std.Err.)g(p-value)370
1494 y(X)480 b(1.3091)129 b(\(0.155051\))107 b(0.0000)262
1544 y(A)479 b(7.1119)129 b(0.0077)392 1594 y(Variable)260
b(Estimate)151 b(Std.Err.)g(p-value)370 1644 y(\(A)22
b(2\))392 b(1.1670)129 b(\(0.437606\))107 b(0.0077)262
1694 y(B)479 b(3.3431)129 b(0.1880)392 1743 y(Variable)260
b(Estimate)151 b(Std.Err.)g(p-value)370 1793 y(\(B)22
b(3\))370 b(0.53887)129 b(\(0.444595\))107 b(0.2255)370
1843 y(\(B)22 b(2\))370 b(0.78256)129 b(\(0.441825\))107
b(0.0765)262 1893 y(\(INTERACTION)19 b(A)i(B\))131 b(1.2326)e(0.5399)
392 1943 y(Variable)260 b(Estimate)151 b(Std.Err.)g(p-value)370
1993 y(\(\(A)22 b(2\))f(\(B)g(3\)\))174 b(-0.66660)129
b(\(0.624665\))107 b(0.2859)370 2042 y(\(\(A)22 b(2\))f(\(B)g(2\)\))174
b(-0.48168)129 b(\(0.621703\))107 b(0.4385)262 2142 y(>)21
b(\(formula-display)e(\(send)h(model1)h(:coef-estimates\))d(model1.cov)
i(result\))262 2242 y(Block)325 b(Wald)21 b(Chisq)108
b(p-value)262 2291 y(X)479 b(71.287)129 b(0.0000)262
2341 y(A)479 b(7.1119)129 b(0.0077)262 2391 y(B)479 b(3.3431)129
b(0.1880)262 2441 y(\(INTERACTION)19 b(A)i(B\))131 b(1.2326)e(0.5399)
967 2574 y Fd(6)p eop
%%Page: 7 7
7 6 bop 262 307 a Fc(NIL)324 397 y Fd(No)o(w)13 b(w)o(e)h(reco)q(de)i
(the)e(predictors)i(and)d(relab)q(el.)262 487 y Fc(>)43
b(\(def)21 b(a)g(\(repeat)g(\(list)g("Male")f("Female"\))g(30\)\))262
537 y(A)262 587 y(>)43 b(\(def)21 b(b)g(\(repeat)g(\(list)g("Never")f
("Past")g("Current"\))g(20\)\))262 637 y(B)262 687 y(>)h(\(def)g
(result1)f(\(formula)h('\(\(term)f(x)h(:namebase)f("Age"\))h(\(factor)f
(a)i(:namebase)e("Sex"\))262 736 y(\(factor)g(b)h(:namebase)f
("Smoking"\))g(\(interaction)f(\(list)i(a)h(b\))262 786
y(:namebases)d(\(list)i("Sex")g("Smoking"\)\)\)\)\))262
836 y(RESULT1)262 886 y(>)g(\(formula-display)e(\(send)h(model1)h
(:coef-estimates\))d(model1.cov)i(result1\))262 985 y(Block)325
b(Wald)21 b(Chisq)108 b(p-value)262 1035 y(Age)435 b(71.287)129
b(0.0000)262 1085 y(Sex)435 b(7.1119)129 b(0.0077)262
1135 y(Smoking)347 b(3.3431)129 b(0.1880)262 1185 y(\(INTERACTION)19
b(Sex)i(Smoking\))86 b(1.2326)107 b(0.5399)262 1234 y(NIL)262
1325 y(>)21 b(\(formula-display)e(\(send)h(model1)h(:coef-estimates\))d
(model1.cov)i(result1)262 1374 y(:block-only)f(nil\))262
1424 y(Block)325 b(Wald)21 b(Chisq)108 b(p-value)262
1474 y(Age)435 b(71.287)129 b(0.0000)392 1524 y(Variable)260
b(Estimate)151 b(Std.Err.)g(p-value)370 1574 y(Age)436
b(1.3091)129 b(\(0.155051\))107 b(0.0000)262 1623 y(Sex)435
b(7.1119)129 b(0.0077)392 1673 y(Variable)260 b(Estimate)151
b(Std.Err.)g(p-value)370 1723 y(\(Sex)21 b(Male\))283
b(1.1670)129 b(\(0.437606\))107 b(0.0077)262 1773 y(Smoking)347
b(3.3431)129 b(0.1880)392 1823 y(Variable)260 b(Estimate)151
b(Std.Err.)g(p-value)370 1872 y(\(Smoking)21 b(Past\))173
b(0.53887)129 b(\(0.444595\))107 b(0.2255)370 1922 y(\(Smoking)21
b(Never\))151 b(0.78256)129 b(\(0.441825\))107 b(0.0765)262
1972 y(\(INTERACTION)19 b(Sex)i(Smoking\))86 b(1.2326)107
b(0.5399)392 2022 y(Variable)260 b(Estimate)151 b(Std.Err.)g(p-value)
370 2072 y(\(\(Sex)21 b(Male\))g(\(Smoking)f(Past\)\))42
b(-0.66660)108 b(\(0.624665\))20 b(0.2859)370 2122 y(\(\(Sex)h(Male\))g
(\(Smoking)f(Never\)\))42 b(-0.48168)108 b(\(0.621703\))19
b(0.4385)262 2171 y(NIL)262 2308 y Fe(4)66 b(Primitiv)o(e)25
b(functions)e(used)f(b)n(y)h(these)f(metho)r(ds)262 2399
y Fd(These)17 b(functions)e(pro)o(vide)h(a)f(basic)h(lev)o(el)f(of)h
(supp)q(ort)g(for)g(categorical)f(predictor)i(v)n(ari-)262
2449 y(ables)f(to)f(b)q(e)i(used)g(in)e(the)i(Lisp-Stat)e(regression)j
(functions.)24 b(Y)m(ou)15 b(can)h(use)h(just)f(these)967
2574 y(7)p eop
%%Page: 8 8
8 7 bop 262 307 a Fd(to)15 b(get)i(more)e(con)o(trol)g(o)o(v)o(er)i
(the)f(pro)q(cess.)26 b(After)17 b(writing)e(all)g(the)i(form)o(ula)c
(metho)q(ds)j(I)262 357 y(found)g(out)i(that)f(there)i(w)o(ere)f
(already)f(primitiv)o(e)e(functions)j(lik)o(e)e(this)i(pro)o(vided)f
(with)262 407 y Fc(glim-proto)p Fd(.)324 457 y(There)10
b(are)g(three)g(main)e(functions:)15 b Fc(\(factor\))p
Fd(,)8 b Fc(\(interaction\))p Fd(,)f(and)j Fc(\(block-test\))p
Fd(.)262 506 y(The)i(\014rst)h(constructs)i(a)d(set)h(of)f(treatmen)o
(t)g(con)o(trasts)i({)e(indicator)g(v)n(ariables)f(for)h(all)f(but)262
556 y(the)17 b(\014rst)h(lev)o(el)e(of)g(the)i(factor)f({)f(and)h
(optionally)e(a)h(set)i(of)e(appropriate)h(names.)26
b(The)262 606 y(second)21 b(tak)o(es)f(a)g(list)f(of)g(v)n(ariables)h
(and)f(constructs)j(a)e(matrix)e(of)h(v)n(ariables)g(for)h(the)262
656 y(in)o(teraction)e(terms.)33 b(It)19 b(allo)o(ws)e(b)q(oth)i(con)o
(tin)o(uous)g(and)g(factor)f(v)n(ariables.)32 b(Only)19
b(the)262 706 y(highest)d(order)g(in)o(teraction)g(terms)f(are)h
(included,)g(so)g(to)f(get)h(a)g(matrix)d(for)j(the)g(mo)q(del)262
756 y Fa(A)9 b Fd(+)h Fa(B)i Fd(+)e Fa(A)j Fd(:)f Fa(B)17
b Fd(y)o(ou)d(w)o(ould)g(need)i(to)e(call)g Fc(\(factor\))e
Fd(on)j(eac)o(h)g(of)f(A)g(and)h(B)g(and)f(then)262 805
y Fc(\(interaction\))c Fd(on)j(A)h(and)f(B)h(together.)19
b(This)13 b(b)q(eha)o(viour)g(is)h(useful)f(for)g(t)o(w)o(o)g(reasons:)
262 855 y(it)18 b(mak)o(es)g(it)g(m)o(uc)o(h)f(easier)j(to)f(implem)o
(en)o(t)e(a)h(mo)q(del)f(form)o(ula)f(system)j(and)g(it)f(allo)o(ws)262
905 y(non-hierarc)o(hical)12 b(mo)q(dels)g(on)h(the)g(o)q(ccasions)h
(when)f(they)h(are)f(appropriate.)18 b(The)c(third)262
955 y(function)h(calculates)g(and)g(displa)o(ys)g(the)h(W)m(ald)e(test)
i(for)f(a)g(blo)q(c)o(k)g(of)g(v)n(ariables)f(all)g(ha)o(v-)262
1005 y(ing)d(zero)j(co)q(e\016cien)o(t)g(and)e(the)h(individual)e(co)q
(e\016cien)o(t)i(estimates,)g(standard)g(errors)h(and)262
1054 y(W)m(ald)e(p-v)n(alues.)324 1104 y(There)j(are)g(also)e(t)o(w)o
(o)h(functions)g Fc(\(design\))e Fd(and)i Fc(\(names\))f
Fd(that)h(return)i(the)e(design)262 1154 y(matrix)g(or)i(list)g(of)f
(names)h(from)e(a)i(list)g(of)f(terms)h(of)g(the)h(sort)f(returned)i(b)
o(y)e Fc(\(factor\))262 1204 y Fd(and)d Fc(\(interaction\))p
Fd(.)324 1254 y Fc(\(factor)20 b(x)i(&key)f(namebase\))p
Fd(.)324 1303 y Fc(x)14 b Fd(is)h(a)f(sequence)j(and)d
Fc(namebase)f Fd(is)i(either)g(a)g(string)g(or)f(a)h(sym)o(b)q(ol.)j
(Returns)e(a)e(list)262 1353 y(con)o(taining)c(the)h(design)h(matrix)d
(of)i(treatmen)o(t)f(con)o(trasts)j(and)e(a)g(list)f(of)h(v)n(ariable)f
(names.)262 1403 y(If)15 b(namebase)h(is)g Fc(nil)g Fd(returns)h(only)f
(the)h(design)f(matrix)e(\()p Fb(not)i Fd(a)g(list)f(con)o(taining)g
(only)262 1453 y(the)f(design)g(matrix\))262 1544 y Fc(>\(factor)20
b(\(list)g(2)i(3)g(4)f(2)h(3)f(4\))h(:namebase)e("A"\))262
1594 y(\(#2A\(\(0)g(0\))h(\(1)h(0\))f(\(0)g(1\))h(\(0)f(0\))h(\(1)f
(0\))g(\(0)h(1\)\))f(\("\(A)g(3\)")g("\(A)g(4\)"\)\))262
1694 y(>\(factor)f(\(list)g(2)i(3)g(4)f(2)h(3)f(4\))h(:namebase)e('A\))
262 1743 y(\(#2A\(\(0)g(0\))h(\(1)h(0\))f(\(0)g(1\))h(\(0)f(0\))h(\(1)f
(0\))g(\(0)h(1\)\))f(\("\(A)g(3\)")g("\(A)g(4\)"\)\))262
1843 y(>)g(\(factor)f(\(list)h(2)h(3)f(4)h(2)g(3)f(4\))h(\))262
1893 y(#2A\(\(0)e(0\))h(\(1)h(0\))f(\(0)h(1\))f(\(0)g(0\))h(\(1)f(0\))g
(\(0)h(1\)\))324 1984 y(\(interaction)d(\(xs)i(&key)g(\(is-factor)f
(\(repeat)g(t)i(\(length)e(xs\)\)\))h(\(namebases)262
2034 y(\(repeat)f(nil)h(\(length)f(xs\)\)\))h(\))324
2084 y(xs)14 b Fd(is)h(a)g(list)g(of)f(sequences,)j Fc(is-factor)c
Fd(is)i(a)g(list)g(of)f Fc(t)h Fd(and)g Fc(nil)f Fd(v)n(alues)h
(indicating)262 2134 y(whether)i(the)h(resp)q(ectiv)o(e)g(v)n(ariable)e
(should)g(b)q(e)h(treated)h(as)f(a)f(factor,)h Fc(namebases)d
Fd(is)j(a)262 2183 y(list)g(of)g(strings)h(or)g(sym)o(b)q(ols.)29
b(Returns)18 b(a)g(design)g(matrix)e(\(if)h Fc(namebases)f
Fd(or)i Fc(\(first)262 2233 y(namebases\))11 b Fd(is)j
Fc(nil)p Fd(\))f(or)h(a)g(list)f(con)o(taining)g(a)h(design)g(matrix)e
(and)h(a)h(list)f(of)h(names.)262 2325 y Fc(>)21 b(\(def)g(a)h(\(list)e
(1)i(2)g(1)f(2)h(1)f(2\)\))262 2374 y(A)262 2424 y(>)g(\(def)g(b)h
(\(list)e(5)i(6)g(7)f(5)h(6)f(7\)\))967 2574 y Fd(8)p
eop
%%Page: 9 9
9 8 bop 262 307 a Fc(B)262 357 y(>)21 b(\(def)g(c)h(\(list)e(0.1)i(0.2)
f(0.3)g(0.4)g(0.5)g(0.6\)\))262 407 y(C)262 457 y(>)g(\(interaction)e
(\(list)i(a)h(b\))f(:is-factor)f(\(list)h(t)g(t\))h(:namebases)d
(\(list)i("A")g('B\)\))262 506 y(\(#2A\(\(0)f(0\))h(\(1)h(0\))f(\(0)g
(0\))h(\(0)f(0\))h(\(0)f(0\))g(\(0)h(1\)\))f(\("\(\(A)g(2\))g(\(B)g
(6\)\)")g("\(\(A)g(2\))h(\(B)f(7\)\)"\)\))262 556 y(>)g(\(interaction)e
(\(list)i(a)h(c\))f(:is-factor)f(\(list)h(t)g(nil\))g(:namebases)f
(\(list)h("A")g("C"\)\))262 606 y(\(#2A\(\(0.0\))e(\(0.2\))i(\(0.0\))g
(\(0.4\))g(\(0.0\))f(\(0.6\)\))h(\("\(\(A)g(2\))g(C\)"\)\))262
656 y(>)g(\(interaction)e(\(list)i(a)h(b)f(c\))h(:is-factor)d(\(list)i
(t)h(t)43 b(nil\))262 706 y(:namebases)19 b(\(list)i("A")g("B")g
("C"\)\))262 756 y(\(#2A\(\(0.0)e(0.0\))i(\(0.2)g(0.0\))g(\(0.0)g
(0.0\))g(\(0.0)g(0.0\))g(\(0.0)g(0.0\))g(\(0.0)g(0.6\)\))283
805 y(\("\(\(\(A)g(2\))g(\(B)h(6\)\))f(C\)")g("\(\(\(A)g(2\))g(\(B)g
(7\)\))h(C\)"\)\))262 855 y(>)43 b(\(interaction)19 b(\(list)i(a)h(b)f
(c\))h(:is-factor)d(\(list)i(t)h(t)43 b(nil\))21 b(\))262
905 y(#2A\(\(0.0)f(0.0\))h(\(0.2)g(0.0\))g(\(0.0)g(0.0\))f(\(0.0)h
(0.0\))g(\(0.0)g(0.0\))g(\(0.0)g(0.6\)\))324 996 y(\(block-test)e
(\(index)i(beta)g(covmat)f(&key)h(blockname)f(names)h(\(block-only)262
1046 y(nil\)\))324 1096 y(index)9 b Fd(is)h(a)f(sequence)k(of)c(in)o
(tegers)i(indicating)e(whic)o(h)h(comp)q(onen)o(ts)g(of)f(the)i(co)q
(e\016cien)o(t)262 1146 y(v)o(ector)k(are)g(in)f(the)h(blo)q(c)o(k,)f
Fc(beta)f Fd(is)i(the)g(co)q(e\016cien)o(t)g(v)o(ector,)g
Fc(covmat)e Fd(is)i(the)g(co)o(v)n(ariance)262 1196 y(matrix,)d
Fc(blockname)h Fd(is)i(a)g(string)g(giving)f(the)h(name)f(of)g(the)i
(blo)q(c)o(k)e(as)h(a)g(whole.)21 b(Prin)o(ts)262 1245
y(out)14 b(a)g(table)g(with)g(the)h(W)m(ald)e(test)i(of)f(the)g(h)o(yp)
q(othesis)h(that)g(all)e(the)i(co)q(e\016cien)o(ts)g(in)f(the)262
1295 y(blo)q(c)o(k)f(are)h(zero)h(and)f(if)f(blo)q(c)o(k-only)g(is)g
(nil)g(separate)i(tests)h(for)d(eac)o(h)i(co)q(e\016cien)o(t.)262
1386 y Fc(>)21 b(\(def)g(a)h(\(binomial-rand)d(100)i(4)g(0.3\)\))262
1436 y(A)262 1486 y(>)g(\(def)g(b)h(\(binomial-rand)d(100)i(4)g
(0.3\)\))262 1536 y(B)262 1586 y(>)g(\(def)g(x)h(\(normal-rand)d(100)i
(\)\))262 1636 y(X)262 1685 y(>)g(\(def)g(y)h(\(+)f(a)h(x)f
(\(normal-rand)f(100\)\)\))262 1735 y(Y)262 1785 y(>)h(\(def)g(factora)
f(\(factor)h(b)g(:namebase)f("B"\)\))262 1835 y(FACTORA)262
1885 y(>)h(\(def)g(factora)f(\(factor)h(a)g(:namebase)f("A"\)\))262
1934 y(FACTORA)262 1984 y(>)h(\(def)g(factorb)f(\(factor)h(b)g
(:namebase)f("B"\)\))262 2034 y(FACTORB)262 2084 y(>)h(\(def)g(varx)g
(\(list)g(x)g('\("X"\)\)\))262 2134 y(VARX)262 2183 y(>)g(\(def)g(ab)g
(\(interaction)f(\(list)h(a)g(b\))g(:namebases)f(\(list)h("A")g
("B"\)\)\))262 2233 y(AB)262 2283 y(>)g(\(def)g(ax)g(\(interaction)f
(\(list)h(a)g(x\))g(:namebases)f(\(list)h("A")g("X"\))262
2333 y(:is-factor)e(\(list)i(t)h(nil\)\)\))262 2383 y(AX)262
2433 y(>)f(\(def)g(bx)g(\(interaction)f(\(list)h(b)g(x\))g(:namebases)f
(\(list)h("B")g("X"\))967 2574 y Fd(9)p eop
%%Page: 10 10
10 9 bop 262 307 a Fc(:is-factor)19 b(\(list)i(t)h(nil\)\)\))262
357 y(BX)262 407 y(>)f(\(def)g(abx)g(\(interaction)f(\(list)g(a)i(b)f
(x\))h(:namebases)e(\(list)g("A")i("B")f("X"\))262 457
y(:is-factor)e(\(list)i(t)h(t)f(nil\)\)\))262 506 y(ABX)262
589 y(>)g(\(def)g(model1)g(\(regression-mode)o(l)e(\(design)h(\(list)h
(factora)f(varx\)\))h(y)262 639 y(:predictor-name)o(s)e(\(names)i
(\(list)f(factora)h(varx\)\)\)\))262 739 y(Least)f(Squares)h
(Estimates:)262 839 y(Constant)390 b(0.299999)129 b(\(0.200000\))262
888 y(\(A)21 b(1\))457 b(0.677777)129 b(\(0.255555\))262
938 y(\(A)21 b(2\))479 b(1.74724)129 b(\(0.277777\))262
988 y(\(A)21 b(3\))479 b(2.61529)129 b(\(0.388888\))262
1038 y(\(A)21 b(4\))479 b(4.33253)129 b(\(0.699999\))262
1088 y(X)566 b(1.00357)129 b(\(9.175541E-2\))262 1187
y(R)21 b(Squared:)347 b(0.700000)262 1237 y(Sigma)20
b(hat:)348 b(0.933333)262 1287 y(Number)20 b(of)h(cases:)326
b(100)262 1337 y(Degrees)20 b(of)h(freedom:)282 b(94)262
1436 y(MODEL1)262 1519 y(>)21 b(\(def)g(model1-cov)f(\(*)h(\(send)g
(model1)f(:sigma-hat\))g(\(send)h(model1)f(:xtxinv\)\)\))262
1569 y(MODEL1-COV)262 1669 y(>\(block-test)f(\(list)i(0)g(1)h(2)f(3\))h
(\(send)e(model1)h(:coef-estimates\))e(model1-cov)262
1719 y(:blockname)g("A")i(:names)g(\(names)g(\(list)f(factora\)\))g(\))
262 1768 y(A)370 b(227.13)129 b(0.0000)370 1818 y(\(A)22
b(1\))370 b(0.29999)129 b(\(0.211111\))216 b(0.1666)370
1868 y(\(A)22 b(2\))370 b(0.67777)129 b(\(0.266666\))216
b(0.0096)370 1918 y(\(A)22 b(3\))392 b(1.7472)129 b(\(0.288888\))216
b(0.0000)370 1968 y(\(A)22 b(4\))392 b(2.6153)129 b(\(0.400000\))216
b(0.0000)262 2067 y(>)21 b(\(block-test)f(\(list)g(0)i(1)g(2)f(3\))h
(\(send)e(model1)h(:coef-estimates\))d(model1-cov)262
2117 y(:blockname)h("A")i(:block-only)f(t\))262 2167
y(A)370 b(227.13)129 b(0.0000)262 2250 y(>\(def)20 b(model2)h
(\(regression-model)d(\(design)i(\(list)h(factora)g(factorb)42
b(ax)21 b(bx)g(varx\)\))g(y)262 2300 y(:predictor-name)o(s)e(\(names)i
(\(list)f(factora)h(factorb)42 b(ax)21 b(bx)h(varx\)\)\)\))262
2399 y(Least)e(Squares)h(Estimates:)957 2574 y Fd(10)p
eop
%%Page: 11 11
11 10 bop 262 307 a Fc(Constant)390 b(-6.656751E-2)41
b(\(0.266666\))262 357 y(\(A)21 b(1\))457 b(0.722222)129
b(\(0.255555\))262 407 y(\(A)21 b(2\))479 b(1.75989)129
b(\(0.288888\))262 457 y(\(A)21 b(3\))479 b(2.69490)129
b(\(0.399999\))262 506 y(\(A)21 b(4\))479 b(4.66799)129
b(\(0.699999\))262 556 y(\(B)21 b(1\))457 b(0.533333)129
b(\(0.255555\))262 606 y(\(B)21 b(2\))457 b(0.155555)129
b(\(0.277777\))262 656 y(\(B)21 b(3\))457 b(0.422222)129
b(\(0.355555\))262 706 y(\(\(A)21 b(1\))g(X\))370 b(0.233333)129
b(\(0.277777\))262 756 y(\(\(A)21 b(2\))g(X\))370 b(0.455555)129
b(\(0.299999\))262 805 y(\(\(A)21 b(3\))g(X\))370 b(0.199999)129
b(\(0.388888\))262 855 y(\(\(A)21 b(4\))g(X\))392 b(1.24579)129
b(\(0.999999\))262 905 y(\(\(B)21 b(1\))g(X\))348 b(-0.288888)129
b(\(0.277777\))262 955 y(\(\(B)21 b(2\))g(X\))370 b(0.133333)129
b(\(0.299999\))262 1005 y(\(\(B)21 b(3\))g(X\))348 b(-0.611111)129
b(\(0.399999\))262 1054 y(X)544 b(0.866666)129 b(\(0.300000\))262
1154 y(R)21 b(Squared:)347 b(0.744444)262 1204 y(Sigma)20
b(hat:)348 b(0.900000)262 1254 y(Number)20 b(of)h(cases:)326
b(100)262 1303 y(Degrees)20 b(of)h(freedom:)282 b(84)262
1403 y(MODEL2)262 1494 y(>)21 b(\(def)g(model2-cov)f(\(*)h(\(send)g
(model2)f(:sigma-hat)g(\))i(\(send)f(model2)f(:xtxinv\)\)\))262
1544 y(MODEL2-COV)262 1594 y(>)h(\(block-test)f(\(list)g(0)i(1)g(2)f
(3\))h(\(send)e(model2)h(:coef-estimates\))d(model2-cov)262
1644 y(:blockname)h("A")i(:block-only)f(t\))262 1694
y(A)370 b(81.223)129 b(0.0000)262 1743 y(>)21 b(\(block-test)f(\(list)g
(4)i(5)g(6\))f(\(send)g(model2)f(:coef-estimates\))f(model2-cov)262
1793 y(:blockname)g("B")i(:block-only)f(t\))262 1843
y(B)370 b(45.812)129 b(0.0000)262 1893 y(>)21 b(\(block-test)f(\(iseq)g
(7)i(10\))f(\(send)g(model2)f(:coef-estimates\))f(model2-cov)262
1943 y(:blockname)g("AX")i(:block-only)f(t\))262 1993
y(AX)348 b(3.4602)129 b(0.4888)262 2042 y(>)21 b(\(block-test)f(\(iseq)
g(11)i(13\))f(\(send)g(model2)f(:coef-estimates\))f(model2-cov)262
2092 y(:blockname)g("BX")i(:block-only)f(t\))262 2142
y(BX)348 b(4.8578)129 b(0.1888)957 2574 y Fd(11)p eop
%%Trailer
end
userdict /end-hook known{end-hook}if
%%EOF
