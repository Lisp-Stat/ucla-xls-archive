If one wants to fit log-linear models with Xlisp-Stat, there
are a number of options. 

1. One can use the Coco package by Jens Henrik Badsberg. This
is a large and sophisticated tool to fit hierarchical and
graphical models, with many options and possibilities. It
relies heavily on dynamic loading of object code, and the
Macintosh, Unix, and MSW versions are very much out of sync.
If one has the time to learn the Coco language, and if one
is in the business of analyzing graphical models, then I am
sure learning Coco is worthwhile. 

2. One can use the iterative proportional fitting methods
for hierarchical models I have written earlier. They use the
APL inspired array extensions. This is comparatively straightforward,
but it has at least three disadvantages. IPF is generally
quite slow, it is limited to hierarchical models, and it
only gives fitted values and no parameter estimates or
standard errors.

3. One can use the various tricks and utilities that come with
Luke Tierney's glim.lsp. In particular the defuns indicators,
cross-terms, cross-names, and level-names can be used
with the possionreg-model fucntion to handle general
log-linear models (not necessarily hierarchical ones). This
has the major advantage that one has the whole glim machinery
at ones disposal, with all the residuals, possibly different
link, ways of fitting over/under dispersion, and so on. The
disadvantage is that one has to set up the design matrix
and the various names, which can be a pain if the number of
variables is at all large. 

Thus it seems that we have the best of all possible worlds if
we automate the process of generating the design matrix and
the variable names, and then use the glim protos. This is done
in the file log-linear.lsp. It creates a log-linear-proto,
which adds an ncat (number of categories) and model slot to
the poissonreg-proto. Here is an example of its use. The data are

(defvar counts
        '(431 88 14 17 69 16 2 11 13
          412 79 21 13 78 11 6 16 9
          316 41 5 12 48 8 5 12 9
          392 71 15 11 64 7 1 11 11))

(defvar ncat '(2 2 3 3))

(defvar vars '(treat-a treat-b pre post))

Now fit a model which has a treat-a main effect, plus
the interaction between the remaining three variables.

> (log-linear-model ncat counts '((0)(1 2 3)) vars)
Iteration 1: deviance = 7271.66
Iteration 2: deviance = 4566.42
Iteration 3: deviance = 4251.50
Iteration 4: deviance = 4243.74
Iteration 5: deviance = 4243.73

Weighted Least Squares Estimates:

Constant                   4.37051      (8.591572E-2)
TREATA(1)                -0.228710      (4.157112E-2)
TREATB(1).PRE(1).POST(1)  -2.06546      (0.250196)
TREATB(1).PRE(1).POST(2)   7.274170E-2  (8.666013E-2)
TREATB(1).PRE(2).POST(1)  -1.65999      (0.209951)
TREATB(1).PRE(2).POST(2)  -1.96009      (0.238835)

Scale taken as:            1.00000    
Deviance:                  4243.73    
Number of cases:                36
Degrees of freedom:             30

#<Object: 5116848, prototype = LOG-LINEAR-PROTO>

The log-linear-model function should be used in conjunction with the expand-hierarchy utility, which expands a hierarchical model. Thus
if we want to fit the hierarchical model corresponding with our
previous fit, we say

> (log-linear-model ncat counts (expand-hierarchy '((0)(1 2 3))) vars)
Iteration 1: deviance = 29.0084
Iteration 2: deviance = 28.2222
Iteration 3: deviance = 28.2183

Weighted Least Squares Estimates:

Constant                   9.48749      (0.241448)
TREATA(1)                -0.228710      (4.157114E-2)
TREATB(1)                  7.353408E-2  (5.081800E-2)
PRE(1)                    -3.24877      (0.189266)
PRE(2)                    -4.67016      (0.379721)
POST(1)                   -1.75625      (9.534477E-2)
POST(2)                   -3.67163      (0.232315)
TREATB(1).PRE(1)         -0.262776      (0.280592)
TREATB(1).PRE(2)          -7.353406E-2  (0.536898)
TREATB(1).POST(1)          7.728881E-2  (0.130388)
TREATB(1).POST(2)         0.565546      (0.288083)
PRE(1).POST(1)            0.331253      (0.332561)
PRE(1).POST(2)            -3.15113      (0.228299)
PRE(2).POST(1)           -0.205294      (0.478913)
PRE(2).POST(2)             1.66563      (0.540108)
TREATB(1).PRE(1).POST(1) -0.969592      (0.455675)
TREATB(1).PRE(1).POST(2) -0.305606      (0.329757)
TREATB(1).PRE(2).POST(1) -0.222552      (0.676706)
TREATB(1).PRE(2).POST(2) -0.966462      (0.753457)

Scale taken as:            1.00000    
Deviance:                  28.2183    
Number of cases:                36
Degrees of freedom:             17

#<Object: 5195216, prototype = LOG-LINEAR-PROTO>
> 

After this one can use the object to plot residuals,
fit a scale parameter, change the link function, and so on.


=== Jan de Leeuw, 04-27-95