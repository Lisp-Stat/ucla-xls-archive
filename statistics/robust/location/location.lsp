(defun midmean (data)
 (trimmed-mean data .25))

(defun trimmed-mean (data alpha)
(if (>= alpha .50)
    (error "Can't trim more than 50%"))
(let* (
       (n (length data))
       (r (rank data))
       (m (floor (* alpha n)))
       (s (mapcar #'(lambda (x)
                  (and (>= x m) (< x (- n m)))) r))
       )
(mean (select data (which s)))
))

(defun winsorized-mean (data alpha)
(if (>= alpha .50)
    (error "Can't winsorize more than 50%"))
(let* (
       (n (length data))
       (r (rank data))
       (m (floor (* alpha n)))
       (l (- n m))
       (s (mapcar #'(lambda (x)
                  (and (>= x m) (< x l))) r))
       (a (elt data (position m r)))
       (b (elt data (position (1- l) r)))
       )
(/ (+ (sum (select data (which s))) (* m (+ a b))) n)
))

(defun hodges-lehmann-estimate (data)
(/ (median (outer-product data data #'+)) 2)
)

(defun bickel-hodges-estimate (data)
(let* (
       (a (sort-data data))
       (b (reverse a))
       )
(/ (median (+ a b)) 2)
))

(defun shorth (data)
(let* (
       (a (sort-data data))
       (n (length data))
       (h (floor (/ n 2)))
       (g (iseq h))
       (s (mapcar #'(lambda (x)
                      (- (elt a (+ x h)) (elt a x))) g))
       (k (position (min s) s))
       )
(mean (select a (+ k g)))
))
