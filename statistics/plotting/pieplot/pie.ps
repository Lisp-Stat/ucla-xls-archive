%!PS (but not EPSF; comments have been disabled)
%DVIPSCommandLine: dvips pie
%DVIPSParameters: dpi=600, compressed, comments removed
%DVIPSSource:  TeX output 1995.02.23:1637
/TeXDict 250 dict def TeXDict begin /N{def}def /B{bind def}N /S{exch}N
/X{S N}B /TR{translate}N /isls false N /vsize 11 72 mul N /hsize 8.5 72
mul N /landplus90{false}def /@rigin{isls{[0 landplus90{1 -1}{-1 1}
ifelse 0 0 0]concat}if 72 Resolution div 72 VResolution div neg scale
isls{landplus90{VResolution 72 div vsize mul 0 exch}{Resolution -72 div
hsize mul 0}ifelse TR}if Resolution VResolution vsize -72 div 1 add mul
TR[matrix currentmatrix{dup dup round sub abs 0.00001 lt{round}if}
forall round exch round exch]setmatrix}N /@landscape{/isls true N}B
/@manualfeed{statusdict /manualfeed true put}B /@copies{/#copies X}B
/FMat[1 0 0 -1 0 0]N /FBB[0 0 0 0]N /nn 0 N /IE 0 N /ctr 0 N /df-tail{
/nn 8 dict N nn begin /FontType 3 N /FontMatrix fntrx N /FontBBox FBB N
string /base X array /BitMaps X /BuildChar{CharBuilder}N /Encoding IE N
end dup{/foo setfont}2 array copy cvx N load 0 nn put /ctr 0 N[}B /df{
/sf 1 N /fntrx FMat N df-tail}B /dfs{div /sf X /fntrx[sf 0 0 sf neg 0 0]
N df-tail}B /E{pop nn dup definefont setfont}B /ch-width{ch-data dup
length 5 sub get}B /ch-height{ch-data dup length 4 sub get}B /ch-xoff{
128 ch-data dup length 3 sub get sub}B /ch-yoff{ch-data dup length 2 sub
get 127 sub}B /ch-dx{ch-data dup length 1 sub get}B /ch-image{ch-data
dup type /stringtype ne{ctr get /ctr ctr 1 add N}if}B /id 0 N /rw 0 N
/rc 0 N /gp 0 N /cp 0 N /G 0 N /sf 0 N /CharBuilder{save 3 1 roll S dup
/base get 2 index get S /BitMaps get S get /ch-data X pop /ctr 0 N ch-dx
0 ch-xoff ch-yoff ch-height sub ch-xoff ch-width add ch-yoff
setcachedevice ch-width ch-height true[1 0 0 -1 -.1 ch-xoff sub ch-yoff
.1 sub]/id ch-image N /rw ch-width 7 add 8 idiv string N /rc 0 N /gp 0 N
/cp 0 N{rc 0 ne{rc 1 sub /rc X rw}{G}ifelse}imagemask restore}B /G{{id
gp get /gp gp 1 add N dup 18 mod S 18 idiv pl S get exec}loop}B /adv{cp
add /cp X}B /chg{rw cp id gp 4 index getinterval putinterval dup gp add
/gp X adv}B /nd{/cp 0 N rw exit}B /lsh{rw cp 2 copy get dup 0 eq{pop 1}{
dup 255 eq{pop 254}{dup dup add 255 and S 1 and or}ifelse}ifelse put 1
adv}B /rsh{rw cp 2 copy get dup 0 eq{pop 128}{dup 255 eq{pop 127}{dup 2
idiv S 128 and or}ifelse}ifelse put 1 adv}B /clr{rw cp 2 index string
putinterval adv}B /set{rw cp fillstr 0 4 index getinterval putinterval
adv}B /fillstr 18 string 0 1 17{2 copy 255 put pop}for N /pl[{adv 1 chg}
{adv 1 chg nd}{1 add chg}{1 add chg nd}{adv lsh}{adv lsh nd}{adv rsh}{
adv rsh nd}{1 add adv}{/rc X nd}{1 add set}{1 add clr}{adv 2 chg}{adv 2
chg nd}{pop nd}]dup{bind pop}forall N /D{/cc X dup type /stringtype ne{]
}if nn /base get cc ctr put nn /BitMaps get S ctr S sf 1 ne{dup dup
length 1 sub dup 2 index S get sf div put}if put /ctr ctr 1 add N}B /I{
cc 1 add D}B /bop{userdict /bop-hook known{bop-hook}if /SI save N @rigin
0 0 moveto /V matrix currentmatrix dup 1 get dup mul exch 0 get dup mul
add .99 lt{/QV}{/RV}ifelse load def pop pop}N /eop{SI restore userdict
/eop-hook known{eop-hook}if showpage}N /@start{userdict /start-hook
known{start-hook}if pop /VResolution X /Resolution X 1000 div /DVImag X
/IE 256 array N 0 1 255{IE S 1 string dup 0 3 index put cvn put}for
65781.76 div /vsize X 65781.76 div /hsize X}N /p{show}N /RMat[1 0 0 -1 0
0]N /BDot 260 string N /rulex 0 N /ruley 0 N /v{/ruley X /rulex X V}B /V
{}B /RV statusdict begin /product where{pop product dup length 7 ge{0 7
getinterval dup(Display)eq exch 0 4 getinterval(NeXT)eq or}{pop false}
ifelse}{false}ifelse end{{gsave TR -.1 .1 TR 1 1 scale rulex ruley false
RMat{BDot}imagemask grestore}}{{gsave TR -.1 .1 TR rulex ruley scale 1 1
false RMat{BDot}imagemask grestore}}ifelse B /QV{gsave newpath transform
round exch round exch itransform moveto rulex 0 rlineto 0 ruley neg
rlineto rulex neg 0 rlineto fill grestore}B /a{moveto}B /delta 0 N /tail
{dup /delta X 0 rmoveto}B /M{S p delta add tail}B /b{S p tail}B /c{-4 M}
B /d{-3 M}B /e{-2 M}B /f{-1 M}B /g{0 M}B /h{1 M}B /i{2 M}B /j{3 M}B /k{
4 M}B /w{0 rmoveto}B /l{p -4 w}B /m{p -3 w}B /n{p -2 w}B /o{p -1 w}B /q{
p 1 w}B /r{p 2 w}B /s{p 3 w}B /t{p 4 w}B /x{0 S rmoveto}B /y{3 2 roll p
a}B /bos{/SS save N}B /eos{SS restore}B end
% PostScript prologue for pstricks.tex.
% Created 1993/3/12. Source file was pstricks.doc
% Version 0.93a, 93/03/12.
% For use with Rokicki's dvips.
/tx@Dict 200 dict def tx@Dict begin
/ADict 25 dict def
/CM { matrix currentmatrix } bind def
/SLW /setlinewidth load def
/CLW /currentlinewidth load def
/CP /currentpoint load def
/ED { exch def } bind def
/L /lineto load def
/T /translate load def
/Atan { /atan load stopped { pop pop 0 } if } def
/Div { dup 0 eq { pop } { div } ifelse } def
/NET { neg exch neg exch T } def
/Pyth { dup mul exch dup mul add sqrt } def
/PtoC { 2 copy cos mul 3 1 roll sin mul } def
/PathLength@ { /z z y y1 sub x x1 sub Pyth add def /y1 y def /x1 x def }
def
/PathLength { flattenpath /z 0 def { /y1 ED /x1 ED /y2 y1 def /x2 x1 def
} { /y ED /x ED PathLength@ } {} { /y y2 def /x x2 def PathLength@ }
pathforall z } def
/STP { .996264 dup scale } def
/STV { SDict begin normalscale end STP  } def
/DashLine { dup 0 gt { /a .5 def PathLength exch div } { pop /a 1 def
PathLength } ifelse /b ED /x ED /y ED /z y x add def b a .5 sub 2 mul y
mul sub z Div round z mul a .5 sub 2 mul y mul add b exch Div dup y mul
/y ED x mul /x ED x 0 eq y 0 eq and { /x 1 def /y 1 def } if [ y x ] 1 a
sub y mul setdash stroke } def
/DotLine { /b PathLength def /a ED /z ED /y CLW def /z y z add def a 0 gt
{ /b b a div def } { a 0 eq { /b b y sub def } { a -3 eq { /b b y add
def } if } ifelse } ifelse [ 0 b b z Div round Div dup 0 le { pop 1 } if
] a 0 gt { 0 } { y 2 div a -2 gt { neg } if } ifelse setdash 1
setlinecap stroke } def
/LineFill { abs CLW add /a ED gsave clip pathbbox a Div ceiling /y2 ED
/x2 ED a Div floor /y1 ED /x1 ED /n y2 y1 sub 1 add cvi def /y1 a y1 mul
def newpath 2 setlinecap n { currentstrokeadjust == x1 y1 moveto x2 y1 L
stroke /y1 y1 a add def } repeat grestore } def
/LineFill { abs CLW add /a ED gsave clip pathbbox a Div ceiling /y2 ED
/x2 ED a Div floor /y1 ED /x1 ED /n y2 y1 sub 1 add cvi def /y1 a y1 mul
def newpath 2 setlinecap systemdict /currentstrokeadjust known {
currentstrokeadjust } { false } ifelse { /t { } def } { /t { transform
0.25 sub round 0.25 add exch 0.25 sub round 0.25 add exch itransform }
bind def } ifelse n { x1 y1 t moveto x2 y1 t L stroke /y1 y1 a add def }
repeat grestore } def
/BeginArrow { ADict begin /@mtrx CM def gsave 2 copy T 2 index sub neg
exch 3 index sub exch Atan rotate newpath } def
/EndArrow { @mtrx setmatrix CP grestore end } def
/Arrow { CLW mul add dup 2 div /w ED mul dup /h ED mul /a ED { 0 h T 1 -1
scale } if w neg h moveto 0 0 L w h L w neg a neg rlineto gsave fill
grestore } def
/Tbar { CLW mul add /z ED z -2 div CLW 2 div moveto z 0 rlineto stroke 0
CLW moveto } def
/Bracket { CLW mul add dup CLW sub 2 div /x ED mul CLW add /y ED /z CLW 2
div def x neg y moveto x neg CLW 2 div L x CLW 2 div L x y L stroke 0
CLW moveto } def
/RoundBracket { CLW mul add dup 2 div /x ED mul /y ED /mtrx CM def 0 CLW
2 div T x y mul 0 ne { x y scale } if 1 1 moveto .85 .5 .35 0 0 0
curveto -.35 0 -.85 .5 -1 1 curveto mtrx setmatrix stroke 0 CLW moveto }
def
/Shadow { [ { /moveto load } { /lineto load } { /curveto load } {
/closepath load } pathforall ] cvx newpath 3 1 roll T exec } def
/SD { 0 360 arc fill } def
/SQ { /r ED r r moveto r r neg L r neg r neg L r neg r L fill } def
/ST { /y ED /x ED x y moveto x neg y L 0 x L fill } def
/SP { /r ED gsave 0 r moveto 4 { 72 rotate 0 r L } repeat fill grestore }
def
/NArray { aload length 2 div dup dup cvi eq not { exch pop } if /n exch
cvi def } def
/NArray { /f ED counttomark 2 div dup cvi /n ED n eq not { exch pop } if
f { ] aload /Points ED } { n 2 mul 1 add -1 roll pop } ifelse } def
/Line { NArray n 0 eq not { n 1 eq { 0 0 /n 2 def } if ArrowA /n n 2 sub
def n { Lineto } repeat CP 4 2 roll ArrowB L pop pop } if } def
/Arcto { /a [ 6 -2 roll ] cvx def a r /arcto load stopped { 5 } { 4 }
ifelse { pop } repeat a } def
/CheckClosed { dup n 2 mul 1 sub index eq 2 index n 2 mul 1 add index eq
and { pop pop /n n 1 sub def } if } def
/Polygon { NArray n 2 eq { 0 0 /n 3 def } if n 3 lt { n { pop pop }
repeat } { n 3 gt { CheckClosed } if n 2 mul -2 roll /y0 ED /x0 ED /y1
ED /x1 ED x1 y1 /x1 x0 x1 add 2 div def /y1 y0 y1 add 2 div def x1 y1
moveto /n n 2 sub def n { Lineto } repeat x1 y1 x0 y0 6 4 roll Lineto
Lineto pop pop closepath } ifelse } def
/CCA { /y ED /x ED 2 copy y sub /dy1 ED x sub /dx1 ED /l1 dx1 dy1 Pyth
def } def
/CCA { /y ED /x ED 2 copy y sub /dy1 ED x sub /dx1 ED /l1 dx1 dy1 Pyth
def } def
/CC { /l0 l1 def /x1 x dx sub def /y1 y dy sub def /dx0 dx1 def /dy0 dy1
def CCA /dx dx0 l1 c exp mul dx1 l0 c exp mul add def /dy dy0 l1 c exp
mul dy1 l0 c exp mul add def /m dx0 dy0 Atan dx1 dy1 Atan sub 2 div cos
abs b exp a mul dx dy Pyth Div 2 div def /x2 x l0 dx mul m mul sub def
/y2 y l0 dy mul m mul sub def /dx l1 dx mul m mul neg def /dy l1 dy mul
m mul neg def } def
/IC { /c c 1 add def c 0 lt { /c 0 def } { c 3 gt { /c 3 def } if }
ifelse /a a 2 mul 3 div 45 cos b exp div def CCA /dx 0 def /dy 0 def }
def
/BOC { IC CC x2 y2 x1 y1 ArrowA CP 4 2 roll x y curveto } def
/NC { CC x1 y1 x2 y2 x y curveto } def
/EOC { x dx sub y dy sub 4 2 roll ArrowB 2 copy curveto } def
/BAC { IC CC x y moveto CC x1 y1 CP ArrowA } def
/NAC { x2 y2 x y curveto CC x1 y1 } def
/EAC { x2 y2 x y ArrowB curveto pop pop } def
/OpenCurve { NArray n 3 lt { n { pop pop } repeat } { BOC /n n 3 sub def
n { NC } repeat EOC } ifelse } def
/AltCurve { { false NArray n 2 mul 2 roll [ n 2 mul 3 sub 1 roll ] aload
/Points ED n 2 mul -2 roll } { false NArray } ifelse n 4 lt { n { pop
pop } repeat } { BAC /n n 4 sub def n { NAC } repeat EAC } ifelse } def
/ClosedCurve { NArray n 3 lt { n { pop pop } repeat } { n 3 gt {
CheckClosed } if 6 copy n 2 mul 6 add 6 roll IC CC x y moveto n { NC }
repeat closepath pop pop } ifelse } def
/EndDot { { /z DS def } { /z 0 def } ifelse /b ED 0 z DS SD b { 0 z DS
CLW sub SD } if 0 DS z add CLW 4 div sub moveto } def
/Rect { x1 y1 y2 add 2 div moveto x1 y2 lineto x2 y2 lineto x2 y1 lineto
x1 y1 lineto closepath } def
/OvalFrame { x1 x2 eq y1 y2 eq or { pop pop x1 y1 moveto x2 y2 L } { y1
y2 sub abs x1 x2 sub abs 2 copy gt { exch pop } { pop } ifelse 2 div
exch { dup 3 1 roll mul exch } if 2 copy lt { pop } { exch pop } ifelse
/b ED x1 y1 y2 add 2 div moveto x1 y2 x2 y2 b arcto x2 y2 x2 y1 b arcto
x2 y1 x1 y1 b arcto x1 y1 x1 y2 b arcto 16 { pop } repeat closepath }
ifelse } def
/Frame { CLW mul /a ED 3 -1 roll 2 copy gt { exch } if a sub /y2 ED a add
/y1 ED 2 copy gt { exch } if a sub /x2 ED a add /x1 ED 1 index 0 eq {
pop pop Rect } { OvalFrame } ifelse } def
/Parab { /y0 exch def /x0 exch def /y1 exch def /x1 exch def /dx x0 x1
sub 3 div def /dy y0 y1 sub 3 div def x0 dx sub y0 dy add x1 y1 ArrowA
x0 dx add y0 dy add x0 2 mul x1 sub y1 ArrowB curveto /Points [ x1 y1 x0
y0 x0 2 mul x1 sub y1 ] def } def
/Grid { /a 4 string def /b ED /d ED /n ED cvi dup 1 lt { pop 1 } if /c ED
c div dup 0 eq { pop 1 } if /cy ED c div dup 0 eq { pop 1 } if /cx ED cy
div cvi /y ED cx div cvi /x ED cy div cvi /y2 ED cx div cvi /x2 ED cy
div cvi /y1 ED cx div cvi /x1 ED /h y2 y1 sub 0 gt { 1 } { -1 } ifelse
def /w x2 x1 sub 0 gt { 1 } { -1 } ifelse def b 0 gt { /z1 b 4 div CLW 2
div add def /Helvetica findfont b scalefont setfont /b b .95 mul CLW 2
div add def } if gsave n 0 gt { 1 setlinecap [ 0 cy n div ] 0 setdash }
{ 2 setlinecap } ifelse /c x1 def /i 500 w mul x1 add def /e y cy mul
def /f y1 cy mul def /g y2 cy mul def x1 cx mul 0 T { newpath 0 e moveto
b 0 gt { gsave d c a cvs dup stringwidth pop /z2 ED w 0 gt {z1} {z1 z2
add neg} ifelse h 0 gt {b neg} {z1} ifelse rmoveto show grestore } if 0
f moveto 0 g L stroke cx w mul 0 T c x2 eq c i eq or {exit} if /c c w
add def } loop grestore gsave n 0 gt { 1 setlinecap [ 0 cx n div ] 0
setdash } { 2 setlinecap } ifelse /c y1 def /i 500 h mul y1 add def /e x
cx mul def /f x1 cx mul def /g x2 cx mul def 0 y1 cy mul T { newpath e 0
moveto b 0 gt { gsave d c a cvs dup stringwidth pop /z2 ED w 0 gt {z1 z2
add neg} {z1} ifelse h 0 gt {z1} {b neg} ifelse rmoveto show grestore }
if f 0 moveto g 0 L stroke 0 cy h mul T c y2 eq c i eq or {exit} if /c c
h add def } loop grestore } def
/ArcArrow { /d ED /b ED /a ED gsave newpath 0 -1000 moveto clip newpath 0
1 0 0 b grestore c mul /e ED pop pop pop r a e d PtoC y add exch x add
exch r a PtoC y add exch x add exch b pop pop pop pop a e d CLW 8 div c
mul neg d } def
/Ellipse { /mtrx CM def T scale 0 0 1 5 3 roll arc mtrx setmatrix } def
/Rot { CP CP translate 3 -1 roll neg rotate NET  } def
/PutCoor { gsave CP T CM STV exch exec moveto setmatrix CP grestore } def
/PutBegin { /lmtrx [ tx@Dict /lmtrx known { lmtrx aload pop } if CM ] def
CP 4 2 roll T moveto } def
/PutEnd { CP /lmtrx [ lmtrx aload pop setmatrix ] def moveto } def
/Uput { /a ED add 2 div /h ED 2 div /w ED /s a sin def /c a cos def /b s
abs c abs 2 copy gt dup /q ED { pop } { exch pop } ifelse def /w1 c b
div w mul def /h1 s b div h mul def q { w1 abs w sub dup c mul abs } {
h1 abs h sub dup s mul abs } ifelse } def
/UUput { /z ED abs /y ED /x ED q { x s div c mul abs y gt } { x c div s
mul abs y gt } ifelse { x x mul y y mul sub z z mul add sqrt z add } { q
{ x s div } { x c div } ifelse abs } ifelse a PtoC h1 add exch w1 add
exch } def
/BeginOL { dup (all) eq exch TheOL eq or { IfVisible not { CP OLUnit T
moveto /IfVisible true def } if } { IfVisible { CP OLUnit NET moveto
/IfVisible false def } if } ifelse } def
/InitOL { /OLUnit [ gsave CM STV 2890.79999 dup moveto setmatrix CP
grestore ] cvx def /BOL { BeginOL } def /IfVisible true def } def
end
TeXDict begin /SDict 200 dict N SDict begin /@SpecialDefaults{/hs 612 N
/vs 792 N /ho 0 N /vo 0 N /hsc 1 N /vsc 1 N /ang 0 N /CLIP 0 N /rwiSeen
false N /rhiSeen false N /letter{}N /note{}N /a4{}N /legal{}N}B
/@scaleunit 100 N /@hscale{@scaleunit div /hsc X}B /@vscale{@scaleunit
div /vsc X}B /@hsize{/hs X /CLIP 1 N}B /@vsize{/vs X /CLIP 1 N}B /@clip{
/CLIP 2 N}B /@hoffset{/ho X}B /@voffset{/vo X}B /@angle{/ang X}B /@rwi{
10 div /rwi X /rwiSeen true N}B /@rhi{10 div /rhi X /rhiSeen true N}B
/@llx{/llx X}B /@lly{/lly X}B /@urx{/urx X}B /@ury{/ury X}B /magscale
true def end /@MacSetUp{userdict /md known{userdict /md get type
/dicttype eq{userdict begin md length 10 add md maxlength ge{/md md dup
length 20 add dict copy def}if end md begin /letter{}N /note{}N /legal{}
N /od{txpose 1 0 mtx defaultmatrix dtransform S atan/pa X newpath
clippath mark{transform{itransform moveto}}{transform{itransform lineto}
}{6 -2 roll transform 6 -2 roll transform 6 -2 roll transform{
itransform 6 2 roll itransform 6 2 roll itransform 6 2 roll curveto}}{{
closepath}}pathforall newpath counttomark array astore /gc xdf pop ct 39
0 put 10 fz 0 fs 2 F/|______Courier fnt invertflag{PaintBlack}if}N
/txpose{pxs pys scale ppr aload pop por{noflips{pop S neg S TR pop 1 -1
scale}if xflip yflip and{pop S neg S TR 180 rotate 1 -1 scale ppr 3 get
ppr 1 get neg sub neg ppr 2 get ppr 0 get neg sub neg TR}if xflip yflip
not and{pop S neg S TR pop 180 rotate ppr 3 get ppr 1 get neg sub neg 0
TR}if yflip xflip not and{ppr 1 get neg ppr 0 get neg TR}if}{noflips{TR
pop pop 270 rotate 1 -1 scale}if xflip yflip and{TR pop pop 90 rotate 1
-1 scale ppr 3 get ppr 1 get neg sub neg ppr 2 get ppr 0 get neg sub neg
TR}if xflip yflip not and{TR pop pop 90 rotate ppr 3 get ppr 1 get neg
sub neg 0 TR}if yflip xflip not and{TR pop pop 270 rotate ppr 2 get ppr
0 get neg sub neg 0 S TR}if}ifelse scaleby96{ppr aload pop 4 -1 roll add
2 div 3 1 roll add 2 div 2 copy TR .96 dup scale neg S neg S TR}if}N /cp
{pop pop showpage pm restore}N end}if}if}N /normalscale{Resolution 72
div VResolution 72 div neg scale magscale{DVImag dup scale}if 0 setgray}
N /psfts{S 65781.76 div N}N /startTexFig{/psf$SavedState save N userdict
maxlength dict begin /magscale true def normalscale currentpoint TR
/psf$ury psfts /psf$urx psfts /psf$lly psfts /psf$llx psfts /psf$y psfts
/psf$x psfts currentpoint /psf$cy X /psf$cx X /psf$sx psf$x psf$urx
psf$llx sub div N /psf$sy psf$y psf$ury psf$lly sub div N psf$sx psf$sy
scale psf$cx psf$sx div psf$llx sub psf$cy psf$sy div psf$ury sub TR
/showpage{}N /erasepage{}N /copypage{}N /p 3 def @MacSetUp}N /doclip{
psf$llx psf$lly psf$urx psf$ury currentpoint 6 2 roll newpath 4 copy 4 2
roll moveto 6 -1 roll S lineto S lineto S lineto closepath clip newpath
moveto}N /endTexFig{end psf$SavedState restore}N /@beginspecial{SDict
begin /SpecialSave save N gsave normalscale currentpoint TR
@SpecialDefaults count /ocount X /dcount countdictstack N}N /@setspecial
{CLIP 1 eq{newpath 0 0 moveto hs 0 rlineto 0 vs rlineto hs neg 0 rlineto
closepath clip}if ho vo TR hsc vsc scale ang rotate rwiSeen{rwi urx llx
sub div rhiSeen{rhi ury lly sub div}{dup}ifelse scale llx neg lly neg TR
}{rhiSeen{rhi ury lly sub div dup scale llx neg lly neg TR}if}ifelse
CLIP 2 eq{newpath llx lly moveto urx lly lineto urx ury lineto llx ury
lineto closepath clip}if /showpage{}N /erasepage{}N /copypage{}N newpath
}N /@endspecial{count ocount sub{pop}repeat countdictstack dcount sub{
end}repeat grestore SpecialSave restore end}N /@defspecial{SDict begin}
N /@fedspecial{end}B /li{lineto}B /rl{rlineto}B /rc{rcurveto}B /np{
/SaveX currentpoint /SaveY X N 1 setlinecap newpath}N /st{stroke SaveX
SaveY moveto}N /fil{fill SaveX SaveY moveto}N /ellipse{/endangle X
/startangle X /yrad X /xrad X /savematrix matrix currentmatrix N TR xrad
yrad scale 0 0 1 startangle endangle arc savematrix setmatrix}N end
TeXDict begin 40258431 52099146 1000 600 600 (pie.dvi)
@start /Fa 5 57 df<EB0FE0EB7FFCEBF83E3903E00F803907C007C0EB8003000F14E0
391F0001F0A24814F8A2003E1300007E14FCA500FE14FEB2007E14FCA56CEB01F8A36C14
F0A2390F8003E03907C007C0A23903E00F803900F83E00EB7FFCEB0FE01F347DB126>48
D<13075B5B137FEA07FFB5FC13BFEAF83F1200B3B3A2497E007FB51280A319327AB126>
I<EB1FE0EBFFFC4813FF3907E03F80390F001FC0001EEB0FE0001CEB07F0123F018013F8
140313C01380A2381F0007C7FC15F0A2EC0FE015C0141FEC3F80EC7E00EB01F8EB7FE014
FCEB003FEC1FC0EC0FE0EC07F015F8140315FC140115FEA3127EB4FCA415FC4813031278
0070EB07F86C14F0003C130F001FEB1FE0390FE03F800003B51200C613FCEB1FE01F347D
B126>51 D<EC01C0A214031407A2140F141FA2143F147F146F14CF1301EB038F140F1307
130E130C131C13381330137013E013C0EA0180120313001206120E120C5A123812305A12
E0B71280A3C7380FC000A94A7E0107B51280A321337EB226>I<EB0FE0EB7FFC90B5FC39
03F01F803907C007C0390F0003E0000EEB01F0001E1300001C14F8003C1478A3123EA200
3F14F86D13F0EBC001D81FF013E09038F803C0390FFE07803907FF0F006C13DE6C13F87E
EB3FFE8001F713C0D803E313E0D8078013F0390F007FF8001E131F003EEB07FC003C1303
481301EC007E12F848143EA2151EA37E153C1278007C14787E6C14F0390F8003E03907F0
1FC00001B5120038007FFCEB1FE01F347DB126>56 D E /Fb 11
86 df<EB01C013031307131F13FFB5FCA2131F1200B3B3A8497E007FB512F0A31C3879B7
2A>49 D<B712E016FC16FF0001903980007FC06C90C7EA1FE0707E707E707EA2707EA283
A75F16035F4C5A4C5A4C5A4C5AEEFF8091B500FCC7FCA291C7EA7F80EE1FE0EE07F0707E
707E83707EA21880177F18C0A7188017FFA24C13005F16034C5AEE1FF8486DEB7FF0B812
C094C7FC16F832397DB83B>66 D<B812F8A30001903880001F6C90C71201EE00FC177C17
3C171CA2170CA4170E1706A2ED0180A21700A41503A21507151F91B5FCA3EC001F150715
03A21501A692C8FCAD4813C0B612C0A32F397DB836>70 D<DBFF8013C0020FEBF001023F
13FC9139FF803F03903A03FC000787D90FF0EB03CF4948EB00EF4948147F4948143F49C8
121F485A4848150F48481507A248481503A2485A1701123F5B007F1600A448481600AB93
B6FCA26C7E9338007FE0EF3FC0A2123F7F121FA26C7EA26C7EA26C7E6C7E6C6C157F6D7E
6D6C14FF6D6C14EFD90FF8EB03C7D903FEEB0783903A00FFC03F0191393FFFFC00020F01
F0130002001380383D7CBA41>I<013FB512E0A39039001FFC00EC07F8B3B3A3123FEA7F
80EAFFC0A44A5A1380D87F005B0070131F6C5C6C495A6C49C7FC380781FC3801FFF03800
7F80233B7DB82B>74 D<B612E0A3000101C0C8FC6C90C9FCB3AD1718A517381730A31770
A317F0A216011603160FEE1FE0486D13FFB8FCA32D397DB834>76
D<B5913807FFFE8080C69238007FE06EEC1F80D9DFF0EC0F001706EBCFF8EBC7FCA2EBC3
FEEBC1FFA201C07F6E7EA26E7E6E7E81140F6E7E8114036E7E168080ED7FC016E0153FED
1FF0ED0FF8A2ED07FCED03FEA2ED01FF6F1386A2EE7FC6EE3FE6A2EE1FF6EE0FFEA21607
1603A216011600A2177E486C153E487ED80FFC151EB500C0140EA2170637397DB83E>78
D<B712C016F816FE000190398001FF806C90C7EA3FC0EE0FE0EE07F0EE03F817FC17FE16
01A217FFA717FEA2EE03FCA2EE07F817F0EE0FE0EE3FC0923801FF0091B512FC16F091C9
FCB3A5487FB6FCA330397DB839>80 D<B612FEEDFFE016F8000190388007FE6C90C76C7E
EE3FC0707E707E707EA2707EA283A65FA24C5AA24C5A4C5AEE3F8004FFC8FCED07FC91B5
12E05E9138000FF0ED03F8ED00FE82707E707EA2161F83A583A6F00180A217F8160F1803
486D01071400B66D6C5A04011306933800FE0ECAEA3FFCEF07F0393B7DB83D>82
D<D90FF813C090383FFE0190B512813903F807E33907E000F74848137F4848133F48C712
1F003E140F007E1407A2007C140312FC1501A36C1400A37E6D14006C7E7F13F86CB47E6C
13F8ECFF806C14E06C14F86C14FEC680013F1480010714C0EB007F020713E0EC007FED3F
F0151F150FED07F8A200C01403A21501A37EA216F07E15036C15E06C14076C15C06C140F
6DEB1F80D8FBF0EB3F00D8F0FE13FE39E03FFFF8010F13E0D8C00190C7FC253D7CBA2E>
I<B6903807FFFEA3000101809038007FE06C90C8EA1F80EF0F001706B3B2170E6D150C80
171C133F17186D6C14385F6D6C14F06D6C5C6D6C495A6D6CEB07806D6C49C7FC91387F80
7E91381FFFF8020713E09138007F80373B7DB83E>85 D E end
TeXDict begin

1 0 bop 1820 1621 a @beginspecial @setspecial
 tx@Dict begin STP newpath 0.8 SLW 0. setgray  0.0 0.0 2 copy moveto
128.03734 .5 CLW mul sub 0. 117. arc closepath gsave 0.00 setgray fill
 grestore gsave 0.8 SLW 0. setgray 0 setlinecap stroke  grestore end
 
@endspecial
1820 1621 a
 tx@Dict begin { 0.0 0.0 } PutCoor PutBegin  end
 1820 1621 a 1820 1621 a
 tx@Dict begin { 142.26372 13.05559 6.83331 0.0 59.  Uput UUput } PutCoor
PutBegin  end
 1820 1621 a 1766
1649 a Fb(US)1820 1621 y
 tx@Dict begin PutEnd  end
 1820 1621 a 1820 1621 a
 tx@Dict begin PutEnd  end
 1820
1621 a 1820 1621 a
 tx@Dict begin { 56.90549 59. PtoC } PutCoor PutBegin  end
 1820 1621 a 1782 1645 a @beginspecial
@setspecial
 tx@Dict begin STP newpath 0.0 SLW 1. setgray  0. true 1.5 neg 1.5
neg 10.74994 7.29999 .5 Frame  gsave 1. setgray fill  grestore end
 
@endspecial Fa(14)1820 1621 y
 tx@Dict begin PutEnd  end
 1820 1621
a @beginspecial @setspecial
 tx@Dict begin STP newpath 0.8 SLW 0. setgray  0.0 0.0 2 copy moveto
128.03734 .5 CLW mul sub 117. 142. arc closepath gsave 0.25 setgray
fill  grestore gsave 0.8 SLW 0. setgray 0 setlinecap stroke  grestore
end
 
@endspecial 1820 1621 a
 tx@Dict begin { 0.0 0.0 } PutCoor PutBegin  end

1820 1621 a 1820 1621 a
 tx@Dict begin { 142.26372 13.75003 6.83331 0.0 130.  Uput UUput }
PutCoor PutBegin  end
 1820 1621 a 1763 1649 a Fb(NL)1820
1621 y
 tx@Dict begin PutEnd  end
 1820 1621 a 1820 1621 a
 tx@Dict begin PutEnd  end
 1820 1621 a 1820 1621
a
 tx@Dict begin { 56.90549 130. PtoC } PutCoor PutBegin  end
 1820 1621 a 1801 1645 a @beginspecial @setspecial
 tx@Dict begin STP newpath 0.0 SLW 1. setgray  0. true 1.5 neg 1.5
neg 6.12497 7.29999 .5 Frame  gsave 1. setgray fill  grestore end
 
@endspecial
Fa(3)1820 1621 y
 tx@Dict begin PutEnd  end
 1820 1621 a @beginspecial @setspecial
 tx@Dict begin STP newpath 0.8 SLW 0. setgray  0.0 0.0 2 copy moveto
128.03734 .5 CLW mul sub 142. 226. arc closepath gsave 0.50 setgray
fill  grestore gsave 0.8 SLW 0. setgray 0 setlinecap stroke  grestore
end


@endspecial 1820 1621 a
 tx@Dict begin { 0.0 0.0 } PutCoor PutBegin  end
 1820 1621 a 1820 1621 a
 tx@Dict begin { 142.26372 11.94447 6.83331 0.0 184.  Uput UUput }
PutCoor PutBegin  end
 1820
1621 a 1770 1649 a Fb(JP)1820 1621 y
 tx@Dict begin PutEnd  end
 1820 1621 a 1820
1621 a
 tx@Dict begin PutEnd  end
 1820 1621 a 1820 1621 a
 tx@Dict begin { 56.90549 184. PtoC } PutCoor PutBegin  end
 1820 1621 a 1782 1645
a @beginspecial @setspecial
 tx@Dict begin STP newpath 0.0 SLW 1. setgray  0. true 1.5 neg 1.5
neg 10.74994 7.29999 .5 Frame  gsave 1. setgray fill  grestore end
 
@endspecial Fa(10)1820 1621
y
 tx@Dict begin PutEnd  end
 1820 1621 a @beginspecial @setspecial
 tx@Dict begin STP newpath 0.8 SLW 0. setgray  0.0 0.0 2 copy moveto
128.03734 .5 CLW mul sub 226. 293. arc closepath gsave 0.75 setgray
fill  grestore gsave 0.8 SLW 0. setgray 0 setlinecap stroke  grestore
end
 
@endspecial
1820 1621 a
 tx@Dict begin { 0.0 0.0 } PutCoor PutBegin  end
 1820 1621 a 1820 1621 a
 tx@Dict begin { 142.26372 13.88892 6.83331 0.0 260.  Uput UUput }
PutCoor PutBegin  end
 1820 1621 a 1762
1649 a Fb(FR)1820 1621 y
 tx@Dict begin PutEnd  end
 1820 1621 a 1820 1621 a
 tx@Dict begin PutEnd  end
 1820
1621 a 1820 1621 a
 tx@Dict begin { 56.90549 260. PtoC } PutCoor PutBegin  end
 1820 1621 a 1801 1645 a @beginspecial
@setspecial
 tx@Dict begin STP newpath 0.0 SLW 1. setgray  0. true 1.5 neg 1.5
neg 6.12497 7.29999 .5 Frame  gsave 1. setgray fill  grestore end
 
@endspecial Fa(8)1820 1621 y
 tx@Dict begin PutEnd  end
 1820 1621 a
@beginspecial @setspecial
 tx@Dict begin STP newpath 0.8 SLW 0. setgray  0.0 0.0 2 copy moveto
128.03734 .5 CLW mul sub 293. 360. arc closepath gsave 1.00 setgray
fill  grestore gsave 0.8 SLW 0. setgray 0 setlinecap stroke  grestore
end
 
@endspecial 1820 1621 a
 tx@Dict begin { 0.0 0.0 } PutCoor PutBegin  end
 1820
1621 a 1820 1621 a
 tx@Dict begin { 142.26372 14.93059 6.83331 0.0 327.  Uput UUput }
PutCoor PutBegin  end
 1820 1621 a 1758 1649 a Fb(GB)1820
1621 y
 tx@Dict begin PutEnd  end
 1820 1621 a 1820 1621 a
 tx@Dict begin PutEnd  end
 1820 1621 a 1820 1621
a
 tx@Dict begin { 56.90549 327. PtoC } PutCoor PutBegin  end
 1820 1621 a 1801 1645 a @beginspecial @setspecial
 tx@Dict begin STP newpath 0.0 SLW 1. setgray  0. true 1.5 neg 1.5
neg 6.12497 7.29999 .5 Frame  gsave 1. setgray fill  grestore end
 
@endspecial
Fa(8)1820 1621 y
 tx@Dict begin PutEnd  end
 1820 1621 a 1926 5255 a Fb(1)p eop end
userdict /end-hook known{end-hook}if
