
(defmeth boxmat-proto :add-boxplot
	   (y
	    &key (fiv '(0 1 2 3 4) fiv-set)
		 (mean-y (if (not y) (select fiv 2) (mean y)))
		 (x 1.0) (width 1.0) (draw nil)
		 (outliers t)
	   )
  (labels ((xor (a b) (or (and a (not b)) (and (not a) b))))
	  (unless (xor (not(not y)) fiv-set)
		  (error "Exactly one of Y or FIV must be set."))
  )
  (unless (= 2 (send self :num-variables)) (error "only works for 2D plots"))
  (if (not(not y)) (setf fiv (fivenum y)))
  (let* ((half-box (* 0.4 width))
	 (half-foot (* 0.1 width))
	 (low (select fiv 0))
	 (q1 (select fiv 1))
	 (med (select fiv 2))
	 (q3 (select fiv 3))
	 (high (select fiv 4))
	 (num-points (send self :num-points))
	 (num-lines  (send self :num-lines))
	 (cut-range  (slot-value 'cut-range))
	 (fourth-spread (- q3 q1))
	 (low-cut  (- q1 (* cut-range 1.5 fourth-spread)))
	 (high-cut (+ q3 (* cut-range 1.5 fourth-spread)))
	)
    (cond ((= cut-range 0) (setf low-cut low) (setf high-cut high)))
    (send self :add-points (list x) (list mean-y) :draw nil)
    (send self :point-color num-points (slot-value 'mean-color))
    (setf (slot-value 'box-line-start)
		      (concatenate 'list (slot-value 'box-line-start)
					 (list num-lines )))
    (setf (slot-value 'box-point-start)
