
(defmeth boxmat-proto :redraw ()
  (call-next-method)
  ;ss df ms
    (cond ((slot-value 'print-ss)
	   (let* ((ss (slot-value 'ss))
		  (df (slot-value 'df))
		  (ms (slot-value 'ms))
		  (ss-where (slot-value 'ss-where))
		 )
		 (cond ((not ms)
			(setf ms (flet ((div-nil (a b)
						 (if (and a b (/= b 0)) (/ a b))
					)
				       )
				       (div-nil ss df)
				 )
			)
			(setf (slot-value 'ms) ms)
		       )
		 )
		 (send self :draw-text (format nil "ss: ~g" ss)
					2 (select ss-where 0) 0 1)
		 (send self :draw-text (format nil "df: ~g" df)
					2 (select ss-where 1) 0 1)
		 (send self :draw-text (format nil "ms: ~g" ms)
					2 (select ss-where 2) 0 1)
	   )
	  )
    )
)


(defmeth boxmat-proto :redraw-background ()
  (call-next-method)
(labels (

(      y-axis-label (y-values y-labels self)
  (map-elements #'(lambda (y-v y-l x-v)
			  (let* ((canv (send self :real-to-canvas x-v y-v))
				)
				(send self :draw-text-up (format nil "~d" y-l)
;  original location		      (- (first canv) 21) (second canv) 1 0))
				      (- (first canv)  7) (second canv) 1 0))
		  )
		y-values y-labels (first (send self :range 0))
  )
)

(      y-axis-tick (y-values self)
  (map-elements #'(lambda (y-v x-v)
			  (let* ((canv (send self :real-to-canvas x-v y-v))
				 (x (first canv))
				 (y (second canv))
				)
				(send self :draw-line (- x 1) y (- x 4) y)
			  )
		  )
		y-values (first (send self :range 0))
  )
)

(      x-axis-label (x-values x-labels self)
 (let* ((x-axis-label-where (slot-value 'x-axis-label-where)))
  (map-elements #'(lambda (x-v x-l y-v)
			  (let* ((canv (send self :real-to-canvas x-v y-v))
				)
				(send self :draw-text (format nil "~d" x-l)
				      (first canv)
				      (+ (second canv) x-axis-label-where) 1 0))
		  )
		x-values x-labels (first (send self :range 1))
  )
 )
)

(      x-axis-tick (x-values self)
  (map-elements #'(lambda (x-v y-v)
			  (let* ((canv (send self :real-to-canvas x-v y-v))
				 (x (first canv))
				 (y (second canv))
				)
				(send self :draw-line x (+ y 1) x (+ y 4))
			  )
		  )
		x-values (first (send self :range 1))
  )
)

(      row-names (row-centers row-names self)
  (map-elements #'(lambda (y-v r-n x-v)
			  (let* ((canv (send self :real-to-canvas x-v y-v))
				)
				(send self :draw-text (format nil "~d" r-n)
				   (- (first canv) 18) (second canv) 2 1))
;  goes with original		(send self :draw-text (format nil "~d " r-n)
;  location of y-axis-label	      (first canv) (second canv) 2 1))
		  )
		row-centers row-names (first (send self :range 0))
  )
)

(      y-label-move (self)
  (let* ((y-label (send self :variable-label 1))
	 (y-mean (mean (select (send self :range 1) '(0 1))))
	 (y-canv (second (send self :real-to-canvas 0 y-mean)))
	)
	(send self :draw-text-up y-label 1 y-canv 1 1)
	y-label
  )
)

(      x-label-move (self)
  (let* ((x-label (send self :variable-label 0))
	 (x-mean (mean (select (send self :range 0) '(0 1))))
	 (x-canv (first (send self :real-to-canvas x-mean 0)))
	 (y-canv (- (send self :canvas-height) 14))
	)
	(send self :draw-text x-label x-canv y-canv 1 1)
	x-label
  )
)
)  ;end labels definitions

  ;row-names
    (row-names (slot-value 'row-centers) (slot-value 'row-names) self)
  ; axes
    (x-axis-label (slot-value 'x-axis-tick) (slot-value 'x-axis-label) self)
    (x-axis-tick  (slot-value 'x-axis-tick) self)
    (if (slot-value 'x-label-move) (x-label-move self))
    (y-axis-label (slot-value 'y-axis-tick) (slot-value 'y-axis-label) self)
    (y-axis-tick  (slot-value 'y-axis-tick) self)
    (if (slot-value 'y-label-move) (y-label-move self))
)  ; end labels usage
)



